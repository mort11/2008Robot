MP2COD 4.1, COFF to COD File Converter
Copyright (c) 2006 Microchip Technology Inc.
Listing File Generated: Mon Jan 12 18:53:17 2009


Address  Value    Disassembly              Source                                                                           File
-------  -------  -----------------------  -------------------------------------------------------------------------------  -----
                                           /******************************************************************************* C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	TITLE		adc.c                                                                   C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	VERSION:	0.6 (Beta)                                                            C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	DATE:		13-Jan-2008                                                             C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	AUTHOR:		R. Kevin Watson                                                       C:\mort\Mort Code 08\code\adc.c
                                           *				kevinw@jpl.nasa.gov                                                         C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	COMMENTS:	This version is compatible with Microchip C18 3.0+ only.             C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *				This version will only work with PIC18F8722 based robot                     C:\mort\Mort Code 08\code\adc.c
                                           *				controllers. You should use version 0.3 of this software                    C:\mort\Mort Code 08\code\adc.c
                                           *				with a PIC18F8520 based robot controller.                                   C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *				This file best viewed with tabs set to four.                                C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *				You are free to use this source code for any non-commercial                 C:\mort\Mort Code 08\code\adc.c
                                           *				use. Please do not make copies of this source code, modified                C:\mort\Mort Code 08\code\adc.c
                                           *				or un-modified, publicly available on the internet or                       C:\mort\Mort Code 08\code\adc.c
                                           *				elsewhere without permission. Thanks.                                       C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *				Copyright ©2005-2008 R. Kevin Watson. All rights are reserved.              C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           ******************************************************************************** C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	CHANGE LOG:                                                                    C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	DATE         REV  DESCRIPTION                                                  C:\mort\Mort Code 08\code\adc.c
                                           *	-----------  ---  ----------------------------------------------------------   C:\mort\Mort Code 08\code\adc.c
                                           *	10-Jul-2005  0.1  RKW - Original code.                                         C:\mort\Mort Code 08\code\adc.c
                                           *	17-Jul-2005  0.2  RKW - Added x128 and x256 oversampling options.              C:\mort\Mort Code 08\code\adc.c
                                           *	13-Dec-2005  0.3  RKW - Altered code to use the "special event trigger"        C:\mort\Mort Code 08\code\adc.c
                                           *	                  functionality of the CCP2 hardware to initiate ADC           C:\mort\Mort Code 08\code\adc.c
                                           *	                  conversions. This was formally done using timer 2.           C:\mort\Mort Code 08\code\adc.c
                                           *	10-Jan-2006  0.4  RKW - Ported to PIC18F8722, which required going back        C:\mort\Mort Code 08\code\adc.c
                                           *	                  to using timer 2 to initiate an analog to digital            C:\mort\Mort Code 08\code\adc.c
                                           *	                  conversion due to a bug in the PIC18F8722 design.            C:\mort\Mort Code 08\code\adc.c
                                           *	                  Modified #pragma interruptlow statement to include           C:\mort\Mort Code 08\code\adc.c
                                           *	                  .tmpdata section.                                            C:\mort\Mort Code 08\code\adc.c
                                           *	03-Jan-2008  0.5  RKW - Modified code to use the PIC18F8722's built in         C:\mort\Mort Code 08\code\adc.c
                                           *	                  acquisition delay functionality to initiate ADC              C:\mort\Mort Code 08\code\adc.c
                                           *	                  conversions automatically. This means only one               C:\mort\Mort Code 08\code\adc.c
                                           *	                  interrupt is generated for each conversion instead           C:\mort\Mort Code 08\code\adc.c
                                           *	                  of two. Unfortunately, this breaks compatibility             C:\mort\Mort Code 08\code\adc.c
                                           *	                  with the PIC18F8520 based robot controllers.                 C:\mort\Mort Code 08\code\adc.c
                                           *	03-Jan-2008  0.6  RKW - Modified code to use timer 4 instead of 2.             C:\mort\Mort Code 08\code\adc.c
                                           *	13-Jan-2008  0.6  RKW - ISR modification to improve efficiency. Made           C:\mort\Mort Code 08\code\adc.c
                                           *	                  modifications to documentation to be consistant with         C:\mort\Mort Code 08\code\adc.c
                                           *	                  new robot controller code.                                   C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           #include "ifi_frc.h"                                                             C:\mort\Mort Code 08\code\adc.c
                                           #include "adc.h"                                                                 C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           unsigned int adc_sample_rate;                                                    C:\mort\Mort Code 08\code\adc.c
                                           unsigned int adc_samples_per_update;                                             C:\mort\Mort Code 08\code\adc.c
                                           unsigned char num_adc_channels;                                                  C:\mort\Mort Code 08\code\adc.c
                                           unsigned char adc_result_divisor;                                                C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           volatile unsigned long accum[NUM_ADC_CHANNELS]; // sample accumulator            C:\mort\Mort Code 08\code\adc.c
                                           volatile unsigned int adc_result[NUM_ADC_CHANNELS]; // ADC recults               C:\mort\Mort Code 08\code\adc.c
                                           volatile unsigned int samples; // current number of samples accumulated          C:\mort\Mort Code 08\code\adc.c
                                           volatile unsigned char channel; // current ADC channel                           C:\mort\Mort Code 08\code\adc.c
                                           volatile unsigned char adc_update_count = 0; // ADC update flag                  C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	FUNCTION:		Initialize_ADC()                                                    C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	PURPOSE:		Initializes the Analog to Digital Conversion (ADC) hardware.         C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	CALLED FROM:	main.c/Initialization()                                           C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	COMMENTS:		Place '#include "adc.h"' in the includes section                    C:\mort\Mort Code 08\code\adc.c
                                           *					of main.c then call Initialize_ADC() in                                    C:\mort\Mort Code 08\code\adc.c
                                           *					main.c/Initialization().                                                   C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\adc.c
0038b8   d969     RCALL     0x3b8c         void Initialize_ADC(void)                                                        C:\mort\Mort Code 08\code\adc.c
0038ba   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\mort\Mort Code 08\code\adc.c
                                           	unsigned char i;                                                                C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// Initialize ADC related global variables using default values from adc.h.     C:\mort\Mort Code 08\code\adc.c
                                           	// Another way to do this would be to pass the values in, read them from        C:\mort\Mort Code 08\code\adc.c
                                           	// values stored in EEPROM or perhaps set them via a menu-based terminal        C:\mort\Mort Code 08\code\adc.c
                                           	// interface.                                                                   C:\mort\Mort Code 08\code\adc.c
0038bc   0101     MOVLB     0x1            	adc_sample_rate = ADC_SAMPLE_RATE;                                              C:\mort\Mort Code 08\code\adc.c
0038be   6bcd     CLRF      0xcd,0x1                                                                                        
0038c0   0e19     MOVLW     0x19                                                                                            
0038c2   6fce     MOVWF     0xce,0x1                                                                                        
0038c4   0e06     MOVLW     0x6            	num_adc_channels = NUM_ADC_CHANNELS;                                            C:\mort\Mort Code 08\code\adc.c
0038c6   6fd1     MOVWF     0xd1,0x1                                                                                        
0038c8   0e02     MOVLW     0x2            	adc_result_divisor = ADC_RESULT_DIVISOR;                                        C:\mort\Mort Code 08\code\adc.c
0038ca   6fd2     MOVWF     0xd2,0x1                                                                                        
0038cc   0e10     MOVLW     0x10           	adc_samples_per_update = ADC_SAMPLES_PER_UPDATE;                                C:\mort\Mort Code 08\code\adc.c
0038ce   6fcf     MOVWF     0xcf,0x1                                                                                        
0038d0   6bd0     CLRF      0xd0,0x1                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// reset the sample accumulator(s) to zero                                      C:\mort\Mort Code 08\code\adc.c
0038d2   6adf     CLRF      0xdf,0x0       	for(i=0; i < num_adc_channels; i++)                                             C:\mort\Mort Code 08\code\adc.c
0038d4   51d1     MOVF      0xd1,0x0,0x1                                                                                    
0038d6   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0038d8   e208     BC        0x38ea                                                                                          
0038e6   2adf     INCF      0xdf,0x1,0x0                                                                                    
0038e8   d7f5     BRA       0x38d4                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\adc.c
0038da   50df     MOVF      0xdf,0x0,0x0   		accum[i] = 0L;                                                                 C:\mort\Mort Code 08\code\adc.c
0038dc   d95c     RCALL     0x3b96                                                                                          
0038de   6aee     CLRF      0xee,0x0                                                                                        
0038e0   6aee     CLRF      0xee,0x0                                                                                        
0038e2   6aee     CLRF      0xee,0x0                                                                                        
0038e4   6aee     CLRF      0xee,0x0                                                                                        
003b96   0d04     MULLW     0x4                                                                                             
003b98   cff3     MOVFF     0xff3,0xfe9                                                                                     
003b9a   ffe9                                                                                                               
003b9c   cff4     MOVFF     0xff4,0xfea                                                                                     
003b9e   ffea                                                                                                               
003ba0   0ed3     MOVLW     0xd3                                                                                            
003ba2   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
003ba4   0e01     MOVLW     0x1                                                                                             
003ba6   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
003ba8   0012     RETURN    0x0                                                                                             
                                           	}                                                                               C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// start a new sample set                                                       C:\mort\Mort Code 08\code\adc.c
0038ea   6bf7     CLRF      0xf7,0x1       	samples = 0;                                                                    C:\mort\Mort Code 08\code\adc.c
0038ec   6bf8     CLRF      0xf8,0x1                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// start at ADC channel zero                                                    C:\mort\Mort Code 08\code\adc.c
0038ee   6bf9     CLRF      0xf9,0x1       	channel = 0;                                                                    C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// enable the ADC hardware and select ADC channel 0                             C:\mort\Mort Code 08\code\adc.c
0038f0   0e01     MOVLW     0x1            	ADCON0 = 0b00000001;                                                            C:\mort\Mort Code 08\code\adc.c
0038f2   6ec2     MOVWF     0xc2,0x0                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// enable all sixteen analog inputs                                             C:\mort\Mort Code 08\code\adc.c
0038f4   6ac1     CLRF      0xc1,0x0       	ADCON1 = 0;                                                                     C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// select Fosc/64 as the ADC Conversion Clock, right justify data               C:\mort\Mort Code 08\code\adc.c
                                           	// in the conversion result register and select 20 Tad acquisition              C:\mort\Mort Code 08\code\adc.c
                                           	// period                                                                       C:\mort\Mort Code 08\code\adc.c
0038f6   0ebe     MOVLW     0xbe           	ADCON2 = 0b10111110;                                                            C:\mort\Mort Code 08\code\adc.c
0038f8   6ec0     MOVWF     0xc0,0x0                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// make sure the ADC interrupt is disabled                                      C:\mort\Mort Code 08\code\adc.c
0038fa   9c9d     BCF       0x9d,0x6,0x0   	PIE1bits.ADIE = 0;                                                              C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// initialize and start timer 4, which is responsible for starting              C:\mort\Mort Code 08\code\adc.c
                                           	// analog to digital conversions                                                C:\mort\Mort Code 08\code\adc.c
0038fc   51cd     MOVF      0xcd,0x0,0x1   	switch(adc_sample_rate)                                                         C:\mort\Mort Code 08\code\adc.c
0038fe   e102     BNZ       0x3904                                                                                          
003900   0e19     MOVLW     0x19                                                                                            
003902   19ce     XORWF     0xce,0x0,0x1                                                                                    
003904   e028     BZ        0x3956                                                                                          
003906   0e80     MOVLW     0x80                                                                                            
003908   19cd     XORWF     0xcd,0x0,0x1                                                                                    
00390a   e102     BNZ       0x3910                                                                                          
00390c   0e0c     MOVLW     0xc                                                                                             
00390e   19ce     XORWF     0xce,0x0,0x1                                                                                    
003910   e01e     BZ        0x394e                                                                                          
003912   0e40     MOVLW     0x40                                                                                            
003914   19cd     XORWF     0xcd,0x0,0x1                                                                                    
003916   e102     BNZ       0x391c                                                                                          
003918   0e06     MOVLW     0x6                                                                                             
00391a   19ce     XORWF     0xce,0x0,0x1                                                                                    
00391c   e016     BZ        0x394a                                                                                          
00391e   0e20     MOVLW     0x20                                                                                            
003920   19cd     XORWF     0xcd,0x0,0x1                                                                                    
003922   e102     BNZ       0x3928                                                                                          
003924   0e03     MOVLW     0x3                                                                                             
003926   19ce     XORWF     0xce,0x0,0x1                                                                                    
003928   e00e     BZ        0x3946                                                                                          
00392a   0e90     MOVLW     0x90                                                                                            
00392c   19cd     XORWF     0xcd,0x0,0x1                                                                                    
00392e   e102     BNZ       0x3934                                                                                          
003930   0e01     MOVLW     0x1                                                                                             
003932   19ce     XORWF     0xce,0x0,0x1                                                                                    
003934   e006     BZ        0x3942                                                                                          
003936   0ec8     MOVLW     0xc8                                                                                            
003938   19cd     XORWF     0xcd,0x0,0x1                                                                                    
00393a   e111     BNZ       0x395e                                                                                          
00393c   51ce     MOVF      0xce,0x0,0x1                                                                                    
00393e   e10f     BNZ       0x395e                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\adc.c
                                           		case 200:                                                                      C:\mort\Mort Code 08\code\adc.c
                                           			// use these parameters for a 200Hz ADC sample rate                           C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           			// use a 1:16 prescaler and 1:14 postscaler                                   C:\mort\Mort Code 08\code\adc.c
                                           			T4CON = 0b01101010;                                                           C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           			// Count to 221 before rolling over and generating                            C:\mort\Mort Code 08\code\adc.c
                                           			// an interrupt (223.21 - 2 is ideal)                                         C:\mort\Mort Code 08\code\adc.c
                                           			PR4	= 221;                                                                    C:\mort\Mort Code 08\code\adc.c
003940   d00e     BRA       0x395e         			break;                                                                        C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           		case 400:                                                                      C:\mort\Mort Code 08\code\adc.c
                                           			// use these parameters for a 400Hz ADC sample rate                           C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           			// use a 1:16 prescaler and 1:11 postscaler                                   C:\mort\Mort Code 08\code\adc.c
003942   0e52     MOVLW     0x52           			T4CON = 0b01010010;                                                           C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           			// Count to 140 before rolling over and generating                            C:\mort\Mort Code 08\code\adc.c
                                           			// an interrupt (142.05 - 2 is ideal)                                         C:\mort\Mort Code 08\code\adc.c
                                           			PR4	= 140;                                                                    C:\mort\Mort Code 08\code\adc.c
003944   d009     BRA       0x3958         			break;                                                                        C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           		case 800:                                                                      C:\mort\Mort Code 08\code\adc.c
                                           			// use these parameters for a 800Hz ADC sample rate                           C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           			// use a 1:16 prescaler and 1:11 postscaler                                   C:\mort\Mort Code 08\code\adc.c
003946   0e52     MOVLW     0x52           			T4CON = 0b01010010;                                                           C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           			// Count to 69 before rolling over and generating                             C:\mort\Mort Code 08\code\adc.c
                                           			// an interrupt (71.02 - 2 is ideal)                                          C:\mort\Mort Code 08\code\adc.c
                                           			PR4	= 69;                                                                     C:\mort\Mort Code 08\code\adc.c
003948   d003     BRA       0x3950         			break;                                                                        C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           		case 1600:                                                                     C:\mort\Mort Code 08\code\adc.c
                                           			// use these parameters for a 1600Hz ADC sample rate                          C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           			// use a 1:4 prescaler and 1:11 postscaler                                    C:\mort\Mort Code 08\code\adc.c
00394a   0e51     MOVLW     0x51           			T4CON = 0b01010001;                                                           C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           			// Count to 140 before rolling over and generating                            C:\mort\Mort Code 08\code\adc.c
                                           			// an interrupt (142.05 - 2 is ideal)                                         C:\mort\Mort Code 08\code\adc.c
                                           			PR4	= 140;                                                                    C:\mort\Mort Code 08\code\adc.c
00394c   d005     BRA       0x3958         			break;                                                                        C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           		case 3200:                                                                     C:\mort\Mort Code 08\code\adc.c
                                           			// use these parameters for a 3200Hz ADC sample rate                          C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           			// use a 1:1 prescaler and 1:11 postscaler                                    C:\mort\Mort Code 08\code\adc.c
00394e   0e51     MOVLW     0x51           			T4CON = 0b01010001;                                                           C:\mort\Mort Code 08\code\adc.c
003950   6e76     MOVWF     0x76,0x0                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           			// Count to 69 before rolling over and generating                             C:\mort\Mort Code 08\code\adc.c
                                           			// an interrupt (71.02 - 2 is ideal)                                          C:\mort\Mort Code 08\code\adc.c
003952   0e45     MOVLW     0x45           			PR4	= 69;                                                                     C:\mort\Mort Code 08\code\adc.c
003954   d007     BRA       0x3964         			break;                                                                        C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           		case 6400:                                                                     C:\mort\Mort Code 08\code\adc.c
                                           			// use these parameters for a 6400Hz ADC sample rate                          C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           			// use a 1:4 prescaler and 1:11 postscaler                                    C:\mort\Mort Code 08\code\adc.c
003956   0e50     MOVLW     0x50           			T4CON = 0b01010000;                                                           C:\mort\Mort Code 08\code\adc.c
003958   6e76     MOVWF     0x76,0x0                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           			// Count to 140 before rolling over and generating                            C:\mort\Mort Code 08\code\adc.c
                                           			// an interrupt (142.05 - 2 is ideal)                                         C:\mort\Mort Code 08\code\adc.c
00395a   0e8c     MOVLW     0x8c           			PR4	= 140;                                                                    C:\mort\Mort Code 08\code\adc.c
00395c   d003     BRA       0x3964         			break;                                                                        C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           		default:                                                                       C:\mort\Mort Code 08\code\adc.c
                                           			// if a non-supported rate is specified,                                      C:\mort\Mort Code 08\code\adc.c
                                           			// default to a 200Hz ADC sample rate                                         C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           			// use a 1:16 prescaler and 1:14 postscaler                                   C:\mort\Mort Code 08\code\adc.c
00395e   0e6a     MOVLW     0x6a           			T4CON = 0b01101010;                                                           C:\mort\Mort Code 08\code\adc.c
003960   6e76     MOVWF     0x76,0x0                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           			// Count to 221 before rolling over and generating                            C:\mort\Mort Code 08\code\adc.c
                                           			// an interrupt (223.21 - 2 is ideal)                                         C:\mort\Mort Code 08\code\adc.c
003962   0edd     MOVLW     0xdd           			PR4	= 221;                                                                    C:\mort\Mort Code 08\code\adc.c
003964   6e77     MOVWF     0x77,0x0                                                                                        
                                           			break;                                                                        C:\mort\Mort Code 08\code\adc.c
                                           	}                                                                               C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// make sure the timer 4 register starts at zero                                C:\mort\Mort Code 08\code\adc.c
003966   6a78     CLRF      0x78,0x0       	TMR4 = 0x00;                                                                    C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// timer 4 interrupt is low priority                                            C:\mort\Mort Code 08\code\adc.c
003968   96a5     BCF       0xa5,0x3,0x0   	IPR3bits.TMR4IP = 0;                                                            C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// to prevent a spurious interrupt, make sure the interrupt flag is reset       C:\mort\Mort Code 08\code\adc.c
00396a   96a4     BCF       0xa4,0x3,0x0   	PIR3bits.TMR4IF = 0;                                                            C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// enable the timer 4 interrupt                                                 C:\mort\Mort Code 08\code\adc.c
00396c   86a3     BSF       0xa3,0x3,0x0   	PIE3bits.TMR4IE = 1;                                                            C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// enable timer 4                                                               C:\mort\Mort Code 08\code\adc.c
00396e   8476     BSF       0x76,0x2,0x0   	T4CONbits.TMR4ON = 1;                                                           C:\mort\Mort Code 08\code\adc.c
003970   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\mort\Mort Code 08\code\adc.c
003972   d108     BRA       0x3b84                                                                                          
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	FUNCTION:		Disable_ADC()                                                       C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	PURPOSE:		Disables the Analog to Digital Conversion (ADC) hardware.            C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\adc.c
003974   cfd9     MOVFF     0xfd9,0xfe6    void Disable_ADC(void)                                                           C:\mort\Mort Code 08\code\adc.c
003976   ffe6                                                                                                               
003978   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\mort\Mort Code 08\code\adc.c
                                           	unsigned char i;                                                                C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// disable the timer 4 interrupt                                                C:\mort\Mort Code 08\code\adc.c
00397a   96a3     BCF       0xa3,0x3,0x0   	PIE3bits.TMR4IE = 0;                                                            C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// disable timer 4                                                              C:\mort\Mort Code 08\code\adc.c
00397c   9476     BCF       0x76,0x2,0x0   	T4CONbits.TMR4ON = 0;                                                           C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// disable the ADC hardware and select ADC channel 0                            C:\mort\Mort Code 08\code\adc.c
00397e   6ac2     CLRF      0xc2,0x0       	ADCON0 = 0b00000000;                                                            C:\mort\Mort Code 08\code\adc.c
003980   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\mort\Mort Code 08\code\adc.c
003982   d100     BRA       0x3b84                                                                                          
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	FUNCTION:		Get_ADC_Result()                                                    C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	PURPOSE:		Given the ADC channel number, returns the last ADC result            C:\mort\Mort Code 08\code\adc.c
                                           *					expressed in "data number" units.                                          C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	PARAMETERS:		ADC channel number                                                C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\adc.c
003984   d903     RCALL     0x3b8c         unsigned int Get_ADC_Result(unsigned char channel)                               C:\mort\Mort Code 08\code\adc.c
003986   0e02     MOVLW     0x2                                                                                             
003988   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\mort\Mort Code 08\code\adc.c
                                           	unsigned int temp_adc_result;                                                   C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
00398a   0efe     MOVLW     0xfe           	if(channel <= num_adc_channels)                                                 C:\mort\Mort Code 08\code\adc.c
00398c   cfdb     MOVFF     0xfdb,0x0                                                                                       
00398e   f000                                                                                                               
003990   0101     MOVLB     0x1                                                                                             
003992   51d1     MOVF      0xd1,0x0,0x1                                                                                    
003994   80d8     BSF       0xd8,0x0,0x0                                                                                    
003996   5400     SUBFWB    0x0,0x0,0x0                                                                                     
003998   e30c     BNC       0x39b2                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\adc.c
                                           		// disable the timer interrupt                                                 C:\mort\Mort Code 08\code\adc.c
00399a   96a3     BCF       0xa3,0x3,0x0   		PIE3bits.TMR4IE = 0;                                                           C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           		// one is subtracted because analog input 1 maps to adc_result[0],             C:\mort\Mort Code 08\code\adc.c
                                           		// input 2 maps to adc_result[1],..., input 16 maps to adc_result[15]          C:\mort\Mort Code 08\code\adc.c
00399c   0efe     MOVLW     0xfe           		temp_adc_result = adc_result[channel - 1];                                     C:\mort\Mort Code 08\code\adc.c
00399e   04db     DECF      0xdb,0x0,0x0                                                                                    
0039a0   6ee9     MOVWF     0xe9,0x0                                                                                        
0039a2   6aea     CLRF      0xea,0x0                                                                                        
0039a4   d902     RCALL     0x3baa                                                                                          
0039a6   cfee     MOVFF     0xfee,0xfde                                                                                     
0039a8   ffde                                                                                                               
0039aa   cfed     MOVFF     0xfed,0xfdd                                                                                     
0039ac   ffdd                                                                                                               
003baa   90d8     BCF       0xd8,0x0,0x0                                                                                    
003bac   36e9     RLCF      0xe9,0x1,0x0                                                                                    
003bae   36ea     RLCF      0xea,0x1,0x0                                                                                    
003bb0   0eeb     MOVLW     0xeb                                                                                            
003bb2   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
003bb4   0e01     MOVLW     0x1                                                                                             
003bb6   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
003bb8   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           		// enable the timer interrupt                                                  C:\mort\Mort Code 08\code\adc.c
0039ae   86a3     BSF       0xa3,0x3,0x0   		PIE3bits.TMR4IE = 1;                                                           C:\mort\Mort Code 08\code\adc.c
                                           	}                                                                               C:\mort\Mort Code 08\code\adc.c
0039b0   d002     BRA       0x39b6         	else                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	{                                                                               C:\mort\Mort Code 08\code\adc.c
                                           		// bad channel number; return zero                                             C:\mort\Mort Code 08\code\adc.c
0039b2   6ade     CLRF      0xde,0x0       		temp_adc_result = 0;                                                           C:\mort\Mort Code 08\code\adc.c
0039b4   6add     CLRF      0xdd,0x0                                                                                        
                                           	}                                                                               C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
0039b6   cfde     MOVFF     0xfde,0x0      	return(temp_adc_result);                                                        C:\mort\Mort Code 08\code\adc.c
0039b8   f000                                                                                                               
0039ba   cfdd     MOVFF     0xfdd,0x1                                                                                       
0039bc   f001                                                                                                               
0039be   c000     MOVFF     0x0,0xff3                                                                                       
0039c0   fff3                                                                                                               
0039c2   c001     MOVFF     0x1,0xff4                                                                                       
0039c4   fff4                                                                                                               
0039c6   0e02     MOVLW     0x2            }                                                                                C:\mort\Mort Code 08\code\adc.c
0039c8   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0039ca   e202     BC        0x39d0                                                                                          
0039cc   6ae1     CLRF      0xe1,0x0                                                                                        
0039ce   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0039d0   6ee1     MOVWF     0xe1,0x0                                                                                        
0039d2   d0d8     BRA       0x3b84                                                                                          
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	FUNCTION:		Convert_ADC_to_mV()                                                 C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	PURPOSE:		Converts the raw output of the ADC to millivolts.                    C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	PARAMETERS:		ADC output value to convert                                       C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	RETURNS:		Millivolts                                                           C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\adc.c
0039d4   d8db     RCALL     0x3b8c         unsigned int Convert_ADC_to_mV(unsigned int adc)                                 C:\mort\Mort Code 08\code\adc.c
                                           {                                                                                C:\mort\Mort Code 08\code\adc.c
0039d6   0efd     MOVLW     0xfd           	return((unsigned int)(((long)adc * (VREF_POS_MV - VREF_NEG_MV)) / ADC_RANGE));  C:\mort\Mort Code 08\code\adc.c
0039d8   cfdb     MOVFF     0xfdb,0x0                                                                                       
0039da   f000                                                                                                               
0039dc   0efe     MOVLW     0xfe                                                                                            
0039de   cfdb     MOVFF     0xfdb,0x1                                                                                       
0039e0   f001                                                                                                               
0039e2   6a02     CLRF      0x2,0x0                                                                                         
0039e4   6a03     CLRF      0x3,0x0                                                                                         
0039e6   0e88     MOVLW     0x88                                                                                            
0039e8   6e35     MOVWF     0x35,0x0                                                                                        
0039ea   0e13     MOVLW     0x13                                                                                            
0039ec   6e36     MOVWF     0x36,0x0                                                                                        
0039ee   6a37     CLRF      0x37,0x0                                                                                        
0039f0   6a38     CLRF      0x38,0x0                                                                                        
0039f2   c000     MOVFF     0x0,0x30                                                                                        
0039f4   f030                                                                                                               
0039f6   c001     MOVFF     0x1,0x31                                                                                        
0039f8   f031                                                                                                               
0039fa   c002     MOVFF     0x2,0x32                                                                                        
0039fc   f032                                                                                                               
0039fe   c003     MOVFF     0x3,0x33                                                                                        
003a00   f033                                                                                                               
003a02   ec48     CALL      0x4690,0x0                                                                                      
003a04   f023                                                                                                               
003a06   c02c     MOVFF     0x2c,0x0                                                                                        
003a08   f000                                                                                                               
003a0a   c02d     MOVFF     0x2d,0x1                                                                                        
003a0c   f001                                                                                                               
003a0e   c02e     MOVFF     0x2e,0x2                                                                                        
003a10   f002                                                                                                               
003a12   c02f     MOVFF     0x2f,0x3                                                                                        
003a14   f003                                                                                                               
003a16   6a35     CLRF      0x35,0x0                                                                                        
003a18   0e10     MOVLW     0x10                                                                                            
003a1a   6e36     MOVWF     0x36,0x0                                                                                        
003a1c   6a37     CLRF      0x37,0x0                                                                                        
003a1e   6a38     CLRF      0x38,0x0                                                                                        
003a20   c02c     MOVFF     0x2c,0x30                                                                                       
003a22   f030                                                                                                               
003a24   c02d     MOVFF     0x2d,0x31                                                                                       
003a26   f031                                                                                                               
003a28   c02e     MOVFF     0x2e,0x32                                                                                       
003a2a   f032                                                                                                               
003a2c   c02f     MOVFF     0x2f,0x33                                                                                       
003a2e   f033                                                                                                               
003a30   ecbd     CALL      0x2f7a,0x0                                                                                      
003a32   f017                                                                                                               
003a34   c030     MOVFF     0x30,0x0                                                                                        
003a36   f000                                                                                                               
003a38   c031     MOVFF     0x31,0x1                                                                                        
003a3a   f001                                                                                                               
003a3c   c032     MOVFF     0x32,0x2                                                                                        
003a3e   f002                                                                                                               
003a40   c033     MOVFF     0x33,0x3                                                                                        
003a42   f003                                                                                                               
003a44   c030     MOVFF     0x30,0xff3                                                                                      
003a46   fff3                                                                                                               
003a48   c031     MOVFF     0x31,0xff4                                                                                      
003a4a   fff4                                                                                                               
003a4c   d09b     BRA       0x3b84         }                                                                                C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	FUNCTION:		Get_ADC_Result_Count()                                              C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	PURPOSE:                                                                       C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\adc.c
003a4e   d89e     RCALL     0x3b8c         unsigned char Get_ADC_Result_Count()                                             C:\mort\Mort Code 08\code\adc.c
003a50   52e6     MOVF      0xe6,0x1,0x0                                                                                    
003b8c   cfd9     MOVFF     0xfd9,0xfe6                                                                                     
003b8e   ffe6                                                                                                               
003b90   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003b92   ffd9                                                                                                               
003b94   0012     RETURN    0x0                                                                                             
                                           {                                                                                C:\mort\Mort Code 08\code\adc.c
                                           	unsigned char temp_adc_update_count;                                            C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// disable the timer interrupt                                                  C:\mort\Mort Code 08\code\adc.c
003a52   96a3     BCF       0xa3,0x3,0x0   	PIE3bits.TMR4IE = 0;                                                            C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
003a54   c0ff     MOVFF     0xff,0xfdf     	temp_adc_update_count = adc_update_count;                                       C:\mort\Mort Code 08\code\adc.c
003a56   ffdf                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// enable the timer interrupt                                                   C:\mort\Mort Code 08\code\adc.c
003a58   86a3     BSF       0xa3,0x3,0x0   	PIE3bits.TMR4IE = 1;                                                            C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
003a5a   50df     MOVF      0xdf,0x0,0x0   	return(temp_adc_update_count);                                                  C:\mort\Mort Code 08\code\adc.c
003a5c   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\mort\Mort Code 08\code\adc.c
003a5e   d092     BRA       0x3b84                                                                                          
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	FUNCTION:		Reset_ADC_Result_Count()                                            C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	PURPOSE:		Resets the ADC update counter to zero                                C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\adc.c
                                           void Reset_ADC_Result_Count()                                                    C:\mort\Mort Code 08\code\adc.c
                                           {                                                                                C:\mort\Mort Code 08\code\adc.c
                                           	// disable the timer interrupt                                                  C:\mort\Mort Code 08\code\adc.c
003a60   96a3     BCF       0xa3,0x3,0x0   	PIE3bits.TMR4IE = 0;                                                            C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
003a62   0100     MOVLB     0x0            	adc_update_count = 0;                                                           C:\mort\Mort Code 08\code\adc.c
003a64   6bff     CLRF      0xff,0x1                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// enable the timer interrupt                                                   C:\mort\Mort Code 08\code\adc.c
003a66   86a3     BSF       0xa3,0x3,0x0   	PIE3bits.TMR4IE = 1;                                                            C:\mort\Mort Code 08\code\adc.c
003a68   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	FUNCTION:		Timer_4_ISR()                                                       C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	PURPOSE:		Timer 4 interrupt service routine                                    C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	CALLED FROM:	ifi_frc.c/Interrupt_Handler_Low()                                 C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\adc.c
                                           *                                                                                C:\mort\Mort Code 08\code\adc.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\adc.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\adc.c
003a6a   d890     RCALL     0x3b8c         void Timer_4_ISR(void)                                                           C:\mort\Mort Code 08\code\adc.c
003a6c   0e05     MOVLW     0x5                                                                                             
003a6e   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\mort\Mort Code 08\code\adc.c
                                           	unsigned int adc;                                                               C:\mort\Mort Code 08\code\adc.c
                                           	unsigned char adcon0_temp;                                                      C:\mort\Mort Code 08\code\adc.c
                                           	int i;                                                                          C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// get conversion results                                                       C:\mort\Mort Code 08\code\adc.c
003a70   50c4     MOVF      0xc4,0x0,0x0   	adc = ADRESH;                                                                   C:\mort\Mort Code 08\code\adc.c
003a72   6ede     MOVWF     0xde,0x0                                                                                        
003a74   6add     CLRF      0xdd,0x0                                                                                        
003a76   cfd9     MOVFF     0xfd9,0xfe9    	adc <<= 8;                                                                      C:\mort\Mort Code 08\code\adc.c
003a78   ffe9                                                                                                               
003a7a   cfda     MOVFF     0xfda,0xfea                                                                                     
003a7c   ffea                                                                                                               
003a7e   50ee     MOVF      0xee,0x0,0x0                                                                                    
003a80   6eed     MOVWF     0xed,0x0                                                                                        
003a82   6aef     CLRF      0xef,0x0                                                                                        
003a84   50c3     MOVF      0xc3,0x0,0x0   	adc += ADRESL;                                                                  C:\mort\Mort Code 08\code\adc.c
003a86   26de     ADDWF     0xde,0x1,0x0                                                                                    
003a88   0e00     MOVLW     0x0                                                                                             
003a8a   22dd     ADDWFC    0xdd,0x1,0x0                                                                                    
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// add the ADC data to the appropriate accumulator                              C:\mort\Mort Code 08\code\adc.c
003a8c   cfde     MOVFF     0xfde,0x3e     	accum[channel] += (long)adc;                                                    C:\mort\Mort Code 08\code\adc.c
003a8e   f03e                                                                                                               
003a90   cfdd     MOVFF     0xfdd,0x3f                                                                                      
003a92   f03f                                                                                                               
003a94   6a40     CLRF      0x40,0x0                                                                                        
003a96   6a41     CLRF      0x41,0x0                                                                                        
003a98   0101     MOVLB     0x1                                                                                             
003a9a   51f9     MOVF      0xf9,0x0,0x1                                                                                    
003a9c   d87c     RCALL     0x3b96                                                                                          
003a9e   503e     MOVF      0x3e,0x0,0x0                                                                                    
003aa0   26ee     ADDWF     0xee,0x1,0x0                                                                                    
003aa2   503f     MOVF      0x3f,0x0,0x0                                                                                    
003aa4   22ee     ADDWFC    0xee,0x1,0x0                                                                                    
003aa6   5040     MOVF      0x40,0x0,0x0                                                                                    
003aa8   22ee     ADDWFC    0xee,0x1,0x0                                                                                    
003aaa   5041     MOVF      0x41,0x0,0x0                                                                                    
003aac   22ee     ADDWFC    0xee,0x1,0x0                                                                                    
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// increment the ADC channel index                                              C:\mort\Mort Code 08\code\adc.c
003aae   2bf9     INCF      0xf9,0x1,0x1   	channel++;                                                                      C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// do we need to wrap around to zero?                                           C:\mort\Mort Code 08\code\adc.c
003ab0   51d1     MOVF      0xd1,0x0,0x1   	if(channel >= num_adc_channels)                                                 C:\mort\Mort Code 08\code\adc.c
003ab2   5df9     SUBWF     0xf9,0x0,0x1                                                                                    
003ab4   e304     BNC       0x3abe                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\adc.c
003ab6   6bf9     CLRF      0xf9,0x1       		channel = 0;                                                                   C:\mort\Mort Code 08\code\adc.c
003ab8   2bf7     INCF      0xf7,0x1,0x1   		samples++;                                                                     C:\mort\Mort Code 08\code\adc.c
003aba   0e00     MOVLW     0x0                                                                                             
003abc   23f8     ADDWFC    0xf8,0x1,0x1                                                                                    
                                           	}                                                                               C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// Select next ADC channel. This also starts the process whereby the ADC        C:\mort\Mort Code 08\code\adc.c
                                           	// sample and hold capacitor is allowed to start charging, which must be        C:\mort\Mort Code 08\code\adc.c
                                           	// completed before the next analog to digital conversion can be started.       C:\mort\Mort Code 08\code\adc.c
003abe   0e02     MOVLW     0x2            	adcon0_temp = channel;                                                          C:\mort\Mort Code 08\code\adc.c
003ac0   c1f9     MOVFF     0x1f9,0xfdb                                                                                     
003ac2   ffdb                                                                                                               
003ac4   50db     MOVF      0xdb,0x0,0x0   	adcon0_temp <<= 2;                                                              C:\mort\Mort Code 08\code\adc.c
003ac6   0d04     MULLW     0x4                                                                                             
003ac8   0e02     MOVLW     0x2                                                                                             
003aca   cff3     MOVFF     0xff3,0xfdb                                                                                     
003acc   ffdb                                                                                                               
003ace   80db     BSF       0xdb,0x0,0x0   	adcon0_temp |= 0b00000001;                                                      C:\mort\Mort Code 08\code\adc.c
003ad0   50db     MOVF      0xdb,0x0,0x0   	ADCON0 = adcon0_temp;                                                           C:\mort\Mort Code 08\code\adc.c
003ad2   6ec2     MOVWF     0xc2,0x0                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// start a new analog to digital conversion                                     C:\mort\Mort Code 08\code\adc.c
003ad4   82c2     BSF       0xc2,0x1,0x0   	ADCON0bits.GO = 1;                                                              C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           	// check to see if we've got a full sample set                                  C:\mort\Mort Code 08\code\adc.c
003ad6   51cf     MOVF      0xcf,0x0,0x1   	if(samples >= adc_samples_per_update)                                           C:\mort\Mort Code 08\code\adc.c
003ad8   5df7     SUBWF     0xf7,0x0,0x1                                                                                    
003ada   51d0     MOVF      0xd0,0x0,0x1                                                                                    
003adc   59f8     SUBWFB    0xf8,0x0,0x1                                                                                    
003ade   e33f     BNC       0x3b5e                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\adc.c
                                           		// update the ADC result array and reset the sample accumulator(s) to zero     C:\mort\Mort Code 08\code\adc.c
003ae0   0e03     MOVLW     0x3            		for(i=0; i < num_adc_channels; i++)                                            C:\mort\Mort Code 08\code\adc.c
003ae2   6adb     CLRF      0xdb,0x0                                                                                        
003ae4   0e04     MOVLW     0x4                                                                                             
003ae6   6adb     CLRF      0xdb,0x0                                                                                        
003ae8   0e03     MOVLW     0x3                                                                                             
003aea   cfdb     MOVFF     0xfdb,0x3e                                                                                      
003aec   f03e                                                                                                               
003aee   0e04     MOVLW     0x4                                                                                             
003af0   cfdb     MOVFF     0xfdb,0x3f                                                                                      
003af2   f03f                                                                                                               
003af4   0101     MOVLB     0x1                                                                                             
003af6   51d1     MOVF      0xd1,0x0,0x1                                                                                    
003af8   0100     MOVLB     0x0                                                                                             
003afa   ae3f     BTFSS     0x3f,0x7,0x0                                                                                    
003afc   d002     BRA       0x3b02                                                                                          
003afe   90d8     BCF       0xd8,0x0,0x0                                                                                    
003b00   d003     BRA       0x3b08                                                                                          
003b02   5c3e     SUBWF     0x3e,0x0,0x0                                                                                    
003b04   0e00     MOVLW     0x0                                                                                             
003b06   583f     SUBWFB    0x3f,0x0,0x0                                                                                    
003b08   e225     BC        0x3b54                                                                                          
003b48   0e03     MOVLW     0x3                                                                                             
003b4a   2adb     INCF      0xdb,0x1,0x0                                                                                    
003b4c   0e04     MOVLW     0x4                                                                                             
003b4e   e3cc     BNC       0x3ae8                                                                                          
003b50   2adb     INCF      0xdb,0x1,0x0                                                                                    
003b52   d7ca     BRA       0x3ae8                                                                                          
                                           		{                                                                              C:\mort\Mort Code 08\code\adc.c
003b0a   d830     RCALL     0x3b6c         			adc_result[i] = (long)(accum[i] >> adc_result_divisor);                       C:\mort\Mort Code 08\code\adc.c
003b0c   0101     MOVLB     0x1                                                                                             
003b0e   51d2     MOVF      0xd2,0x0,0x1                                                                                    
003b10   0b1f     ANDLW     0x1f                                                                                            
003b12   cfee     MOVFF     0xfee,0x3e                                                                                      
003b14   f03e                                                                                                               
003b16   cfee     MOVFF     0xfee,0x3f                                                                                      
003b18   f03f                                                                                                               
003b1a   cfee     MOVFF     0xfee,0x40                                                                                      
003b1c   f040                                                                                                               
003b1e   cfee     MOVFF     0xfee,0x41                                                                                      
003b20   f041                                                                                                               
003b22   e007     BZ        0x3b32                                                                                          
003b24   90d8     BCF       0xd8,0x0,0x0                                                                                    
003b26   3241     RRCF      0x41,0x1,0x0                                                                                    
003b28   3240     RRCF      0x40,0x1,0x0                                                                                    
003b2a   323f     RRCF      0x3f,0x1,0x0                                                                                    
003b2c   323e     RRCF      0x3e,0x1,0x0                                                                                    
003b2e   06e8     DECF      0xe8,0x1,0x0                                                                                    
003b30   e1f9     BNZ       0x3b24                                                                                          
003b32   d843     RCALL     0x3bba                                                                                          
003b34   d83a     RCALL     0x3baa                                                                                          
003b36   c03e     MOVFF     0x3e,0xfee                                                                                      
003b38   ffee                                                                                                               
003b3a   c03f     MOVFF     0x3f,0xfed                                                                                      
003b3c   ffed                                                                                                               
003b6c   d826     RCALL     0x3bba                                                                                          
003b6e   90d8     BCF       0xd8,0x0,0x0                                                                                    
003b70   36e9     RLCF      0xe9,0x1,0x0                                                                                    
003b72   36ea     RLCF      0xea,0x1,0x0                                                                                    
003b74   90d8     BCF       0xd8,0x0,0x0                                                                                    
003b76   36e9     RLCF      0xe9,0x1,0x0                                                                                    
003b78   36ea     RLCF      0xea,0x1,0x0                                                                                    
003b7a   0ed3     MOVLW     0xd3                                                                                            
003b7c   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
003b7e   0e01     MOVLW     0x1                                                                                             
003b80   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
003b82   0012     RETURN    0x0                                                                                             
003bba   0e03     MOVLW     0x3                                                                                             
003bbc   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
003bbe   ffe9                                                                                                               
003bc0   0e04     MOVLW     0x4                                                                                             
003bc2   cfdb     MOVFF     0xfdb,0xfea                                                                                     
003bc4   ffea                                                                                                               
003bc6   0012     RETURN    0x0                                                                                             
003b3e   d816     RCALL     0x3b6c         			accum[i] = 0L;                                                                C:\mort\Mort Code 08\code\adc.c
003b40   6aee     CLRF      0xee,0x0                                                                                        
003b42   6aee     CLRF      0xee,0x0                                                                                        
003b44   6aee     CLRF      0xee,0x0                                                                                        
003b46   6aee     CLRF      0xee,0x0                                                                                        
                                           		}                                                                              C:\mort\Mort Code 08\code\adc.c
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           		// signal that a fresh sample set is available                                 C:\mort\Mort Code 08\code\adc.c
003b54   0100     MOVLB     0x0            		adc_update_count++;                                                            C:\mort\Mort Code 08\code\adc.c
003b56   2bff     INCF      0xff,0x1,0x1                                                                                    
                                                                                                                            C:\mort\Mort Code 08\code\adc.c
                                           		// start a fresh sample set                                                    C:\mort\Mort Code 08\code\adc.c
003b58   0101     MOVLB     0x1            		samples = 0;                                                                   C:\mort\Mort Code 08\code\adc.c
003b5a   6bf7     CLRF      0xf7,0x1                                                                                        
003b5c   6bf8     CLRF      0xf8,0x1                                                                                        
                                           	}                                                                               C:\mort\Mort Code 08\code\adc.c
003b5e   0e05     MOVLW     0x5            }                                                                                C:\mort\Mort Code 08\code\adc.c
003b60   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
003b62   e202     BC        0x3b68                                                                                          
003b64   6ae1     CLRF      0xe1,0x0                                                                                        
003b66   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003b68   6ee1     MOVWF     0xe1,0x0                                                                                        
003b6a   d00c     BRA       0x3b84                                                                                          
003b84   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003b86   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003b88   ffd9                                                                                                               
003b8a   0012     RETURN    0x0                                                                                             
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\adc.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\autonomous.c
                                           *                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                           *	TITLE:		autonomous.c                                                           C:\mort\Mort Code 08\code\autonomous.c
                                           *                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                           *	VERSION:	0.1 (Beta)                                                            C:\mort\Mort Code 08\code\autonomous.c
                                           *                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                           *	DATE:		31-Dec-2007                                                             C:\mort\Mort Code 08\code\autonomous.c
                                           *                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                           *	ATHOR:		R. Kevin Watson                                                        C:\mort\Mort Code 08\code\autonomous.c
                                           *				kevinw@jpl.nasa.gov                                                         C:\mort\Mort Code 08\code\autonomous.c
                                           *                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                           *	COMMENTS:	This file best viewed with tabs set to four.                         C:\mort\Mort Code 08\code\autonomous.c
                                           *                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                           *				You are free to use this source code for any non-commercial                 C:\mort\Mort Code 08\code\autonomous.c
                                           *				use. Please do not make copies of this source code, modified                C:\mort\Mort Code 08\code\autonomous.c
                                           *				or un-modified, publicly available on the internet or elsewhere             C:\mort\Mort Code 08\code\autonomous.c
                                           *				without permission. Thanks.                                                 C:\mort\Mort Code 08\code\autonomous.c
                                           *                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                           *				Copyright ©2007-2008 R. Kevin Watson. All rights are reserved.              C:\mort\Mort Code 08\code\autonomous.c
                                           *                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                           ******************************************************************************** C:\mort\Mort Code 08\code\autonomous.c
                                           *                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                           *	Change log:                                                                    C:\mort\Mort Code 08\code\autonomous.c
                                           *                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                           *	DATE         REV  DESCRIPTION                                                  C:\mort\Mort Code 08\code\autonomous.c
                                           *	-----------  ---  ----------------------------------------------------------   C:\mort\Mort Code 08\code\autonomous.c
                                           *	31-Dec-2007  0.1  RKW Original                                                 C:\mort\Mort Code 08\code\autonomous.c
                                           *                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\autonomous.c
                                           #include "ifi_frc.h"                                                             C:\mort\Mort Code 08\code\autonomous.c
                                           #include "timers.h"                                                              C:\mort\Mort Code 08\code\autonomous.c
                                           #include "interrupts.h"                                                          C:\mort\Mort Code 08\code\autonomous.c
                                           #include "encoder.h"                                                             C:\mort\Mort Code 08\code\autonomous.c
                                           #include "serial_ports.h"                                                        C:\mort\Mort Code 08\code\autonomous.c
                                           #include "ifi_code.h"                                                            C:\mort\Mort Code 08\code\autonomous.c
                                           #include "autonomous.h"                                                          C:\mort\Mort Code 08\code\autonomous.c
                                           #include "mort_defines.h"                                                        C:\mort\Mort Code 08\code\autonomous.c
                                           #include "adc.h"                                                                 C:\mort\Mort Code 08\code\autonomous.c
                                           #include "gyro.h"                                                                C:\mort\Mort Code 08\code\autonomous.c
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                           int x = 0;                                                                       C:\mort\Mort Code 08\code\autonomous.c
                                           int y = 0;                                                                       C:\mort\Mort Code 08\code\autonomous.c
                                           int z = 0;                                                                       C:\mort\Mort Code 08\code\autonomous.c
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                           int mode;                                                                        C:\mort\Mort Code 08\code\autonomous.c
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                           extern unsigned char height_flag;                                                C:\mort\Mort Code 08\code\autonomous.c
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                           unsigned char auto_state = 0;                                                    C:\mort\Mort Code 08\code\autonomous.c
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                           int Get_Auto_Mode(void)                                                          C:\mort\Mort Code 08\code\autonomous.c
                                           {                                                                                C:\mort\Mort Code 08\code\autonomous.c
003bc8   b687     BTFSC     0x87,0x3,0x0       if (rc_dig_in10 == 0)        // red 1                                        C:\mort\Mort Code 08\code\autonomous.c
003bca   d002     BRA       0x3bd0                                                                                          
003bcc   0e01     MOVLW     0x1                    return 1;                                                                C:\mort\Mort Code 08\code\autonomous.c
003bce   d00b     BRA       0x3be6                                                                                          
003bd0   b288     BTFSC     0x88,0x1,0x0       else if (rc_dig_in11 == 0)   // red 2                                        C:\mort\Mort Code 08\code\autonomous.c
003bd2   d002     BRA       0x3bd8                                                                                          
003bd4   0e02     MOVLW     0x2                    return 2;                                                                C:\mort\Mort Code 08\code\autonomous.c
003bd6   d007     BRA       0x3be6                                                                                          
003bd8   b488     BTFSC     0x88,0x2,0x0       else if (rc_dig_in12 == 0)   // blue 1                                       C:\mort\Mort Code 08\code\autonomous.c
003bda   d002     BRA       0x3be0                                                                                          
003bdc   0e03     MOVLW     0x3                    return 3;                                                                C:\mort\Mort Code 08\code\autonomous.c
003bde   d003     BRA       0x3be6                                                                                          
003be0   b688     BTFSC     0x88,0x3,0x0       else if (rc_dig_in13 == 0)   // blue 2                                       C:\mort\Mort Code 08\code\autonomous.c
003be2   d004     BRA       0x3bec                                                                                          
003be4   0e04     MOVLW     0x4                    return 4;                                                                C:\mort\Mort Code 08\code\autonomous.c
003be6   6ef3     MOVWF     0xf3,0x0                                                                                        
003be8   6af4     CLRF      0xf4,0x0                                                                                        
003bea   0012     RETURN    0x0                                                                                             
                                               else                                                                         C:\mort\Mort Code 08\code\autonomous.c
003bec   68f3     SETF      0xf3,0x0               return -1;                                                               C:\mort\Mort Code 08\code\autonomous.c
003bee   68f4     SETF      0xf4,0x0                                                                                        
003bf0   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                           void Autonomous_Init(void)                                                       C:\mort\Mort Code 08\code\autonomous.c
                                           {                                                                                C:\mort\Mort Code 08\code\autonomous.c
003bf2   0102     MOVLB     0x2                height_flag = HEIGHT_FLAG_MANUAL;                                            C:\mort\Mort Code 08\code\autonomous.c
003bf4   6be0     CLRF      0xe0,0x1                                                                                        
003bf6   ec26     CALL      0x464c,0x0         Timer_2_Start();                                                             C:\mort\Mort Code 08\code\autonomous.c
003bf8   f023                                                                                                               
003bfa   dfe6     RCALL     0x3bc8             mode = Get_Auto_Mode();                                                      C:\mort\Mort Code 08\code\autonomous.c
003bfc   cff3     MOVFF     0xff3,0x2f9                                                                                     
003bfe   f2f9                                                                                                               
003c00   cff4     MOVFF     0xff4,0x2fa                                                                                     
003c02   f2fa                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                               //Stop_Gyro_Bias_Calc();                                                     C:\mort\Mort Code 08\code\autonomous.c
                                                   //Reset_Gyro_Angle();                                                    C:\mort\Mort Code 08\code\autonomous.c
003c04   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                           void Autonomous(void)                                                            C:\mort\Mort Code 08\code\autonomous.c
                                           {                                                                                C:\mort\Mort Code 08\code\autonomous.c
003c06   0e01     MOVLW     0x1                Service_Brakes(1);                                                           C:\mort\Mort Code 08\code\autonomous.c
003c08   6ee6     MOVWF     0xe6,0x0                                                                                        
003c0a   ecd0     CALL      0x11a0,0x0                                                                                      
003c0c   f008                                                                                                               
003c0e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
003c10   0102     MOVLB     0x2                if (mode == 1) // red 1                                                      C:\mort\Mort Code 08\code\autonomous.c
003c12   0e01     MOVLW     0x1                                                                                             
003c14   19f9     XORWF     0xf9,0x0,0x1                                                                                    
003c16   e104     BNZ       0x3c20                                                                                          
003c18   51fa     MOVF      0xfa,0x0,0x1                                                                                    
003c1a   e102     BNZ       0x3c20                                                                                          
003c1c   d855     RCALL     0x3cc8                 IR_Drive();                                                              C:\mort\Mort Code 08\code\autonomous.c
003c1e   d017     BRA       0x3c4e             else if (mode == 2) // red 2                                                 C:\mort\Mort Code 08\code\autonomous.c
003c20   0e02     MOVLW     0x2                                                                                             
003c22   19f9     XORWF     0xf9,0x0,0x1                                                                                    
003c24   e104     BNZ       0x3c2e                                                                                          
003c26   51fa     MOVF      0xfa,0x0,0x1                                                                                    
003c28   e102     BNZ       0x3c2e                                                                                          
003c2a   d828     RCALL     0x3c7c                 Drive_Straight();                                                        C:\mort\Mort Code 08\code\autonomous.c
003c2c   d010     BRA       0x3c4e             else if (mode == 3) // blue 1   (drives straight with a delay)               C:\mort\Mort Code 08\code\autonomous.c
003c2e   0e03     MOVLW     0x3                                                                                             
003c30   19f9     XORWF     0xf9,0x0,0x1                                                                                    
003c32   e104     BNZ       0x3c3c                                                                                          
003c34   51fa     MOVF      0xfa,0x0,0x1                                                                                    
003c36   e102     BNZ       0x3c3c                                                                                          
003c38   d82e     RCALL     0x3c96                 Drive_Straight_Delay();                                                  C:\mort\Mort Code 08\code\autonomous.c
003c3a   d009     BRA       0x3c4e             else if (mode == 4) // blue 2   (no way)                                     C:\mort\Mort Code 08\code\autonomous.c
003c3c   0e04     MOVLW     0x4                                                                                             
003c3e   19f9     XORWF     0xf9,0x0,0x1                                                                                    
003c40   e104     BNZ       0x3c4a                                                                                          
003c42   51fa     MOVF      0xfa,0x0,0x1                                                                                    
003c44   e102     BNZ       0x3c4a                                                                                          
003c46   d87c     RCALL     0x3d40                 Drive_Continuous();                                                      C:\mort\Mort Code 08\code\autonomous.c
003c48   d002     BRA       0x3c4e             else                                                                         C:\mort\Mort Code 08\code\autonomous.c
003c4a   ec38     CALL      0x4070,0x0             Reset_Outputs();                                                         C:\mort\Mort Code 08\code\autonomous.c
003c4c   f020                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
003c4e   ec6e     CALL      0xedc,0x0          Service_Tower();                                                             C:\mort\Mort Code 08\code\autonomous.c
003c50   f007                                                                                                               
003c52   c327     MOVFF     0x327,0xfe6        Mec_Drive(x,y,z);                                                            C:\mort\Mort Code 08\code\autonomous.c
003c54   ffe6                                                                                                               
003c56   c328     MOVFF     0x328,0xfe6                                                                                     
003c58   ffe6                                                                                                               
003c5a   c325     MOVFF     0x325,0xfe6                                                                                     
003c5c   ffe6                                                                                                               
003c5e   c326     MOVFF     0x326,0xfe6                                                                                     
003c60   ffe6                                                                                                               
003c62   c323     MOVFF     0x323,0xfe6                                                                                     
003c64   ffe6                                                                                                               
003c66   c324     MOVFF     0x324,0xfe6                                                                                     
003c68   ffe6                                                                                                               
003c6a   ec9f     CALL      0x93e,0x0                                                                                       
003c6c   f004                                                                                                               
003c6e   6e00     MOVWF     0x0,0x0                                                                                         
003c70   0e06     MOVLW     0x6                                                                                             
003c72   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
003c74   5000     MOVF      0x0,0x0,0x0                                                                                     
003c76   ef14     GOTO      0x1228             Service_Dashboard_Data();                                                    C:\mort\Mort Code 08\code\autonomous.c
003c78   f009                                                                                                               
                                           }                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                           void Autonomous_Spin(void)                                                       C:\mort\Mort Code 08\code\autonomous.c
                                           {                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                           //    Process_Gyro_Data(TRUE);                                                   C:\mort\Mort Code 08\code\autonomous.c
003c7a   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                           void Drive_Straight()                                                            C:\mort\Mort Code 08\code\autonomous.c
                                           {                                                                                C:\mort\Mort Code 08\code\autonomous.c
003c7c   d8c3     RCALL     0x3e04             if ((Timer_2_Get_Time() <= 3300))                                            C:\mort\Mort Code 08\code\autonomous.c
003c7e   0ee4     MOVLW     0xe4                                                                                            
003c80   80d8     BSF       0xd8,0x0,0x0                                                                                    
003c82   54f3     SUBFWB    0xf3,0x0,0x0                                                                                    
003c84   0e0c     MOVLW     0xc                                                                                             
003c86   54f4     SUBFWB    0xf4,0x0,0x0                                                                                    
003c88   e305     BNC       0x3c94                                                                                          
                                               {                                                                            C:\mort\Mort Code 08\code\autonomous.c
003c8a   d8c3     RCALL     0x3e12                 x = 0;                                                                   C:\mort\Mort Code 08\code\autonomous.c
                                                   y = -127;                                                                C:\mort\Mort Code 08\code\autonomous.c
003c8c   0e03     MOVLW     0x3                    z = 3;                                                                   C:\mort\Mort Code 08\code\autonomous.c
003c8e   6f27     MOVWF     0x27,0x1                                                                                        
003c90   6b28     CLRF      0x28,0x1                                                                                        
                                               }                                                                            C:\mort\Mort Code 08\code\autonomous.c
003c92   0012     RETURN    0x0                else // 5800 //3000                                                          C:\mort\Mort Code 08\code\autonomous.c
                                               {                                                                            C:\mort\Mort Code 08\code\autonomous.c
003c94   d0cb     BRA       0x3e2c                 Timer_2_Reset();                                                         C:\mort\Mort Code 08\code\autonomous.c
003e2c   ec20     CALL      0x4640,0x0                                                                                      
003e2e   f023                                                                                                               
003e30   0e01     MOVLW     0x1                    mode = 1;                                                                C:\mort\Mort Code 08\code\autonomous.c
003e32   0102     MOVLB     0x2                                                                                             
003e34   6ff9     MOVWF     0xf9,0x1                                                                                        
003e36   6bfa     CLRF      0xfa,0x1                                                                                        
                                               }                                                                            C:\mort\Mort Code 08\code\autonomous.c
003e38   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                           void Drive_Straight_Delay()                                                      C:\mort\Mort Code 08\code\autonomous.c
                                           {                                                                                C:\mort\Mort Code 08\code\autonomous.c
003c96   d8d1     RCALL     0x3e3a             if (Timer_2_Get_Time() < 6000)                                               C:\mort\Mort Code 08\code\autonomous.c
003c98   e203     BC        0x3ca0                                                                                          
003e3a   dfe4     RCALL     0x3e04                                                                                          
003e3c   0e70     MOVLW     0x70                                                                                            
003e3e   5cf3     SUBWF     0xf3,0x0,0x0                                                                                    
003e40   0e17     MOVLW     0x17                                                                                            
003e42   58f4     SUBWFB    0xf4,0x0,0x0                                                                                    
003e44   0012     RETURN    0x0                                                                                             
                                               {                                                                            C:\mort\Mort Code 08\code\autonomous.c
003c9a   d8c2     RCALL     0x3e20                 x= 0;                                                                    C:\mort\Mort Code 08\code\autonomous.c
                                                   y= 0;                                                                    C:\mort\Mort Code 08\code\autonomous.c
003c9c   6b27     CLRF      0x27,0x1               z= 0;                                                                    C:\mort\Mort Code 08\code\autonomous.c
                                               }                                                                            C:\mort\Mort Code 08\code\autonomous.c
003c9e   d011     BRA       0x3cc2             else if (Timer_2_Get_Time() >= 6000 && Timer_2_Get_Time() <= (6000 + 3300))  C:\mort\Mort Code 08\code\autonomous.c
003ca0   d8cc     RCALL     0x3e3a                                                                                          
003ca2   e311     BNC       0x3cc6                                                                                          
003ca4   ec2a     CALL      0x4654,0x0                                                                                      
003ca6   f023                                                                                                               
003ca8   cff3     MOVFF     0xff3,0x2                                                                                       
003caa   f002                                                                                                               
003cac   cff4     MOVFF     0xff4,0x3                                                                                       
003cae   f003                                                                                                               
003cb0   0e54     MOVLW     0x54                                                                                            
003cb2   80d8     BSF       0xd8,0x0,0x0                                                                                    
003cb4   54f3     SUBFWB    0xf3,0x0,0x0                                                                                    
003cb6   0e24     MOVLW     0x24                                                                                            
003cb8   54f4     SUBFWB    0xf4,0x0,0x0                                                                                    
003cba   e305     BNC       0x3cc6                                                                                          
                                               {                                                                            C:\mort\Mort Code 08\code\autonomous.c
003cbc   d8aa     RCALL     0x3e12                 x = 0;                                                                   C:\mort\Mort Code 08\code\autonomous.c
003e12   0103     MOVLB     0x3                                                                                             
003e14   6b23     CLRF      0x23,0x1                                                                                        
003e16   6b24     CLRF      0x24,0x1                                                                                        
003e18   0e81     MOVLW     0x81                   y = -127;                                                                C:\mort\Mort Code 08\code\autonomous.c
003e1a   6f25     MOVWF     0x25,0x1                                                                                        
003e1c   6926     SETF      0x26,0x1                                                                                        
003e1e   0012     RETURN    0x0                                                                                             
003cbe   0e03     MOVLW     0x3                    z = 3;                                                                   C:\mort\Mort Code 08\code\autonomous.c
003cc0   6f27     MOVWF     0x27,0x1                                                                                        
003cc2   6b28     CLRF      0x28,0x1                                                                                        
                                               }                                                                            C:\mort\Mort Code 08\code\autonomous.c
003cc4   0012     RETURN    0x0                else // 5800 //3000                                                          C:\mort\Mort Code 08\code\autonomous.c
                                               {                                                                            C:\mort\Mort Code 08\code\autonomous.c
003cc6   d0b2     BRA       0x3e2c                 Timer_2_Reset();                                                         C:\mort\Mort Code 08\code\autonomous.c
                                                   mode = 1;                                                                C:\mort\Mort Code 08\code\autonomous.c
                                               }                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                           }                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                           /*void Drive_Straight()                                                          C:\mort\Mort Code 08\code\autonomous.c
                                           {                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                               int delay = 0;                                                               C:\mort\Mort Code 08\code\autonomous.c
                                               static int early_cancel_fix = 0;                                             C:\mort\Mort Code 08\code\autonomous.c
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                               if (mode == AUTOMODE_D)                                                      C:\mort\Mort Code 08\code\autonomous.c
                                               {                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                                   delay = 3000;                                                            C:\mort\Mort Code 08\code\autonomous.c
                                               }                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                               if ((ROBOCOACH_1 || ROBOCOACH_2 || ROBOCOACH_3 || ROBOCOACH_4) && mode == AUTOMODE_D) C:\mort\Mort Code 08\code\autonomous.c
                                               {                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                                   mode = AUTOMODE_NO_D;                                                    C:\mort\Mort Code 08\code\autonomous.c
                                                   early_cancel_fix = Timer_2_Get_Time();                                   C:\mort\Mort Code 08\code\autonomous.c
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                               }                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                               else if ((ROBOCOACH_1 || ROBOCOACH_2 || ROBOCOACH_3 || ROBOCOACH_4) && (Timer_2_Get_Time() > (250 + delay - early_cancel_fix))) C:\mort\Mort Code 08\code\autonomous.c
                                               {                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                                   Timer_2_Reset();                                                         C:\mort\Mort Code 08\code\autonomous.c
                                                   mode = AUTOMODE_IR;                                                      C:\mort\Mort Code 08\code\autonomous.c
                                               }                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                               else if (Timer_2_Get_Time() < delay)                                         C:\mort\Mort Code 08\code\autonomous.c
                                               {                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                                   x = y = z = 0;                                                           C:\mort\Mort Code 08\code\autonomous.c
                                               }                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                               else if ((Timer_2_Get_Time()) < (3100 + delay - early_cancel_fix)) // 5800 //3000 C:\mort\Mort Code 08\code\autonomous.c
                                               {                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                                   x = 0;                                                                   C:\mort\Mort Code 08\code\autonomous.c
                                                   y = -127;                                                                C:\mort\Mort Code 08\code\autonomous.c
                                                   z = 3;                                                                   C:\mort\Mort Code 08\code\autonomous.c
                                               }                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                               else                                                                         C:\mort\Mort Code 08\code\autonomous.c
                                               {                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                                   Timer_2_Reset();                                                         C:\mort\Mort Code 08\code\autonomous.c
                                                   mode = AUTOMODE_IR;                                                      C:\mort\Mort Code 08\code\autonomous.c
                                               }                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                           }*/                                                                              C:\mort\Mort Code 08\code\autonomous.c
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                           void IR_Drive(void)                                                              C:\mort\Mort Code 08\code\autonomous.c
                                           {                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                               //z < 0 is left, z > 0 is right                                              C:\mort\Mort Code 08\code\autonomous.c
                                               //y > 0 is backwards, y < 0 is forwards                                      C:\mort\Mort Code 08\code\autonomous.c
                                               //x < 0 is                                                                   C:\mort\Mort Code 08\code\autonomous.c
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                               static char flag;                                                            C:\mort\Mort Code 08\code\autonomous.c
003cc8   a287     BTFSS     0x87,0x1,0x0       if(ROBOCOACH_1)                                                              C:\mort\Mort Code 08\code\autonomous.c
003cca   d003     BRA       0x3cd2                                                                                          
                                               {                                                                            C:\mort\Mort Code 08\code\autonomous.c
003ccc   d8a9     RCALL     0x3e20                 x = 0;                                                                   C:\mort\Mort Code 08\code\autonomous.c
                                                   y = 0;                                                                   C:\mort\Mort Code 08\code\autonomous.c
003cce   0eba     MOVLW     0xba                   z = -70;                                                                 C:\mort\Mort Code 08\code\autonomous.c
                                                   Timer_2_Reset();                                                         C:\mort\Mort Code 08\code\autonomous.c
                                               }                                                                            C:\mort\Mort Code 08\code\autonomous.c
003cd0   d004     BRA       0x3cda             else if (ROBOCOACH_2)                                                        C:\mort\Mort Code 08\code\autonomous.c
003cd2   ac81     BTFSS     0x81,0x6,0x0                                                                                    
003cd4   d005     BRA       0x3ce0                                                                                          
                                               {                                                                            C:\mort\Mort Code 08\code\autonomous.c
003cd6   d89d     RCALL     0x3e12                 x = 0;                                                                   C:\mort\Mort Code 08\code\autonomous.c
                                                   y = -127;                                                                C:\mort\Mort Code 08\code\autonomous.c
003cd8   0efd     MOVLW     0xfd                   z = -3;                                                                  C:\mort\Mort Code 08\code\autonomous.c
003cda   6f27     MOVWF     0x27,0x1                                                                                        
003cdc   6928     SETF      0x28,0x1                                                                                        
                                                   Timer_2_Reset();                                                         C:\mort\Mort Code 08\code\autonomous.c
                                               }                                                                            C:\mort\Mort Code 08\code\autonomous.c
003cde   d01e     BRA       0x3d1c             else if (ROBOCOACH_3)                                                        C:\mort\Mort Code 08\code\autonomous.c
003ce0   aa81     BTFSS     0x81,0x5,0x0                                                                                    
003ce2   d005     BRA       0x3cee                                                                                          
                                               {                                                                            C:\mort\Mort Code 08\code\autonomous.c
003ce4   d89d     RCALL     0x3e20                 x = 0;                                                                   C:\mort\Mort Code 08\code\autonomous.c
                                                   y = 0;                                                                   C:\mort\Mort Code 08\code\autonomous.c
003ce6   0e46     MOVLW     0x46                   z = 70;                                                                  C:\mort\Mort Code 08\code\autonomous.c
003ce8   6f27     MOVWF     0x27,0x1                                                                                        
003cea   6b28     CLRF      0x28,0x1                                                                                        
                                                   Timer_2_Reset();                                                         C:\mort\Mort Code 08\code\autonomous.c
                                               }                                                                            C:\mort\Mort Code 08\code\autonomous.c
003cec   d017     BRA       0x3d1c             else if (ROBOCOACH_4 || flag == 1)                                           C:\mort\Mort Code 08\code\autonomous.c
003cee   5087     MOVF      0x87,0x0,0x0                                                                                    
003cf0   0b01     ANDLW     0x1                                                                                             
003cf2   e103     BNZ       0x3cfa                                                                                          
003cf4   0102     MOVLB     0x2                                                                                             
003cf6   05fb     DECF      0xfb,0x0,0x1                                                                                    
003cf8   e113     BNZ       0x3d20                                                                                          
                                               {                                                                            C:\mort\Mort Code 08\code\autonomous.c
003cfa   d884     RCALL     0x3e04                 if(Timer_2_Get_Time() <= 2500)                                           C:\mort\Mort Code 08\code\autonomous.c
003cfc   0ec4     MOVLW     0xc4                                                                                            
003cfe   80d8     BSF       0xd8,0x0,0x0                                                                                    
003d00   54f3     SUBFWB    0xf3,0x0,0x0                                                                                    
003d02   0e09     MOVLW     0x9                                                                                             
003d04   54f4     SUBFWB    0xf4,0x0,0x0                                                                                    
003d06   e308     BNC       0x3d18                                                                                          
                                                   {                                                                        C:\mort\Mort Code 08\code\autonomous.c
003d08   d884     RCALL     0x3e12                     x = 0;                                                               C:\mort\Mort Code 08\code\autonomous.c
                                                       y = -127;                                                            C:\mort\Mort Code 08\code\autonomous.c
003d0a   0efd     MOVLW     0xfd                       z = -3;                                                              C:\mort\Mort Code 08\code\autonomous.c
003d0c   6f27     MOVWF     0x27,0x1                                                                                        
003d0e   6928     SETF      0x28,0x1                                                                                        
003d10   0102     MOVLB     0x2                        flag = 1;                                                            C:\mort\Mort Code 08\code\autonomous.c
003d12   0e01     MOVLW     0x1                                                                                             
003d14   6ffb     MOVWF     0xfb,0x1                                                                                        
                                                   }                                                                        C:\mort\Mort Code 08\code\autonomous.c
003d16   0012     RETURN    0x0                    else                                                                     C:\mort\Mort Code 08\code\autonomous.c
                                                   {                                                                        C:\mort\Mort Code 08\code\autonomous.c
003d18   0102     MOVLB     0x2                        flag = 0;                                                            C:\mort\Mort Code 08\code\autonomous.c
003d1a   6bfb     CLRF      0xfb,0x1                                                                                        
003d1c   ef20     GOTO      0x4640                     Timer_2_Reset();                                                     C:\mort\Mort Code 08\code\autonomous.c
003d1e   f023                                                                                                               
                                                   }                                                                        C:\mort\Mort Code 08\code\autonomous.c
                                               }                                                                            C:\mort\Mort Code 08\code\autonomous.c
003d20   d871     RCALL     0x3e04             else if (Timer_2_Get_Time() > 125 && flag == 0)                              C:\mort\Mort Code 08\code\autonomous.c
003d22   0e7d     MOVLW     0x7d                                                                                            
003d24   80d8     BSF       0xd8,0x0,0x0                                                                                    
003d26   54f3     SUBFWB    0xf3,0x0,0x0                                                                                    
003d28   0e00     MOVLW     0x0                                                                                             
003d2a   54f4     SUBFWB    0xf4,0x0,0x0                                                                                    
003d2c   e208     BC        0x3d3e                                                                                          
003d2e   0102     MOVLB     0x2                                                                                             
003d30   51fb     MOVF      0xfb,0x0,0x1                                                                                    
003d32   e105     BNZ       0x3d3e                                                                                          
                                               {                                                                            C:\mort\Mort Code 08\code\autonomous.c
003d34   d875     RCALL     0x3e20                 x = 0;                                                                   C:\mort\Mort Code 08\code\autonomous.c
003e20   0103     MOVLB     0x3                                                                                             
003e22   6b23     CLRF      0x23,0x1                                                                                        
003e24   6b24     CLRF      0x24,0x1                                                                                        
003e26   6b25     CLRF      0x25,0x1               y = 0;                                                                   C:\mort\Mort Code 08\code\autonomous.c
003e28   6b26     CLRF      0x26,0x1                                                                                        
003e2a   0012     RETURN    0x0                                                                                             
003d36   6b27     CLRF      0x27,0x1               z = 0;                                                                   C:\mort\Mort Code 08\code\autonomous.c
003d38   6b28     CLRF      0x28,0x1                                                                                        
003d3a   ec20     CALL      0x4640,0x0             Timer_2_Reset();                                                         C:\mort\Mort Code 08\code\autonomous.c
003d3c   f023                                                                                                               
                                               }                                                                            C:\mort\Mort Code 08\code\autonomous.c
003d3e   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                           void Drive_Continuous()                                                          C:\mort\Mort Code 08\code\autonomous.c
                                           {                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                               static unsigned char auto_state = DRIVE_FORWARD;                             C:\mort\Mort Code 08\code\autonomous.c
                                               static unsigned char flag;                                                   C:\mort\Mort Code 08\code\autonomous.c
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
003d40   0103     MOVLB     0x3                if(auto_state == DRIVE_FORWARD)                                              C:\mort\Mort Code 08\code\autonomous.c
003d42   512a     MOVF      0x2a,0x0,0x1                                                                                    
003d44   e112     BNZ       0x3d6a                                                                                          
                                               {                                                                            C:\mort\Mort Code 08\code\autonomous.c
003d46   d87f     RCALL     0x3e46                 x = 0;                                                                   C:\mort\Mort Code 08\code\autonomous.c
003e46   6b23     CLRF      0x23,0x1                                                                                        
003e48   6b24     CLRF      0x24,0x1                                                                                        
003e4a   6b27     CLRF      0x27,0x1               z = 0;                                                                   C:\mort\Mort Code 08\code\autonomous.c
003e4c   6b28     CLRF      0x28,0x1                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
003d48   0e8c     MOVLW     0x8c                   if (Timer_2_Get_Time() < 2700)                                           C:\mort\Mort Code 08\code\autonomous.c
003d4a   5cf3     SUBWF     0xf3,0x0,0x0                                                                                    
003d4c   0e0a     MOVLW     0xa                                                                                             
003d4e   58f4     SUBWFB    0xf4,0x0,0x0                                                                                    
003d50   e205     BC        0x3d5c                                                                                          
003e4e   ef02     GOTO      0x3e04                                                                                          
003e50   f01f                                                                                                               
                                                   {                                                                        C:\mort\Mort Code 08\code\autonomous.c
003d52   0103     MOVLB     0x3                        y = -127;                                                            C:\mort\Mort Code 08\code\autonomous.c
003d54   0e81     MOVLW     0x81                                                                                            
003d56   6f25     MOVWF     0x25,0x1                                                                                        
003d58   6926     SETF      0x26,0x1                                                                                        
                                                   }                                                                        C:\mort\Mort Code 08\code\autonomous.c
003d5a   d007     BRA       0x3d6a                 else                                                                     C:\mort\Mort Code 08\code\autonomous.c
                                                   {                                                                        C:\mort\Mort Code 08\code\autonomous.c
003d5c   ec20     CALL      0x4640,0x0                 Timer_2_Reset();                                                     C:\mort\Mort Code 08\code\autonomous.c
003d5e   f023                                                                                                               
003d60   0102     MOVLB     0x2                        flag = 0;                                                            C:\mort\Mort Code 08\code\autonomous.c
003d62   6bfc     CLRF      0xfc,0x1                                                                                        
003d64   0103     MOVLB     0x3                        auto_state = TURN;                                                   C:\mort\Mort Code 08\code\autonomous.c
003d66   0e01     MOVLW     0x1                                                                                             
003d68   6f2a     MOVWF     0x2a,0x1                                                                                        
                                                   }                                                                        C:\mort\Mort Code 08\code\autonomous.c
                                               }                                                                            C:\mort\Mort Code 08\code\autonomous.c
003d6a   0e02     MOVLW     0x2                if(auto_state == TURN_FORWARD)                                               C:\mort\Mort Code 08\code\autonomous.c
003d6c   5d2a     SUBWF     0x2a,0x0,0x1                                                                                    
003d6e   e112     BNZ       0x3d94                                                                                          
                                               {                                                                            C:\mort\Mort Code 08\code\autonomous.c
003d70   d86a     RCALL     0x3e46                 x = 0;                                                                   C:\mort\Mort Code 08\code\autonomous.c
                                                   z = 0;                                                                   C:\mort\Mort Code 08\code\autonomous.c
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
003d72   0e20     MOVLW     0x20                   if (Timer_2_Get_Time() < 800)                                            C:\mort\Mort Code 08\code\autonomous.c
003d74   5cf3     SUBWF     0xf3,0x0,0x0                                                                                    
003d76   0e03     MOVLW     0x3                                                                                             
003d78   58f4     SUBWFB    0xf4,0x0,0x0                                                                                    
003d7a   e205     BC        0x3d86                                                                                          
                                                   {                                                                        C:\mort\Mort Code 08\code\autonomous.c
003d7c   0103     MOVLB     0x3                        y = -127;                                                            C:\mort\Mort Code 08\code\autonomous.c
003d7e   0e81     MOVLW     0x81                                                                                            
003d80   6f25     MOVWF     0x25,0x1                                                                                        
003d82   6926     SETF      0x26,0x1                                                                                        
                                                   }                                                                        C:\mort\Mort Code 08\code\autonomous.c
003d84   d007     BRA       0x3d94                 else                                                                     C:\mort\Mort Code 08\code\autonomous.c
                                                   {                                                                        C:\mort\Mort Code 08\code\autonomous.c
003d86   ec20     CALL      0x4640,0x0                 Timer_2_Reset();                                                     C:\mort\Mort Code 08\code\autonomous.c
003d88   f023                                                                                                               
003d8a   0102     MOVLB     0x2                        flag = 1;                                                            C:\mort\Mort Code 08\code\autonomous.c
003d8c   0e01     MOVLW     0x1                                                                                             
003d8e   6ffc     MOVWF     0xfc,0x1                                                                                        
003d90   0103     MOVLB     0x3                        auto_state = TURN;                                                   C:\mort\Mort Code 08\code\autonomous.c
003d92   6f2a     MOVWF     0x2a,0x1                                                                                        
                                                   }                                                                        C:\mort\Mort Code 08\code\autonomous.c
                                               }                                                                            C:\mort\Mort Code 08\code\autonomous.c
003d94   052a     DECF      0x2a,0x0,0x1       if(auto_state == TURN)                                                       C:\mort\Mort Code 08\code\autonomous.c
003d96   e11c     BNZ       0x3dd0                                                                                          
                                               {                                                                            C:\mort\Mort Code 08\code\autonomous.c
003d98   6b25     CLRF      0x25,0x1               y = 0;                                                                   C:\mort\Mort Code 08\code\autonomous.c
003d9a   6b26     CLRF      0x26,0x1                                                                                        
003d9c   6b23     CLRF      0x23,0x1               x = 0;                                                                   C:\mort\Mort Code 08\code\autonomous.c
003d9e   6b24     CLRF      0x24,0x1                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
003da0   d831     RCALL     0x3e04                 if (Timer_2_Get_Time() < 300)                                            C:\mort\Mort Code 08\code\autonomous.c
003da2   0e2c     MOVLW     0x2c                                                                                            
003da4   5cf3     SUBWF     0xf3,0x0,0x0                                                                                    
003da6   0e01     MOVLW     0x1                                                                                             
003da8   58f4     SUBWFB    0xf4,0x0,0x0                                                                                    
003daa   e205     BC        0x3db6                                                                                          
003e04   ec2a     CALL      0x4654,0x0                                                                                      
003e06   f023                                                                                                               
003e08   cff3     MOVFF     0xff3,0x0                                                                                       
003e0a   f000                                                                                                               
003e0c   cff4     MOVFF     0xff4,0x1                                                                                       
003e0e   f001                                                                                                               
003e10   0012     RETURN    0x0                                                                                             
                                                   {                                                                        C:\mort\Mort Code 08\code\autonomous.c
003dac   0103     MOVLB     0x3                        z = -127;                                                            C:\mort\Mort Code 08\code\autonomous.c
003dae   0e81     MOVLW     0x81                                                                                            
003db0   6f27     MOVWF     0x27,0x1                                                                                        
003db2   6928     SETF      0x28,0x1                                                                                        
                                                   }                                                                        C:\mort\Mort Code 08\code\autonomous.c
003db4   d00d     BRA       0x3dd0                 else                                                                     C:\mort\Mort Code 08\code\autonomous.c
                                                   {                                                                        C:\mort\Mort Code 08\code\autonomous.c
003db6   ec20     CALL      0x4640,0x0                 Timer_2_Reset();                                                     C:\mort\Mort Code 08\code\autonomous.c
003db8   f023                                                                                                               
003dba   0102     MOVLB     0x2                        if(flag == 0)                                                        C:\mort\Mort Code 08\code\autonomous.c
003dbc   51fc     MOVF      0xfc,0x0,0x1                                                                                    
003dbe   e103     BNZ       0x3dc6                                                                                          
003dc0   0103     MOVLB     0x3                            auto_state = TURN_FORWARD;                                       C:\mort\Mort Code 08\code\autonomous.c
003dc2   0e02     MOVLW     0x2                                                                                             
003dc4   6f2a     MOVWF     0x2a,0x1                                                                                        
003dc6   0102     MOVLB     0x2                        if(flag == 1)                                                        C:\mort\Mort Code 08\code\autonomous.c
003dc8   05fc     DECF      0xfc,0x0,0x1                                                                                    
003dca   e102     BNZ       0x3dd0                                                                                          
003dcc   0103     MOVLB     0x3                            auto_state = DRIVE_FORWARD;                                      C:\mort\Mort Code 08\code\autonomous.c
003dce   6b2a     CLRF      0x2a,0x1                                                                                        
                                                   }                                                                        C:\mort\Mort Code 08\code\autonomous.c
                                               }                                                                            C:\mort\Mort Code 08\code\autonomous.c
                                                                                                                            C:\mort\Mort Code 08\code\autonomous.c
003dd0   5087     MOVF      0x87,0x0,0x0       if (ROBOCOACH_1 + ROBOCOACH_2 + ROBOCOACH_3 + ROBOCOACH_4 != 0)              C:\mort\Mort Code 08\code\autonomous.c
003dd2   0b01     ANDLW     0x1                                                                                             
003dd4   6e02     MOVWF     0x2,0x0                                                                                         
003dd6   5081     MOVF      0x81,0x0,0x0                                                                                    
003dd8   0b20     ANDLW     0x20                                                                                            
003dda   e001     BZ        0x3dde                                                                                          
003ddc   0e01     MOVLW     0x1                                                                                             
003dde   6e01     MOVWF     0x1,0x0                                                                                         
003de0   5081     MOVF      0x81,0x0,0x0                                                                                    
003de2   0b40     ANDLW     0x40                                                                                            
003de4   e001     BZ        0x3de8                                                                                          
003de6   0e01     MOVLW     0x1                                                                                             
003de8   6e00     MOVWF     0x0,0x0                                                                                         
003dea   5087     MOVF      0x87,0x0,0x0                                                                                    
003dec   0b02     ANDLW     0x2                                                                                             
003dee   e001     BZ        0x3df2                                                                                          
003df0   0e01     MOVLW     0x1                                                                                             
003df2   2400     ADDWF     0x0,0x0,0x0                                                                                     
003df4   2401     ADDWF     0x1,0x0,0x0                                                                                     
003df6   2402     ADDWF     0x2,0x0,0x0                                                                                     
003df8   e004     BZ        0x3e02                                                                                          
003dfa   0e01     MOVLW     0x1                    mode = 1;                                                                C:\mort\Mort Code 08\code\autonomous.c
003dfc   0102     MOVLB     0x2                                                                                             
003dfe   6ff9     MOVWF     0xf9,0x1                                                                                        
003e00   6bfa     CLRF      0xfa,0x1                                                                                        
003e02   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\autonomous.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	TITLE:		disabled.c                                                             C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	VERSION:	0.1 (Beta)                                                            C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	DATE:		31-Dec-2007                                                             C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	AUTHOR:		R. Kevin Watson                                                       C:\mort\Mort Code 08\code\disabled.c
                                           *				kevinw@jpl.nasa.gov                                                         C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	COMMENTS:	This file best viewed with tabs set to four.                         C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *				You are free to use this source code for any non-commercial                 C:\mort\Mort Code 08\code\disabled.c
                                           *				use. Please do not make copies of this source code, modified                C:\mort\Mort Code 08\code\disabled.c
                                           *				or un-modified, publicly available on the internet or elsewhere             C:\mort\Mort Code 08\code\disabled.c
                                           *				without permission. Thanks.                                                 C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *				Copyright ©2007-2008 R. Kevin Watson. All rights are reserved.              C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           ******************************************************************************** C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	Change log:                                                                    C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	DATE         REV  DESCRIPTION                                                  C:\mort\Mort Code 08\code\disabled.c
                                           *	-----------  ---  ----------------------------------------------------------   C:\mort\Mort Code 08\code\disabled.c
                                           *	31-Dec-2007  0.1  RKW Original                                                 C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\disabled.c
                                           #include <stdio.h>                                                               C:\mort\Mort Code 08\code\disabled.c
                                           #include "gyro.h"                                                                C:\mort\Mort Code 08\code\disabled.c
                                           #include "ifi_frc.h"                                                             C:\mort\Mort Code 08\code\disabled.c
                                           #include "pwm.h"                                                                 C:\mort\Mort Code 08\code\disabled.c
                                           #include "timers.h"                                                              C:\mort\Mort Code 08\code\disabled.c
                                           #include "interrupts.h"                                                          C:\mort\Mort Code 08\code\disabled.c
                                           #include "serial_ports.h"                                                        C:\mort\Mort Code 08\code\disabled.c
                                           #include "ifi_code.h"                                                            C:\mort\Mort Code 08\code\disabled.c
                                           #include "disabled.h"                                                            C:\mort\Mort Code 08\code\disabled.c
                                                                                                                            C:\mort\Mort Code 08\code\disabled.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	FUNCTION:		Disabled_Init()                                                     C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	PURPOSE:		This is where you put code that needs to execute                     C:\mort\Mort Code 08\code\disabled.c
                                           *					just once at the start of disabled mode.                                   C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	CALLED FROM:	main() in ifi_frc.c                                               C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	COMMENTS:		While in this mode, all operator interface data is valid            C:\mort\Mort Code 08\code\disabled.c
                                           *					and all robot controller outputs (PWMs and relays) are                     C:\mort\Mort Code 08\code\disabled.c
                                           *					disabled.                                                                  C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\disabled.c
                                           void Disabled_Init(void)                                                         C:\mort\Mort Code 08\code\disabled.c
                                           {                                                                                C:\mort\Mort Code 08\code\disabled.c
004934   efbd     GOTO      0x337a             Start_Gyro_Bias_Calc();                                                      C:\mort\Mort Code 08\code\disabled.c
004936   f019                                                                                                               
                                           }                                                                                C:\mort\Mort Code 08\code\disabled.c
                                                                                                                            C:\mort\Mort Code 08\code\disabled.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	FUNCTION:		Disabled()                                                          C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	PURPOSE:		This is where you put code that you want to execute while            C:\mort\Mort Code 08\code\disabled.c
                                           *					your robot is disabled.	While in autonomous mode, this                     C:\mort\Mort Code 08\code\disabled.c
                                           *					function is called every 26.2ms when after data is received                C:\mort\Mort Code 08\code\disabled.c
                                           *					from the master processor.                                                 C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	CALLED FROM:	main() in ifi_frc.c                                               C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	COMMENTS:		While in this mode, all operator interface data is valid            C:\mort\Mort Code 08\code\disabled.c
                                           *					and all robot controller outputs (PWMs and relays) are                     C:\mort\Mort Code 08\code\disabled.c
                                           *					disabled.                                                                  C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\disabled.c
                                           void Disabled(void)                                                              C:\mort\Mort Code 08\code\disabled.c
                                           {                                                                                C:\mort\Mort Code 08\code\disabled.c
004938   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\disabled.c
                                                                                                                            C:\mort\Mort Code 08\code\disabled.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	FUNCTION:		Disabled_Spin()                                                     C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	PURPOSE:		While in disabled mode, this function is called                      C:\mort\Mort Code 08\code\disabled.c
                                           *					continuously between calls to Disabled().                                  C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	CALLED FROM:	main() in ifi_frc.c                                               C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *	COMMENTS:		While in this mode, all operator interface data is valid            C:\mort\Mort Code 08\code\disabled.c
                                           *					and all robot controller outputs (PWMs and relays) are                     C:\mort\Mort Code 08\code\disabled.c
                                           *					disabled.                                                                  C:\mort\Mort Code 08\code\disabled.c
                                           *                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\disabled.c
                                           void Disabled_Spin(void)                                                         C:\mort\Mort Code 08\code\disabled.c
                                           {                                                                                C:\mort\Mort Code 08\code\disabled.c
00493a   0e01     MOVLW     0x1                Process_Gyro_Data(TRUE);                                                     C:\mort\Mort Code 08\code\disabled.c
00493c   6ee6     MOVWF     0xe6,0x0                                                                                        
00493e   ec17     CALL      0x342e,0x0                                                                                      
004940   f01a                                                                                                               
004942   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004944   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\disabled.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	TITLE:		eeprom.c                                                               C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	VERSION:	0.2 (Beta)                                                            C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	DATE:		10-Jan-2006                                                             C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	AUTHOR:		R. Kevin Watson                                                       C:\mort\Mort Code 08\code\eeprom.c
                                           *				kevinw@jpl.nasa.gov                                                         C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	COMMENTS:	You are free to use this source code for any non-commercial          C:\mort\Mort Code 08\code\eeprom.c
                                           *				use. Please do not make copies of this source code, modified                C:\mort\Mort Code 08\code\eeprom.c
                                           *				or un-modified, publicly available on the internet or elsewhere             C:\mort\Mort Code 08\code\eeprom.c
                                           *				without permission. Thanks.                                                 C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *				Copyright ©2005-2007 R. Kevin Watson. All rights are reserved.              C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           ******************************************************************************** C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	CHANGE LOG:                                                                    C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	DATE         REV  DESCRIPTION                                                  C:\mort\Mort Code 08\code\eeprom.c
                                           *	-----------  ---  ----------------------------------------------------------   C:\mort\Mort Code 08\code\eeprom.c
                                           *	08-Oct-2005  0.1  RKW Original                                                 C:\mort\Mort Code 08\code\eeprom.c
                                           *	18-Oct-2005  0.2  RKW - Modified code to globally disable interrupts           C:\mort\Mort Code 08\code\eeprom.c
                                           *	                  only during the pre-write sequence.                          C:\mort\Mort Code 08\code\eeprom.c
                                           *	10-Jan-2006  0.2  RKW - Verified code works with PIC18F8722.                   C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\eeprom.c
                                                                                                                            C:\mort\Mort Code 08\code\eeprom.c
                                           //#include "ifi_picdefs.h"                                                       C:\mort\Mort Code 08\code\eeprom.c
                                           #include <p18f8722.h>                                                            C:\mort\Mort Code 08\code\eeprom.c
                                           #include "eeprom.h"                                                              C:\mort\Mort Code 08\code\eeprom.c
                                                                                                                            C:\mort\Mort Code 08\code\eeprom.c
                                           unsigned char eeprom_queue_count = 0;                                            C:\mort\Mort Code 08\code\eeprom.c
                                           unsigned char eeprom_queue_full = FALSE;                                         C:\mort\Mort Code 08\code\eeprom.c
                                           unsigned char eeprom_queue_empty = TRUE;                                         C:\mort\Mort Code 08\code\eeprom.c
                                           unsigned char eeprom_queue_read_index = 0;                                       C:\mort\Mort Code 08\code\eeprom.c
                                           unsigned char eeprom_queue_write_index = 0;                                      C:\mort\Mort Code 08\code\eeprom.c
                                           unsigned char eeprom_queue_data[EEPROM_QUEUE_SIZE];                              C:\mort\Mort Code 08\code\eeprom.c
                                           unsigned int eeprom_queue_address[EEPROM_QUEUE_SIZE];                            C:\mort\Mort Code 08\code\eeprom.c
                                                                                                                            C:\mort\Mort Code 08\code\eeprom.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	FUNCTION:		EEPROM_Read()                                                       C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	PURPOSE:		Reads a byte of data from EEPROM.                                    C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	PARAMETERS:		Unsigned int containing the address.                              C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	RETURNS:		Unsigned char containing the data.                                   C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\eeprom.c
00413c   d89d     RCALL     0x4278         unsigned char EEPROM_Read(unsigned int address)                                  C:\mort\Mort Code 08\code\eeprom.c
                                           {                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           	// EEPROM operation (as opposed to a flash memory operation)                    C:\mort\Mort Code 08\code\eeprom.c
00413e   9ea6     BCF       0xa6,0x7,0x0       EECON1bits.EEPGD = 0;                                                        C:\mort\Mort Code 08\code\eeprom.c
                                                                                                                            C:\mort\Mort Code 08\code\eeprom.c
                                           	// EEPROM Address                                                               C:\mort\Mort Code 08\code\eeprom.c
004140   0efd     MOVLW     0xfd               EEADR = LOBYTE(address);                                                     C:\mort\Mort Code 08\code\eeprom.c
004142   50db     MOVF      0xdb,0x0,0x0                                                                                    
004144   6ea9     MOVWF     0xa9,0x0                                                                                        
004146   0efe     MOVLW     0xfe           	EEADRH = HIBYTE(address);                                                       C:\mort\Mort Code 08\code\eeprom.c
004148   cfdb     MOVFF     0xfdb,0x1                                                                                       
00414a   f001                                                                                                               
00414c   c001     MOVFF     0x1,0x0                                                                                         
00414e   f000                                                                                                               
004150   5001     MOVF      0x1,0x0,0x0                                                                                     
004152   6eaa     MOVWF     0xaa,0x0                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\eeprom.c
                                               // execute the read                                                          C:\mort\Mort Code 08\code\eeprom.c
004154   80a6     BSF       0xa6,0x0,0x0   	EECON1bits.RD = 1;                                                              C:\mort\Mort Code 08\code\eeprom.c
                                                                                                                            C:\mort\Mort Code 08\code\eeprom.c
                                           	// return the data                                                              C:\mort\Mort Code 08\code\eeprom.c
004156   50a8     MOVF      0xa8,0x0,0x0       return(EEDATA);                                                              C:\mort\Mort Code 08\code\eeprom.c
004158   d094     BRA       0x4282         }                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                                                                                                            C:\mort\Mort Code 08\code\eeprom.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	FUNCTION:		EEPROM_Write()                                                      C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	PURPOSE:		Places address and data on the EEPROM write queue.                   C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	PARAMETERS:		Unsigned int containing the address.                              C:\mort\Mort Code 08\code\eeprom.c
                                           *					Unsigned char containing the data to write.                                C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	RETURNS:		Unsigned char containing 1 if successful, 0 if buffer full.          C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\eeprom.c
00415a   d88e     RCALL     0x4278         unsigned char EEPROM_Write(unsigned int address, unsigned char data)             C:\mort\Mort Code 08\code\eeprom.c
00415c   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           	unsigned char return_value;                                                     C:\mort\Mort Code 08\code\eeprom.c
                                                                                                                            C:\mort\Mort Code 08\code\eeprom.c
                                           	// return error flag if the queue is full                                       C:\mort\Mort Code 08\code\eeprom.c
00415e   0101     MOVLB     0x1            	if(eeprom_queue_full == FALSE)                                                  C:\mort\Mort Code 08\code\eeprom.c
004160   51fb     MOVF      0xfb,0x0,0x1                                                                                    
004162   e11e     BNZ       0x41a0                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\eeprom.c
                                           		// put the byte and its address on their respective circular queues            C:\mort\Mort Code 08\code\eeprom.c
004164   51fe     MOVF      0xfe,0x0,0x1   		eeprom_queue_data[eeprom_queue_write_index] = data;                            C:\mort\Mort Code 08\code\eeprom.c
004166   6aea     CLRF      0xea,0x0                                                                                        
004168   0f80     ADDLW     0x80                                                                                            
00416a   6ee9     MOVWF     0xe9,0x0                                                                                        
00416c   0e02     MOVLW     0x2                                                                                             
00416e   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
004170   0efc     MOVLW     0xfc                                                                                            
004172   cfdb     MOVFF     0xfdb,0xfef                                                                                     
004174   ffef                                                                                                               
004176   51fe     MOVF      0xfe,0x0,0x1   		eeprom_queue_address[eeprom_queue_write_index] = address;                      C:\mort\Mort Code 08\code\eeprom.c
004178   d875     RCALL     0x4264                                                                                          
00417a   0efd     MOVLW     0xfd                                                                                            
00417c   cfdb     MOVFF     0xfdb,0xfee                                                                                     
00417e   ffee                                                                                                               
004180   0efe     MOVLW     0xfe                                                                                            
004182   cfdb     MOVFF     0xfdb,0xfed                                                                                     
004184   ffed                                                                                                               
                                           	                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           		// increment the queue byte count                                              C:\mort\Mort Code 08\code\eeprom.c
004186   2bfa     INCF      0xfa,0x1,0x1   		eeprom_queue_count++;                                                          C:\mort\Mort Code 08\code\eeprom.c
                                           	                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           		// increment the write pointer                                                 C:\mort\Mort Code 08\code\eeprom.c
004188   2bfe     INCF      0xfe,0x1,0x1   		eeprom_queue_write_index++;                                                    C:\mort\Mort Code 08\code\eeprom.c
                                           	                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           		// If the index pointer overflowed, cut-off the high-order bit. Doing this     C:\mort\Mort Code 08\code\eeprom.c
                                           		// every time is quicker than checking for overflow every time with an if()    C:\mort\Mort Code 08\code\eeprom.c
                                           		// statement and only then occasionally setting it back to zero. For this      C:\mort\Mort Code 08\code\eeprom.c
                                           		// to work, the queue size must be a power of 2 (e.g., 16,32,64,128...).       C:\mort\Mort Code 08\code\eeprom.c
00418a   0e1f     MOVLW     0x1f           		eeprom_queue_write_index &= EEPROM_QUEUE_INDEX_MASK;                           C:\mort\Mort Code 08\code\eeprom.c
00418c   17fe     ANDWF     0xfe,0x1,0x1                                                                                    
                                           	                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           		// is the circular queue now full?                                             C:\mort\Mort Code 08\code\eeprom.c
00418e   51fe     MOVF      0xfe,0x0,0x1   		if(eeprom_queue_read_index == eeprom_queue_write_index)                        C:\mort\Mort Code 08\code\eeprom.c
004190   5dfd     SUBWF     0xfd,0x0,0x1                                                                                    
004192   e102     BNZ       0x4198                                                                                          
                                           		{                                                                              C:\mort\Mort Code 08\code\eeprom.c
004194   0e01     MOVLW     0x1            			eeprom_queue_full = TRUE;                                                     C:\mort\Mort Code 08\code\eeprom.c
004196   6ffb     MOVWF     0xfb,0x1                                                                                        
                                           		}                                                                              C:\mort\Mort Code 08\code\eeprom.c
                                           	                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           		// Since we've just added a byte to the queue, it can't possibly be empty.     C:\mort\Mort Code 08\code\eeprom.c
                                           		// Again, this is quicker than using an if() statement every time              C:\mort\Mort Code 08\code\eeprom.c
004198   6bfc     CLRF      0xfc,0x1       		eeprom_queue_empty = FALSE;                                                    C:\mort\Mort Code 08\code\eeprom.c
                                                                                                                            C:\mort\Mort Code 08\code\eeprom.c
00419a   0e01     MOVLW     0x1            		return_value = 1;                                                              C:\mort\Mort Code 08\code\eeprom.c
00419c   6edf     MOVWF     0xdf,0x0                                                                                        
                                           	}                                                                               C:\mort\Mort Code 08\code\eeprom.c
00419e   d001     BRA       0x41a2         	else                                                                            C:\mort\Mort Code 08\code\eeprom.c
                                           	{                                                                               C:\mort\Mort Code 08\code\eeprom.c
0041a0   6adf     CLRF      0xdf,0x0       		return_value = 0;                                                              C:\mort\Mort Code 08\code\eeprom.c
                                           	}                                                                               C:\mort\Mort Code 08\code\eeprom.c
                                                                                                                            C:\mort\Mort Code 08\code\eeprom.c
0041a2   50df     MOVF      0xdf,0x0,0x0   	return(return_value);                                                           C:\mort\Mort Code 08\code\eeprom.c
0041a4   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\mort\Mort Code 08\code\eeprom.c
0041a6   d06d     BRA       0x4282                                                                                          
                                                                                                                            C:\mort\Mort Code 08\code\eeprom.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	FUNCTION:		EEPROM_Write_Handler()                                              C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	PURPOSE:		Writes data to EEPROM                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	PARAMETERS:		none                                                              C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	RETURNS:		nothing                                                              C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	COMMENTS:		If data is present in the EEPROM write queue when this              C:\mort\Mort Code 08\code\eeprom.c
                                           *					function is called, it will take about two milliseconds                    C:\mort\Mort Code 08\code\eeprom.c
                                           *					to execute the EEPROM write.                                               C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\eeprom.c
0041a8   d867     RCALL     0x4278         void EEPROM_Write_Handler(void)                                                  C:\mort\Mort Code 08\code\eeprom.c
0041aa   0e03     MOVLW     0x3                                                                                             
0041ac   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
004278   cfd9     MOVFF     0xfd9,0xfe6                                                                                     
00427a   ffe6                                                                                                               
00427c   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00427e   ffd9                                                                                                               
004280   0012     RETURN    0x0                                                                                             
                                           {                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           	unsigned char return_value;                                                     C:\mort\Mort Code 08\code\eeprom.c
                                               unsigned char temp_GIEH;                                                     C:\mort\Mort Code 08\code\eeprom.c
                                           	unsigned char temp_GIEL;                                                        C:\mort\Mort Code 08\code\eeprom.c
                                                                                                                            C:\mort\Mort Code 08\code\eeprom.c
                                           	// check to see if we have data to write                                        C:\mort\Mort Code 08\code\eeprom.c
0041ae   0101     MOVLB     0x1            	if(eeprom_queue_empty == FALSE)                                                 C:\mort\Mort Code 08\code\eeprom.c
0041b0   51fc     MOVF      0xfc,0x0,0x1                                                                                    
0041b2   e14c     BNZ       0x424c                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\eeprom.c
                                           		// save the state of the interrupt enable bits                                 C:\mort\Mort Code 08\code\eeprom.c
0041b4   50f2     MOVF      0xf2,0x0,0x0   	    temp_GIEH = INTCONbits.GIEH;                                                C:\mort\Mort Code 08\code\eeprom.c
0041b6   0b80     ANDLW     0x80                                                                                            
0041b8   e001     BZ        0x41bc                                                                                          
0041ba   0e01     MOVLW     0x1                                                                                             
0041bc   6ee7     MOVWF     0xe7,0x0                                                                                        
0041be   0e01     MOVLW     0x1                                                                                             
0041c0   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0041c2   ffdb                                                                                                               
0041c4   50f2     MOVF      0xf2,0x0,0x0   		temp_GIEL = INTCONbits.GIEL;                                                   C:\mort\Mort Code 08\code\eeprom.c
0041c6   0b40     ANDLW     0x40                                                                                            
0041c8   e001     BZ        0x41cc                                                                                          
0041ca   0e01     MOVLW     0x1                                                                                             
0041cc   6ee7     MOVWF     0xe7,0x0                                                                                        
0041ce   0e02     MOVLW     0x2                                                                                             
0041d0   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0041d2   ffdb                                                                                                               
                                           	                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           		// EEPROM operation (as opposed to a flash memory operation)                   C:\mort\Mort Code 08\code\eeprom.c
0041d4   9ea6     BCF       0xa6,0x7,0x0   	    EECON1bits.EEPGD = 0;                                                       C:\mort\Mort Code 08\code\eeprom.c
                                           	                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           		// Only do a write                                                             C:\mort\Mort Code 08\code\eeprom.c
0041d6   98a6     BCF       0xa6,0x4,0x0   	    EECON1bits.FREE = 0;                                                        C:\mort\Mort Code 08\code\eeprom.c
                                           	                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           	    // make sure the EEPROM write done flag is reset                            C:\mort\Mort Code 08\code\eeprom.c
0041d8   98a1     BCF       0xa1,0x4,0x0   		PIR2bits.EEIF = 0;                                                             C:\mort\Mort Code 08\code\eeprom.c
                                           	                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           		// set EEPROM address                                                          C:\mort\Mort Code 08\code\eeprom.c
0041da   51fd     MOVF      0xfd,0x0,0x1   	    EEADR = LOBYTE(eeprom_queue_address[eeprom_queue_read_index]);              C:\mort\Mort Code 08\code\eeprom.c
0041dc   d843     RCALL     0x4264                                                                                          
0041de   50ef     MOVF      0xef,0x0,0x0                                                                                    
0041e0   6ea9     MOVWF     0xa9,0x0                                                                                        
0041e2   51fd     MOVF      0xfd,0x0,0x1   		EEADRH = HIBYTE(eeprom_queue_address[eeprom_queue_read_index]);                C:\mort\Mort Code 08\code\eeprom.c
0041e4   d83f     RCALL     0x4264                                                                                          
0041e6   cfee     MOVFF     0xfee,0x0                                                                                       
0041e8   f000                                                                                                               
0041ea   cfef     MOVFF     0xfef,0x1                                                                                       
0041ec   f001                                                                                                               
0041ee   c001     MOVFF     0x1,0x0                                                                                         
0041f0   f000                                                                                                               
0041f2   6a01     CLRF      0x1,0x0                                                                                         
0041f4   5000     MOVF      0x0,0x0,0x0                                                                                     
0041f6   6eaa     MOVWF     0xaa,0x0                                                                                        
004264   6ee9     MOVWF     0xe9,0x0                                                                                        
004266   6aea     CLRF      0xea,0x0                                                                                        
004268   90d8     BCF       0xd8,0x0,0x0                                                                                    
00426a   36e9     RLCF      0xe9,0x1,0x0                                                                                    
00426c   36ea     RLCF      0xea,0x1,0x0                                                                                    
00426e   0ea0     MOVLW     0xa0                                                                                            
004270   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
004272   0e02     MOVLW     0x2                                                                                             
004274   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
004276   0012     RETURN    0x0                                                                                             
                                           	                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           		// set EEPROM data to write                                                    C:\mort\Mort Code 08\code\eeprom.c
0041f8   51fd     MOVF      0xfd,0x0,0x1   	    EEDATA = eeprom_queue_data[eeprom_queue_read_index];                        C:\mort\Mort Code 08\code\eeprom.c
0041fa   6aea     CLRF      0xea,0x0                                                                                        
0041fc   0f80     ADDLW     0x80                                                                                            
0041fe   6ee9     MOVWF     0xe9,0x0                                                                                        
004200   0e02     MOVLW     0x2                                                                                             
004202   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
004204   50ef     MOVF      0xef,0x0,0x0                                                                                    
004206   6ea8     MOVWF     0xa8,0x0                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\eeprom.c
                                           		// enable EEPROM writes                                                        C:\mort\Mort Code 08\code\eeprom.c
004208   84a6     BSF       0xa6,0x2,0x0   	    EECON1bits.WREN = 1;                                                        C:\mort\Mort Code 08\code\eeprom.c
                                           	                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           	    // disable Interrupts                                                       C:\mort\Mort Code 08\code\eeprom.c
00420a   9ef2     BCF       0xf2,0x7,0x0   		INTCONbits.GIEH = 0;                                                           C:\mort\Mort Code 08\code\eeprom.c
00420c   9cf2     BCF       0xf2,0x6,0x0   		INTCONbits.GIEL = 0;                                                           C:\mort\Mort Code 08\code\eeprom.c
                                           	                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           	    // pre-write sequence                                                       C:\mort\Mort Code 08\code\eeprom.c
00420e   0e55     MOVLW     0x55           	    EECON2 = 0x55;                                                              C:\mort\Mort Code 08\code\eeprom.c
004210   6ea7     MOVWF     0xa7,0x0                                                                                        
004212   0eaa     MOVLW     0xaa           	    EECON2 = 0xAA;                                                              C:\mort\Mort Code 08\code\eeprom.c
004214   6ea7     MOVWF     0xa7,0x0                                                                                        
                                           	                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           		// execute the write                                                           C:\mort\Mort Code 08\code\eeprom.c
004216   82a6     BSF       0xa6,0x1,0x0   		EECON1bits.WR = 1;                                                             C:\mort\Mort Code 08\code\eeprom.c
                                                                                                                            C:\mort\Mort Code 08\code\eeprom.c
                                           		// set GIEH to its original state                                              C:\mort\Mort Code 08\code\eeprom.c
004218   0e01     MOVLW     0x1            	    INTCONbits.GIEH = temp_GIEH;                                                C:\mort\Mort Code 08\code\eeprom.c
00421a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00421c   b0e8     BTFSC     0xe8,0x0,0x0                                                                                    
00421e   8ef2     BSF       0xf2,0x7,0x0                                                                                    
004220   a0e8     BTFSS     0xe8,0x0,0x0                                                                                    
004222   9ef2     BCF       0xf2,0x7,0x0                                                                                    
                                           	                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           		// set GIEL to its original state                                              C:\mort\Mort Code 08\code\eeprom.c
004224   0e02     MOVLW     0x2            	    INTCONbits.GIEL = temp_GIEL;                                                C:\mort\Mort Code 08\code\eeprom.c
004226   50db     MOVF      0xdb,0x0,0x0                                                                                    
004228   b0e8     BTFSC     0xe8,0x0,0x0                                                                                    
00422a   8cf2     BSF       0xf2,0x6,0x0                                                                                    
00422c   a0e8     BTFSS     0xe8,0x0,0x0                                                                                    
00422e   9cf2     BCF       0xf2,0x6,0x0                                                                                    
                                                                                                                            C:\mort\Mort Code 08\code\eeprom.c
                                           		// decrement the write queue count                                             C:\mort\Mort Code 08\code\eeprom.c
004230   07fa     DECF      0xfa,0x1,0x1   		eeprom_queue_count--;                                                          C:\mort\Mort Code 08\code\eeprom.c
                                                                                                                            C:\mort\Mort Code 08\code\eeprom.c
                                           		// increment the read pointer                                                  C:\mort\Mort Code 08\code\eeprom.c
004232   2bfd     INCF      0xfd,0x1,0x1   		eeprom_queue_read_index++;                                                     C:\mort\Mort Code 08\code\eeprom.c
                                                                                                                            C:\mort\Mort Code 08\code\eeprom.c
                                           		// If the index pointer overflowed, cut-off the high-order bit. Doing this     C:\mort\Mort Code 08\code\eeprom.c
                                           		// every time is quicker than checking for overflow every time with an if()    C:\mort\Mort Code 08\code\eeprom.c
                                           		// statement and only then occasionally setting it back to zero. For this      C:\mort\Mort Code 08\code\eeprom.c
                                           		// to work, the queue size must be a power of 2 (e.g., 16,32,64,128...).       C:\mort\Mort Code 08\code\eeprom.c
004234   0e1f     MOVLW     0x1f           		eeprom_queue_read_index &= EEPROM_QUEUE_INDEX_MASK;                            C:\mort\Mort Code 08\code\eeprom.c
004236   17fd     ANDWF     0xfd,0x1,0x1                                                                                    
                                                                                                                            C:\mort\Mort Code 08\code\eeprom.c
                                           		// is the circular queue now empty?                                            C:\mort\Mort Code 08\code\eeprom.c
004238   51fe     MOVF      0xfe,0x0,0x1   		if(eeprom_queue_read_index == eeprom_queue_write_index)                        C:\mort\Mort Code 08\code\eeprom.c
00423a   5dfd     SUBWF     0xfd,0x0,0x1                                                                                    
00423c   e102     BNZ       0x4242                                                                                          
                                           		{                                                                              C:\mort\Mort Code 08\code\eeprom.c
00423e   0e01     MOVLW     0x1            			eeprom_queue_empty = TRUE;                                                    C:\mort\Mort Code 08\code\eeprom.c
004240   6ffc     MOVWF     0xfc,0x1                                                                                        
                                           		}                                                                              C:\mort\Mort Code 08\code\eeprom.c
                                                                                                                            C:\mort\Mort Code 08\code\eeprom.c
                                            		// Since we've just removed a byte from the queue, it can't possibly be full. C:\mort\Mort Code 08\code\eeprom.c
                                           		// Again, this is quicker than using an if() statement every time              C:\mort\Mort Code 08\code\eeprom.c
004242   6bfb     CLRF      0xfb,0x1       		eeprom_queue_full = FALSE;                                                     C:\mort\Mort Code 08\code\eeprom.c
                                           	                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           	    // wait for the write to complete                                           C:\mort\Mort Code 08\code\eeprom.c
004244   a8a1     BTFSS     0xa1,0x4,0x0   		while(PIR2bits.EEIF == 0);                                                     C:\mort\Mort Code 08\code\eeprom.c
004246   d7fe     BRA       0x4244                                                                                          
                                           	                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           		// clear the write completion interrupt flag                                   C:\mort\Mort Code 08\code\eeprom.c
004248   98a1     BCF       0xa1,0x4,0x0   	    PIR2bits.EEIF = 0;                                                          C:\mort\Mort Code 08\code\eeprom.c
                                           	                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           	    // disable EEPROM writes                                                    C:\mort\Mort Code 08\code\eeprom.c
00424a   94a6     BCF       0xa6,0x2,0x0   		EECON1bits.WREN = 0;                                                           C:\mort\Mort Code 08\code\eeprom.c
                                           	}                                                                               C:\mort\Mort Code 08\code\eeprom.c
00424c   0e03     MOVLW     0x3            }                                                                                C:\mort\Mort Code 08\code\eeprom.c
00424e   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
004250   e202     BC        0x4256                                                                                          
004252   6ae1     CLRF      0xe1,0x0                                                                                        
004254   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004256   6ee1     MOVWF     0xe1,0x0                                                                                        
004258   d014     BRA       0x4282                                                                                          
004282   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004284   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
004286   ffd9                                                                                                               
004288   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\mort\Mort Code 08\code\eeprom.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	FUNCTION:		EEPROM_Queue_Free_Space()                                           C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	PURPOSE:		Returns the number of free slots in the EEPROM queue.                C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	PARAMETERS:		none                                                              C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	RETURNS:		Unsigned char containing the number of free slots                    C:\mort\Mort Code 08\code\eeprom.c
                                           *					in the EEPROM write buffer.                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *	COMMENTS:		This function should be called to determine if enough               C:\mort\Mort Code 08\code\eeprom.c
                                           *					space is available before you call EEPROM_Write().                         C:\mort\Mort Code 08\code\eeprom.c
                                           *                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\eeprom.c
                                           unsigned char EEPROM_Queue_Free_Space(void)                                      C:\mort\Mort Code 08\code\eeprom.c
                                           {                                                                                C:\mort\Mort Code 08\code\eeprom.c
00425a   0e20     MOVLW     0x20           	return(EEPROM_QUEUE_SIZE - eeprom_queue_count);                                 C:\mort\Mort Code 08\code\eeprom.c
00425c   0101     MOVLB     0x1                                                                                             
00425e   80d8     BSF       0xd8,0x0,0x0                                                                                    
004260   55fa     SUBFWB    0xfa,0x0,0x1                                                                                    
004262   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\eeprom.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	TITLE:		encoder.c                                                              C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	VERSION:	0.6 (Beta)                                                            C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	DATE:		15-Jan-2008                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	AUTHOR:		R. Kevin Watson                                                       C:\mort\Mort Code 08\code\encoder.c
                                           *				kevinw@jpl.nasa.gov                                                         C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:	This version is compatible with Microchip C18 3.0+ only.             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *				This file best viewed with tabs set to four.                                C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *				You are free to use this source code for any non-commercial                 C:\mort\Mort Code 08\code\encoder.c
                                           *				use. Please do not make copies of this source code, modified                C:\mort\Mort Code 08\code\encoder.c
                                           *				or un-modified, publicly available on the internet or                       C:\mort\Mort Code 08\code\encoder.c
                                           *				elsewhere without permission. Thanks.                                       C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *				Copyright ©2003-2008 R. Kevin Watson. All rights are reserved.              C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           ******************************************************************************** C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CHANGE LOG:                                                                    C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	DATE         REV  DESCRIPTION                                                  C:\mort\Mort Code 08\code\encoder.c
                                           *	-----------  ---  ----------------------------------------------------------   C:\mort\Mort Code 08\code\encoder.c
                                           *	20-Dec-2003  0.1  RKW - Original code.                                         C:\mort\Mort Code 08\code\encoder.c
                                           *	18-Feb-2004  0.2  RKW - Reassigned the encoder digital inputs to run           C:\mort\Mort Code 08\code\encoder.c
                                           *	                  on the FRC robot controller too.                             C:\mort\Mort Code 08\code\encoder.c
                                           *	01-Jan-2005  0.3  RKW - Get_Left_Encoder_Count(), Get_Right_Encoder_Count(),   C:\mort\Mort Code 08\code\encoder.c
                                           *	                  Reset_Left_Encoder_Count() and Reset_Right_Encoder_Count()   C:\mort\Mort Code 08\code\encoder.c
                                           *	                  functions added.                                             C:\mort\Mort Code 08\code\encoder.c
                                           *	01-Jan-2005  0.3  RKW - Renamed Int_1_Handler() and Int_2_Handler() to         C:\mort\Mort Code 08\code\encoder.c
                                           *	                  Left_Encoder_Int_Handler() and Right_Encoder_Int_Handler     C:\mort\Mort Code 08\code\encoder.c
                                           *	                  respectively.                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	01-Jan-2005  0.3  RKW - Altered the interrupt service routines to easily       C:\mort\Mort Code 08\code\encoder.c
                                           *	                  flip the direction the encoders count by altering the        C:\mort\Mort Code 08\code\encoder.c
                                           *	                  RIGHT_ENCODER_TICK_DELTA and LEFT_ENCODER_TICK_DELTA         C:\mort\Mort Code 08\code\encoder.c
                                           *	                  #defines found in encoder.h                                  C:\mort\Mort Code 08\code\encoder.c
                                           *	06-Jan-2005  0.4  RKW - Rebuilt with C18 version 2.40.                         C:\mort\Mort Code 08\code\encoder.c
                                           *	17-Dec-2005  0.5  RKW - Added code to accomodate four more encoder on          C:\mort\Mort Code 08\code\encoder.c
                                           *	                  interrupts 3 through 6. These additional encoder inputs      C:\mort\Mort Code 08\code\encoder.c
                                           *	                  are optimized for position control.                          C:\mort\Mort Code 08\code\encoder.c
                                           *	13-Jan-2006  0.5  RKW - Verified code works properly on new PIC18F8722-        C:\mort\Mort Code 08\code\encoder.c
                                           *	                  based robot controllers.                                     C:\mort\Mort Code 08\code\encoder.c
                                           *	15-Jan-2008  0.6  RKW - renamed ISRs to be compatible with new robot           C:\mort\Mort Code 08\code\encoder.c
                                           *	                  controller code; restructured the ENABLE_ENCODER_n           C:\mort\Mort Code 08\code\encoder.c
                                           *	                  scheme to be compatible with new robot controller code.      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           #include "ifi_frc.h"                                                             C:\mort\Mort Code 08\code\encoder.c
                                           #include "encoder.h"                                                             C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           // These variables are used to keep track of the encoder position over time.     C:\mort\Mort Code 08\code\encoder.c
                                           // Though these are global variables, they shouldn't be modified directly.       C:\mort\Mort Code 08\code\encoder.c
                                           // Functions to modify these variables are included below.                       C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_1                                                          C:\mort\Mort Code 08\code\encoder.c
                                           volatile long Encoder_1_Count = 0;                                               C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_2                                                          C:\mort\Mort Code 08\code\encoder.c
                                           volatile long Encoder_2_Count = 0;                                               C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_3                                                          C:\mort\Mort Code 08\code\encoder.c
                                           unsigned char Encoder_3_State;                                                   C:\mort\Mort Code 08\code\encoder.c
                                           volatile long Encoder_3_Count = 0;                                               C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_4                                                          C:\mort\Mort Code 08\code\encoder.c
                                           unsigned char Encoder_4_State;                                                   C:\mort\Mort Code 08\code\encoder.c
                                           volatile long Encoder_4_Count = 0;                                               C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_5                                                          C:\mort\Mort Code 08\code\encoder.c
                                           unsigned char Encoder_5_State;                                                   C:\mort\Mort Code 08\code\encoder.c
                                           volatile long Encoder_5_Count = 0;                                               C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_6                                                          C:\mort\Mort Code 08\code\encoder.c
                                           unsigned char Encoder_6_State;                                                   C:\mort\Mort Code 08\code\encoder.c
                                           volatile long Encoder_6_Count = 0;                                               C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	FUNCTION:		Initialize_Encoder_1()                                              C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PURPOSE:		Initializes encoder #1.                                              C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CALLED FROM:	main.c/Initialization()                                           C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_1                                                          C:\mort\Mort Code 08\code\encoder.c
                                           void Initialize_Encoder_1(void)                                                  C:\mort\Mort Code 08\code\encoder.c
                                           {                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           	// make sure interrupt 1 is configured as an input                              C:\mort\Mort Code 08\code\encoder.c
00450c   8493     BSF       0x93,0x2,0x0   	TRISBbits.TRISB2 = 1;                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// interrupt 1 is low priority                                                  C:\mort\Mort Code 08\code\encoder.c
00450e   9ef0     BCF       0xf0,0x7,0x0   	INTCON3bits.INT2IP = 0;                                                         C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// trigger on rising edge                                                       C:\mort\Mort Code 08\code\encoder.c
004510   88f1     BSF       0xf1,0x4,0x0   	INTCON2bits.INTEDG2 = 1;                                                        C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// make sure the interrupt flag is reset before enabling                        C:\mort\Mort Code 08\code\encoder.c
004512   92f0     BCF       0xf0,0x1,0x0   	INTCON3bits.INT2IF = 0;                                                         C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// enable interrupt 1                                                           C:\mort\Mort Code 08\code\encoder.c
004514   88f0     BSF       0xf0,0x4,0x0   	INTCON3bits.INT2IE = 1;                                                         C:\mort\Mort Code 08\code\encoder.c
004516   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	FUNCTION:		Initialize_Encoder_2()                                              C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PURPOSE:		Initializes encoder #2.                                              C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CALLED FROM:	main.c/Initialization()                                           C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_2                                                          C:\mort\Mort Code 08\code\encoder.c
                                           void Initialize_Encoder_2(void)                                                  C:\mort\Mort Code 08\code\encoder.c
                                           {                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           	// make sure interrupt 2 is configured as an input                              C:\mort\Mort Code 08\code\encoder.c
                                           	TRISBbits.TRISB3 = 1;                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// interrupt 2 is low priority                                                  C:\mort\Mort Code 08\code\encoder.c
                                           	INTCON2bits.INT3IP = 0;                                                         C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// trigger on rising edge                                                       C:\mort\Mort Code 08\code\encoder.c
                                           	INTCON2bits.INTEDG3 = 1;                                                        C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// make sure the interrupt flag is reset before enabling                        C:\mort\Mort Code 08\code\encoder.c
                                           	INTCON3bits.INT3IF = 0;                                                         C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// enable interrupt 2                                                           C:\mort\Mort Code 08\code\encoder.c
                                           	INTCON3bits.INT3IE = 1;                                                         C:\mort\Mort Code 08\code\encoder.c
                                           }                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	FUNCTION:		Initialize_Encoder_3_6()                                            C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PURPOSE:		Initializes encoders 3 through 6.                                    C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CALLED FROM:	main.c/Initialization()                                           C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_3_6                                                        C:\mort\Mort Code 08\code\encoder.c
                                           void Initialize_Encoder_3_6(void)                                                C:\mort\Mort Code 08\code\encoder.c
                                           {                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           	// make sure interrupts 3 through 6 are configured as inputs                    C:\mort\Mort Code 08\code\encoder.c
                                           	TRISBbits.TRISB4 = 1;                                                           C:\mort\Mort Code 08\code\encoder.c
                                           	TRISBbits.TRISB5 = 1;                                                           C:\mort\Mort Code 08\code\encoder.c
                                           	TRISBbits.TRISB6 = 1;                                                           C:\mort\Mort Code 08\code\encoder.c
                                           	TRISBbits.TRISB7 = 1;                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// interrupts 3 through 6 are low priority                                      C:\mort\Mort Code 08\code\encoder.c
                                             	INTCON2bits.RBIP = 0;                                                         C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// make sure the interrupt flag is reset before enabling                        C:\mort\Mort Code 08\code\encoder.c
                                           	INTCONbits.RBIF = 0;                                                            C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// enable interrupts 3 through 6                                                C:\mort\Mort Code 08\code\encoder.c
                                           	INTCONbits.RBIE = 1;                                                            C:\mort\Mort Code 08\code\encoder.c
                                           }                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	FUNCTION:		Get_Encoder_1_Count()                                               C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PURPOSE:		Gets the current number of encoder 1 counts.                         C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	RETURNS:		Number of encoder 1 counts since the last reset.                     C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_1                                                          C:\mort\Mort Code 08\code\encoder.c
004518   cfd9     MOVFF     0xfd9,0xfe6    long Get_Encoder_1_Count(void)                                                   C:\mort\Mort Code 08\code\encoder.c
00451a   ffe6                                                                                                               
00451c   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00451e   ffd9                                                                                                               
004520   0e04     MOVLW     0x4                                                                                             
004522   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           	long count;                                                                     C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Since we're about to access the Encoder_1_Count variable,                    C:\mort\Mort Code 08\code\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\mort\Mort Code 08\code\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\mort\Mort Code 08\code\encoder.c
                                           	// that the Encoder_1_Count variable doesn't get altered while                  C:\mort\Mort Code 08\code\encoder.c
                                           	// we're using it.                                                              C:\mort\Mort Code 08\code\encoder.c
004524   98f0     BCF       0xf0,0x4,0x0   	INTCON3bits.INT2IE = 0;                                                         C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Now we can get a local copy of the encoder count without fear                C:\mort\Mort Code 08\code\encoder.c
                                           	// that we'll get corrupted data.                                               C:\mort\Mort Code 08\code\encoder.c
004526   c32f     MOVFF     0x32f,0xfdf    	count = Encoder_1_Count;                                                        C:\mort\Mort Code 08\code\encoder.c
004528   ffdf                                                                                                               
00452a   0e01     MOVLW     0x1                                                                                             
00452c   c330     MOVFF     0x330,0xfdb                                                                                     
00452e   ffdb                                                                                                               
004530   0e02     MOVLW     0x2                                                                                             
004532   c331     MOVFF     0x331,0xfdb                                                                                     
004534   ffdb                                                                                                               
004536   0e03     MOVLW     0x3                                                                                             
004538   c332     MOVFF     0x332,0xfdb                                                                                     
00453a   ffdb                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Okay, we have a local copy of the encoder count, so turn the                 C:\mort\Mort Code 08\code\encoder.c
                                           	// encoder's interrupt back on.                                                 C:\mort\Mort Code 08\code\encoder.c
00453c   88f0     BSF       0xf0,0x4,0x0   	INTCON3bits.INT2IE = 1;                                                         C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Return the encoder count to the caller.                                      C:\mort\Mort Code 08\code\encoder.c
00453e   cfde     MOVFF     0xfde,0x30     	return(count);                                                                  C:\mort\Mort Code 08\code\encoder.c
004540   f030                                                                                                               
004542   cfde     MOVFF     0xfde,0x31                                                                                      
004544   f031                                                                                                               
004546   cfde     MOVFF     0xfde,0x32                                                                                      
004548   f032                                                                                                               
00454a   cfdd     MOVFF     0xfdd,0x33                                                                                      
00454c   f033                                                                                                               
00454e   52dd     MOVF      0xdd,0x1,0x0                                                                                    
004550   52dd     MOVF      0xdd,0x1,0x0                                                                                    
004552   0e04     MOVLW     0x4            }                                                                                C:\mort\Mort Code 08\code\encoder.c
004554   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
004556   e202     BC        0x455c                                                                                          
004558   6ae1     CLRF      0xe1,0x0                                                                                        
00455a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00455c   6ee1     MOVWF     0xe1,0x0                                                                                        
00455e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004560   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
004562   ffd9                                                                                                               
004564   0012     RETURN    0x0                                                                                             
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	FUNCTION:		Reset_Encoder_1_Count()                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PURPOSE:		Resets the encoder 1 count to zero                                   C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_1                                                          C:\mort\Mort Code 08\code\encoder.c
                                           void Reset_Encoder_1_Count(void)                                                 C:\mort\Mort Code 08\code\encoder.c
                                           {                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           	// Since we're about to access the Encoder_1_Count variable,                    C:\mort\Mort Code 08\code\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\mort\Mort Code 08\code\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\mort\Mort Code 08\code\encoder.c
                                           	// that the Encoder_1_Count variable doesn't get altered while                  C:\mort\Mort Code 08\code\encoder.c
                                           	// we're using it.                                                              C:\mort\Mort Code 08\code\encoder.c
004566   98f0     BCF       0xf0,0x4,0x0   	INTCON3bits.INT2IE = 0;                                                         C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Now we can set the value of the encoder count without fear                   C:\mort\Mort Code 08\code\encoder.c
                                           	// that we'll write corrupted data.                                             C:\mort\Mort Code 08\code\encoder.c
004568   0103     MOVLB     0x3            	Encoder_1_Count = 0;                                                            C:\mort\Mort Code 08\code\encoder.c
00456a   6b2f     CLRF      0x2f,0x1                                                                                        
00456c   6b30     CLRF      0x30,0x1                                                                                        
00456e   6b31     CLRF      0x31,0x1                                                                                        
004570   6b32     CLRF      0x32,0x1                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Okay, we're done updating the encoder count, so turn the                     C:\mort\Mort Code 08\code\encoder.c
                                           	// left encoder's interrupt back on.                                            C:\mort\Mort Code 08\code\encoder.c
004572   88f0     BSF       0xf0,0x4,0x0   	INTCON3bits.INT2IE = 1;                                                         C:\mort\Mort Code 08\code\encoder.c
004574   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	FUNCTION:		Int_1_ISR()                                                         C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PURPOSE:		If enabled, the encoder 1 interrupt handler is called when           C:\mort\Mort Code 08\code\encoder.c
                                           *					the interrupt 1 pin changes from a logic 0 to a logic 1.                   C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CALLED FROM:	ifi_frc.c/Interrupt_Handler_Low()                                 C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_1                                                          C:\mort\Mort Code 08\code\encoder.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\encoder.c
                                           void Int_1_ISR(void)                                                             C:\mort\Mort Code 08\code\encoder.c
                                           {                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           	// Encoder 1's phase a signal just transitioned from zero to one, causing       C:\mort\Mort Code 08\code\encoder.c
                                           	// this interrupt service routine to be called. We know that the encoder        C:\mort\Mort Code 08\code\encoder.c
                                           	// just rotated one count or "tick" so now check the logical state of the       C:\mort\Mort Code 08\code\encoder.c
                                           	// phase b signal to determine which way the the encoder shaft rotated.         C:\mort\Mort Code 08\code\encoder.c
004576   be81     BTFSC     0x81,0x7,0x0   	if(ENCODER_1_PHASE_B_PIN == 0)                                                  C:\mort\Mort Code 08\code\encoder.c
004578   d007     BRA       0x4588                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\encoder.c
00457a   0103     MOVLB     0x3            		Encoder_1_Count -= ENCODER_1_TICK_DELTA;                                       C:\mort\Mort Code 08\code\encoder.c
00457c   072f     DECF      0x2f,0x1,0x1                                                                                    
00457e   0e00     MOVLW     0x0                                                                                             
004580   5b30     SUBWFB    0x30,0x1,0x1                                                                                    
004582   5b31     SUBWFB    0x31,0x1,0x1                                                                                    
004584   5b32     SUBWFB    0x32,0x1,0x1                                                                                    
                                           	}                                                                               C:\mort\Mort Code 08\code\encoder.c
004586   0012     RETURN    0x0            	else                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	{                                                                               C:\mort\Mort Code 08\code\encoder.c
004588   0103     MOVLB     0x3            		Encoder_1_Count += ENCODER_1_TICK_DELTA;                                       C:\mort\Mort Code 08\code\encoder.c
00458a   2b2f     INCF      0x2f,0x1,0x1                                                                                    
00458c   0e00     MOVLW     0x0                                                                                             
00458e   2330     ADDWFC    0x30,0x1,0x1                                                                                    
004590   2331     ADDWFC    0x31,0x1,0x1                                                                                    
004592   2332     ADDWFC    0x32,0x1,0x1                                                                                    
                                           	}                                                                               C:\mort\Mort Code 08\code\encoder.c
004594   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	FUNCTION:		Get_Encoder_2_Count()                                               C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PURPOSE:		Gets the current number of encoder 2 counts.                         C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	RETURNS:		Number of encoder 2 counts since the last reset.                     C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_2                                                          C:\mort\Mort Code 08\code\encoder.c
                                           long Get_Encoder_2_Count(void)                                                   C:\mort\Mort Code 08\code\encoder.c
                                           {                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           	long count;                                                                     C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Since we're about to access the Encoder_2_Count variable,                    C:\mort\Mort Code 08\code\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\mort\Mort Code 08\code\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\mort\Mort Code 08\code\encoder.c
                                           	// that the Encoder_2_Count variable doesn't get altered while                  C:\mort\Mort Code 08\code\encoder.c
                                           	// we're using it.                                                              C:\mort\Mort Code 08\code\encoder.c
                                           	INTCON3bits.INT3IE = 0;                                                         C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Now we can get a local copy of the encoder count without fear                C:\mort\Mort Code 08\code\encoder.c
                                           	// that we'll get corrupted data.                                               C:\mort\Mort Code 08\code\encoder.c
                                           	count = Encoder_2_Count;                                                        C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Okay, we have a local copy of the encoder count, so turn the                 C:\mort\Mort Code 08\code\encoder.c
                                           	// encoder's interrupt back on.                                                 C:\mort\Mort Code 08\code\encoder.c
                                           	INTCON3bits.INT3IE = 1;                                                         C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Return the encoder count to the caller.                                      C:\mort\Mort Code 08\code\encoder.c
                                           	return(count);                                                                  C:\mort\Mort Code 08\code\encoder.c
                                           }                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	FUNCTION:		Reset_Encoder_2_Count()                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PURPOSE:		Resets the encoder 2 count to zero                                   C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_2                                                          C:\mort\Mort Code 08\code\encoder.c
                                           void Reset_Encoder_2_Count(void)                                                 C:\mort\Mort Code 08\code\encoder.c
                                           {                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           	// Since we're about to access the Encoder_2_Count variable,                    C:\mort\Mort Code 08\code\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\mort\Mort Code 08\code\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\mort\Mort Code 08\code\encoder.c
                                           	// that the Encoder_2_Count variable doesn't get altered while                  C:\mort\Mort Code 08\code\encoder.c
                                           	// we're using it.                                                              C:\mort\Mort Code 08\code\encoder.c
                                           	INTCON3bits.INT3IE = 0;                                                         C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Now we can set the value of the encoder count without fear                   C:\mort\Mort Code 08\code\encoder.c
                                           	// that we'll write corrupted data.                                             C:\mort\Mort Code 08\code\encoder.c
                                           	Encoder_2_Count = 0;                                                            C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Okay, we're done updating the encoder count, so turn the                     C:\mort\Mort Code 08\code\encoder.c
                                           	// left encoder's interrupt back on.                                            C:\mort\Mort Code 08\code\encoder.c
                                           	INTCON3bits.INT3IE = 1;                                                         C:\mort\Mort Code 08\code\encoder.c
                                           }                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	FUNCTION:		Int_2_ISR()                                                         C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PURPOSE:		If enabled, the encoder 2 interrupt handler is called when           C:\mort\Mort Code 08\code\encoder.c
                                           *					the interrupt 2 pin changes from a logic 0 to a logic 1.                   C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CALLED FROM:	ifi_frc.c/Interrupt_Handler_Low()                                 C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_2                                                          C:\mort\Mort Code 08\code\encoder.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\encoder.c
                                           void Int_2_ISR(void)                                                             C:\mort\Mort Code 08\code\encoder.c
                                           {                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           	// Encoder 2's phase a signal just transitioned from zero to one, causing       C:\mort\Mort Code 08\code\encoder.c
                                           	// this interrupt service routine to be called. We know that the encoder        C:\mort\Mort Code 08\code\encoder.c
                                           	// just rotated one count or "tick" so now check the logical state of the       C:\mort\Mort Code 08\code\encoder.c
                                           	// phase b signal to determine which way the the encoder shaft rotated.         C:\mort\Mort Code 08\code\encoder.c
                                           	if(ENCODER_2_PHASE_B_PIN == 0)                                                  C:\mort\Mort Code 08\code\encoder.c
                                           	{                                                                               C:\mort\Mort Code 08\code\encoder.c
                                           		Encoder_2_Count -= ENCODER_2_TICK_DELTA;                                       C:\mort\Mort Code 08\code\encoder.c
                                           	}                                                                               C:\mort\Mort Code 08\code\encoder.c
                                           	else                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	{                                                                               C:\mort\Mort Code 08\code\encoder.c
                                           		Encoder_2_Count += ENCODER_2_TICK_DELTA;                                       C:\mort\Mort Code 08\code\encoder.c
                                           	}                                                                               C:\mort\Mort Code 08\code\encoder.c
                                           }                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	FUNCTION:		Get_Encoder_3_Count()                                               C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PURPOSE:		Gets the current number of encoder 3 counts.                         C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	RETURNS:		Number of encoder 3 counts since the last reset.                     C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_3                                                          C:\mort\Mort Code 08\code\encoder.c
                                           long Get_Encoder_3_Count(void)                                                   C:\mort\Mort Code 08\code\encoder.c
                                           {                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           	long count;                                                                     C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Since we're about to access the Encoder_3_Count variable,                    C:\mort\Mort Code 08\code\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\mort\Mort Code 08\code\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\mort\Mort Code 08\code\encoder.c
                                           	// that the Encoder_3_Count variable doesn't get altered while                  C:\mort\Mort Code 08\code\encoder.c
                                           	// we're using it.                                                              C:\mort\Mort Code 08\code\encoder.c
                                           	INTCONbits.RBIE = 0;                                                            C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Now we can get a local copy of the encoder count without fear                C:\mort\Mort Code 08\code\encoder.c
                                           	// that we'll get corrupted data.                                               C:\mort\Mort Code 08\code\encoder.c
                                           	count = Encoder_3_Count;                                                        C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Okay, we have a local copy of the encoder count, so turn the                 C:\mort\Mort Code 08\code\encoder.c
                                           	// encoder's interrupt back on.                                                 C:\mort\Mort Code 08\code\encoder.c
                                           	INTCONbits.RBIE = 1;                                                            C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Return the encoder count to the caller.                                      C:\mort\Mort Code 08\code\encoder.c
                                           	return(count);                                                                  C:\mort\Mort Code 08\code\encoder.c
                                           }                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	FUNCTION:		Reset_Encoder_3_Count()                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PURPOSE:		Resets the encoder 3 count to zero                                   C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_3                                                          C:\mort\Mort Code 08\code\encoder.c
                                           void Reset_Encoder_3_Count(void)                                                 C:\mort\Mort Code 08\code\encoder.c
                                           {                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           	// Since we're about to access the Encoder_3_Count variable,                    C:\mort\Mort Code 08\code\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\mort\Mort Code 08\code\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\mort\Mort Code 08\code\encoder.c
                                           	// that the Encoder_3_Count variable doesn't get altered while                  C:\mort\Mort Code 08\code\encoder.c
                                           	// we're using it.                                                              C:\mort\Mort Code 08\code\encoder.c
                                           	INTCONbits.RBIE = 0;                                                            C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Now we can set the value of the encoder count without fear                   C:\mort\Mort Code 08\code\encoder.c
                                           	// that we'll write corrupted data.                                             C:\mort\Mort Code 08\code\encoder.c
                                           	Encoder_3_Count = 0;                                                            C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Okay, we're done updating the encoder count, so turn the                     C:\mort\Mort Code 08\code\encoder.c
                                           	// left encoder's interrupt back on.                                            C:\mort\Mort Code 08\code\encoder.c
                                           	INTCONbits.RBIE = 1;                                                            C:\mort\Mort Code 08\code\encoder.c
                                           }                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	FUNCTION:		Int_3_ISR()                                                         C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PURPOSE:		If enabled, the encoder 3 interrupt handler is called when           C:\mort\Mort Code 08\code\encoder.c
                                           *					the interrupt 3 pin changes logic state                                    C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CALLED FROM:	ifi_frc.c/Interrupt_Handler_Low()                                 C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_3                                                          C:\mort\Mort Code 08\code\encoder.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\encoder.c
                                           void Int_3_ISR(unsigned char state)                                              C:\mort\Mort Code 08\code\encoder.c
                                           {                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           	// Encoder 3's phase a signal just changed logic level, causing this            C:\mort\Mort Code 08\code\encoder.c
                                           	// interrupt service routine to be called.                                      C:\mort\Mort Code 08\code\encoder.c
                                           	if(state == 1)                                                                  C:\mort\Mort Code 08\code\encoder.c
                                           	{                                                                               C:\mort\Mort Code 08\code\encoder.c
                                           		// rising-edge interrupt                                                       C:\mort\Mort Code 08\code\encoder.c
                                           		if(ENCODER_3_PHASE_B_PIN == 0)                                                 C:\mort\Mort Code 08\code\encoder.c
                                           		{                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           			// backward                                                                   C:\mort\Mort Code 08\code\encoder.c
                                           			if(Encoder_3_State == 1)                                                      C:\mort\Mort Code 08\code\encoder.c
                                           			{                                                                             C:\mort\Mort Code 08\code\encoder.c
                                           				Encoder_3_Count -= ENCODER_3_TICK_DELTA;                                     C:\mort\Mort Code 08\code\encoder.c
                                           			}                                                                             C:\mort\Mort Code 08\code\encoder.c
                                           		}                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           		else                                                                           C:\mort\Mort Code 08\code\encoder.c
                                           		{                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           			// forward                                                                    C:\mort\Mort Code 08\code\encoder.c
                                           			if(Encoder_3_State == 0)                                                      C:\mort\Mort Code 08\code\encoder.c
                                           			{                                                                             C:\mort\Mort Code 08\code\encoder.c
                                           				Encoder_3_Count += ENCODER_3_TICK_DELTA;                                     C:\mort\Mort Code 08\code\encoder.c
                                           			}                                                                             C:\mort\Mort Code 08\code\encoder.c
                                           		}                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           	}                                                                               C:\mort\Mort Code 08\code\encoder.c
                                           	else                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	{                                                                               C:\mort\Mort Code 08\code\encoder.c
                                           		// falling-edge interrupt                                                      C:\mort\Mort Code 08\code\encoder.c
                                           		//   phase b is zero if moving forward                                         C:\mort\Mort Code 08\code\encoder.c
                                           		//   phase b is one if moving backward                                         C:\mort\Mort Code 08\code\encoder.c
                                           		Encoder_3_State = ENCODER_3_PHASE_B_PIN;                                       C:\mort\Mort Code 08\code\encoder.c
                                           	}                                                                               C:\mort\Mort Code 08\code\encoder.c
                                           }                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	FUNCTION:		Get_Encoder_4_Count()                                               C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PURPOSE:		Gets the current number of encoder 4 counts.                         C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	RETURNS:		Number of encoder 4 counts since the last reset.                     C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_4                                                          C:\mort\Mort Code 08\code\encoder.c
                                           long Get_Encoder_4_Count(void)                                                   C:\mort\Mort Code 08\code\encoder.c
                                           {                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           	long count;                                                                     C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Since we're about to access the Encoder_4_Count variable,                    C:\mort\Mort Code 08\code\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\mort\Mort Code 08\code\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\mort\Mort Code 08\code\encoder.c
                                           	// that the Encoder_4_Count variable doesn't get altered while                  C:\mort\Mort Code 08\code\encoder.c
                                           	// we're using it.                                                              C:\mort\Mort Code 08\code\encoder.c
                                           	INTCONbits.RBIE = 0;                                                            C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Now we can get a local copy of the encoder count without fear                C:\mort\Mort Code 08\code\encoder.c
                                           	// that we'll get corrupted data.                                               C:\mort\Mort Code 08\code\encoder.c
                                           	count = Encoder_4_Count;                                                        C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Okay, we have a local copy of the encoder count, so turn the                 C:\mort\Mort Code 08\code\encoder.c
                                           	// encoder's interrupt back on.                                                 C:\mort\Mort Code 08\code\encoder.c
                                           	INTCONbits.RBIE = 1;                                                            C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Return the encoder count to the caller.                                      C:\mort\Mort Code 08\code\encoder.c
                                           	return(count);                                                                  C:\mort\Mort Code 08\code\encoder.c
                                           }                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	FUNCTION:		Reset_Encoder_4_Count()                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PURPOSE:		Resets the encoder 4 count to zero                                   C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_4                                                          C:\mort\Mort Code 08\code\encoder.c
                                           void Reset_Encoder_4_Count(void)                                                 C:\mort\Mort Code 08\code\encoder.c
                                           {                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           	// Since we're about to access the Encoder_4_Count variable,                    C:\mort\Mort Code 08\code\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\mort\Mort Code 08\code\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\mort\Mort Code 08\code\encoder.c
                                           	// that the Encoder_4_Count variable doesn't get altered while                  C:\mort\Mort Code 08\code\encoder.c
                                           	// we're using it.                                                              C:\mort\Mort Code 08\code\encoder.c
                                           	INTCONbits.RBIE = 0;                                                            C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Now we can set the value of the encoder count without fear                   C:\mort\Mort Code 08\code\encoder.c
                                           	// that we'll write corrupted data.                                             C:\mort\Mort Code 08\code\encoder.c
                                           	Encoder_4_Count = 0;                                                            C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Okay, we're done updating the encoder count, so turn the                     C:\mort\Mort Code 08\code\encoder.c
                                           	// left encoder's interrupt back on.                                            C:\mort\Mort Code 08\code\encoder.c
                                           	INTCONbits.RBIE = 1;                                                            C:\mort\Mort Code 08\code\encoder.c
                                           }                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	FUNCTION:		Int_4_ISR()                                                         C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PURPOSE:		If enabled, the encoder 4 interrupt handler is called when           C:\mort\Mort Code 08\code\encoder.c
                                           *					the interrupt 4 pin changes logic state                                    C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CALLED FROM:	ifi_frc.c/Interrupt_Handler_Low()                                 C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_4                                                          C:\mort\Mort Code 08\code\encoder.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\encoder.c
                                           void Int_4_ISR(unsigned char state)                                              C:\mort\Mort Code 08\code\encoder.c
                                           {                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           	// Encoder 4's phase a signal just changed logic level, causing this            C:\mort\Mort Code 08\code\encoder.c
                                           	// interrupt service routine to be called.                                      C:\mort\Mort Code 08\code\encoder.c
                                           	if(state == 1)                                                                  C:\mort\Mort Code 08\code\encoder.c
                                           	{                                                                               C:\mort\Mort Code 08\code\encoder.c
                                           		// rising-edge interrupt                                                       C:\mort\Mort Code 08\code\encoder.c
                                           		if(ENCODER_4_PHASE_B_PIN == 0)                                                 C:\mort\Mort Code 08\code\encoder.c
                                           		{                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           			// backward                                                                   C:\mort\Mort Code 08\code\encoder.c
                                           			if(Encoder_4_State == 1)                                                      C:\mort\Mort Code 08\code\encoder.c
                                           			{                                                                             C:\mort\Mort Code 08\code\encoder.c
                                           				Encoder_4_Count -= ENCODER_4_TICK_DELTA;                                     C:\mort\Mort Code 08\code\encoder.c
                                           			}                                                                             C:\mort\Mort Code 08\code\encoder.c
                                           		}                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           		else                                                                           C:\mort\Mort Code 08\code\encoder.c
                                           		{                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           			// forward                                                                    C:\mort\Mort Code 08\code\encoder.c
                                           			if(Encoder_4_State == 0)                                                      C:\mort\Mort Code 08\code\encoder.c
                                           			{                                                                             C:\mort\Mort Code 08\code\encoder.c
                                           				Encoder_4_Count += ENCODER_4_TICK_DELTA;                                     C:\mort\Mort Code 08\code\encoder.c
                                           			}                                                                             C:\mort\Mort Code 08\code\encoder.c
                                           		}                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           	}                                                                               C:\mort\Mort Code 08\code\encoder.c
                                           	else                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	{                                                                               C:\mort\Mort Code 08\code\encoder.c
                                           		// falling-edge interrupt                                                      C:\mort\Mort Code 08\code\encoder.c
                                           		//   phase b is zero if moving forward                                         C:\mort\Mort Code 08\code\encoder.c
                                           		//   phase b is one if moving backward                                         C:\mort\Mort Code 08\code\encoder.c
                                           		Encoder_4_State = ENCODER_4_PHASE_B_PIN;                                       C:\mort\Mort Code 08\code\encoder.c
                                           	}                                                                               C:\mort\Mort Code 08\code\encoder.c
                                           }                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	FUNCTION:		Get_Encoder_5_Count()                                               C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PURPOSE:		Gets the current number of encoder 5 counts.                         C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	RETURNS:		Number of encoder 5 counts since the last reset.                     C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_5                                                          C:\mort\Mort Code 08\code\encoder.c
                                           long Get_Encoder_5_Count(void)                                                   C:\mort\Mort Code 08\code\encoder.c
                                           {                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           	long count;                                                                     C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Since we're about to access the Encoder_5_Count variable,                    C:\mort\Mort Code 08\code\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\mort\Mort Code 08\code\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\mort\Mort Code 08\code\encoder.c
                                           	// that the Encoder_5_Count variable doesn't get altered while                  C:\mort\Mort Code 08\code\encoder.c
                                           	// we're using it.                                                              C:\mort\Mort Code 08\code\encoder.c
                                           	INTCONbits.RBIE = 0;                                                            C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Now we can get a local copy of the encoder count without fear                C:\mort\Mort Code 08\code\encoder.c
                                           	// that we'll get corrupted data.                                               C:\mort\Mort Code 08\code\encoder.c
                                           	count = Encoder_5_Count;                                                        C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Okay, we have a local copy of the encoder count, so turn the                 C:\mort\Mort Code 08\code\encoder.c
                                           	// encoder's interrupt back on.                                                 C:\mort\Mort Code 08\code\encoder.c
                                           	INTCONbits.RBIE = 1;                                                            C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Return the encoder count to the caller.                                      C:\mort\Mort Code 08\code\encoder.c
                                           	return(count);                                                                  C:\mort\Mort Code 08\code\encoder.c
                                           }                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	FUNCTION:		Reset_Encoder_5_Count()                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PURPOSE:		Resets the encoder 5 count to zero                                   C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_5                                                          C:\mort\Mort Code 08\code\encoder.c
                                           void Reset_Encoder_5_Count(void)                                                 C:\mort\Mort Code 08\code\encoder.c
                                           {                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           	// Since we're about to access the Encoder_5_Count variable,                    C:\mort\Mort Code 08\code\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\mort\Mort Code 08\code\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\mort\Mort Code 08\code\encoder.c
                                           	// that the Encoder_5_Count variable doesn't get altered while                  C:\mort\Mort Code 08\code\encoder.c
                                           	// we're using it.                                                              C:\mort\Mort Code 08\code\encoder.c
                                           	INTCONbits.RBIE = 0;                                                            C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Now we can set the value of the encoder count without fear                   C:\mort\Mort Code 08\code\encoder.c
                                           	// that we'll write corrupted data.                                             C:\mort\Mort Code 08\code\encoder.c
                                           	Encoder_5_Count = 0;                                                            C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Okay, we're done updating the encoder count, so turn the                     C:\mort\Mort Code 08\code\encoder.c
                                           	// left encoder's interrupt back on.                                            C:\mort\Mort Code 08\code\encoder.c
                                           	INTCONbits.RBIE = 1;                                                            C:\mort\Mort Code 08\code\encoder.c
                                           }                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	FUNCTION:		Int_5_ISR()                                                         C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PURPOSE:		If enabled, the encoder 5 interrupt handler is called when           C:\mort\Mort Code 08\code\encoder.c
                                           *					the interrupt 5 pin changes logic state                                    C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CALLED FROM:	user_routines_fast.c/InterruptHandlerLow()                        C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_5                                                          C:\mort\Mort Code 08\code\encoder.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\encoder.c
                                           void Int_5_ISR(unsigned char state)                                              C:\mort\Mort Code 08\code\encoder.c
                                           {                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           	// Encoder 5's phase a signal just changed logic level, causing this            C:\mort\Mort Code 08\code\encoder.c
                                           	// interrupt service routine to be called.                                      C:\mort\Mort Code 08\code\encoder.c
                                           	if(state == 1)                                                                  C:\mort\Mort Code 08\code\encoder.c
                                           	{                                                                               C:\mort\Mort Code 08\code\encoder.c
                                           		// rising-edge interrupt                                                       C:\mort\Mort Code 08\code\encoder.c
                                           		if(ENCODER_5_PHASE_B_PIN == 0)                                                 C:\mort\Mort Code 08\code\encoder.c
                                           		{                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           			Encoder_5_Count -= ENCODER_5_TICK_DELTA;                                      C:\mort\Mort Code 08\code\encoder.c
                                           		}                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           		else                                                                           C:\mort\Mort Code 08\code\encoder.c
                                           		{                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           			Encoder_5_Count += ENCODER_5_TICK_DELTA;                                      C:\mort\Mort Code 08\code\encoder.c
                                           		}                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           	}                                                                               C:\mort\Mort Code 08\code\encoder.c
                                           	else                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	{                                                                               C:\mort\Mort Code 08\code\encoder.c
                                           		// falling-edge interrupt                                                      C:\mort\Mort Code 08\code\encoder.c
                                           		if(ENCODER_5_PHASE_B_PIN == 0)                                                 C:\mort\Mort Code 08\code\encoder.c
                                           		{                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           			Encoder_5_Count += ENCODER_5_TICK_DELTA;                                      C:\mort\Mort Code 08\code\encoder.c
                                           		}                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           		else                                                                           C:\mort\Mort Code 08\code\encoder.c
                                           		{                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           			Encoder_5_Count -= ENCODER_5_TICK_DELTA;                                      C:\mort\Mort Code 08\code\encoder.c
                                           		}                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           	}                                                                               C:\mort\Mort Code 08\code\encoder.c
                                           }                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	FUNCTION:		Get_Encoder_6_Count()                                               C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PURPOSE:		Gets the current number of encoder 6 counts.                         C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	RETURNS:		Number of encoder 6 counts since the last reset.                     C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_6                                                          C:\mort\Mort Code 08\code\encoder.c
                                           long Get_Encoder_6_Count(void)                                                   C:\mort\Mort Code 08\code\encoder.c
                                           {                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           	long count;                                                                     C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Since we're about to access the Encoder_6_Count variable,                    C:\mort\Mort Code 08\code\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\mort\Mort Code 08\code\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\mort\Mort Code 08\code\encoder.c
                                           	// that the Encoder_6_Count variable doesn't get altered while                  C:\mort\Mort Code 08\code\encoder.c
                                           	// we're using it.                                                              C:\mort\Mort Code 08\code\encoder.c
                                           	INTCONbits.RBIE = 0;                                                            C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Now we can get a local copy of the encoder count without fear                C:\mort\Mort Code 08\code\encoder.c
                                           	// that we'll get corrupted data.                                               C:\mort\Mort Code 08\code\encoder.c
                                           	count = Encoder_6_Count;                                                        C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Okay, we have a local copy of the encoder count, so turn the                 C:\mort\Mort Code 08\code\encoder.c
                                           	// encoder's interrupt back on.                                                 C:\mort\Mort Code 08\code\encoder.c
                                           	INTCONbits.RBIE = 1;                                                            C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Return the encoder count to the caller.                                      C:\mort\Mort Code 08\code\encoder.c
                                           	return(count);                                                                  C:\mort\Mort Code 08\code\encoder.c
                                           }                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	FUNCTION:		Reset_Encoder_6_Count()                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PURPOSE:		Resets the encoder 6 count to zero                                   C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_6                                                          C:\mort\Mort Code 08\code\encoder.c
                                           void Reset_Encoder_6_Count(void)                                                 C:\mort\Mort Code 08\code\encoder.c
                                           {                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           	// Since we're about to access the Encoder_6_Count variable,                    C:\mort\Mort Code 08\code\encoder.c
                                           	// which can also be modified in the interrupt service routine,                 C:\mort\Mort Code 08\code\encoder.c
                                           	// we'll briefly disable the encoder's interrupt to make sure                   C:\mort\Mort Code 08\code\encoder.c
                                           	// that the Encoder_6_Count variable doesn't get altered while                  C:\mort\Mort Code 08\code\encoder.c
                                           	// we're using it.                                                              C:\mort\Mort Code 08\code\encoder.c
                                           	INTCONbits.RBIE = 0;                                                            C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Now we can set the value of the encoder count without fear                   C:\mort\Mort Code 08\code\encoder.c
                                           	// that we'll write corrupted data.                                             C:\mort\Mort Code 08\code\encoder.c
                                           	Encoder_6_Count = 0;                                                            C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	// Okay, we're done updating the encoder count, so turn the                     C:\mort\Mort Code 08\code\encoder.c
                                           	// left encoder's interrupt back on.                                            C:\mort\Mort Code 08\code\encoder.c
                                           	INTCONbits.RBIE = 1;                                                            C:\mort\Mort Code 08\code\encoder.c
                                           }                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                                                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	FUNCTION:		Int_6_ISR()                                                         C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PURPOSE:		If enabled, the encoder 6 interrupt handler is called when           C:\mort\Mort Code 08\code\encoder.c
                                           *					the interrupt 6 pin changes logic state                                    C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	CALLED FROM:	user_routines_fast.c/InterruptHandlerLow()                        C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	PARAMETERS:		None.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	RETURNS:		Nothing.                                                             C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\encoder.c
                                           *                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\encoder.c
                                           #ifdef ENABLE_ENCODER_6                                                          C:\mort\Mort Code 08\code\encoder.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\encoder.c
                                           void Int_6_ISR(unsigned char state)                                              C:\mort\Mort Code 08\code\encoder.c
                                           {                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           	// Encoder 6's phase a signal just changed logic level, causing this            C:\mort\Mort Code 08\code\encoder.c
                                           	// interrupt service routine to be called.                                      C:\mort\Mort Code 08\code\encoder.c
                                           	if(state == 1)                                                                  C:\mort\Mort Code 08\code\encoder.c
                                           	{                                                                               C:\mort\Mort Code 08\code\encoder.c
                                           		// rising-edge interrupt                                                       C:\mort\Mort Code 08\code\encoder.c
                                           		if(ENCODER_6_PHASE_B_PIN == 0)                                                 C:\mort\Mort Code 08\code\encoder.c
                                           		{                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           			Encoder_6_Count -= ENCODER_6_TICK_DELTA;                                      C:\mort\Mort Code 08\code\encoder.c
                                           		}                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           		else                                                                           C:\mort\Mort Code 08\code\encoder.c
                                           		{                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           			Encoder_6_Count += ENCODER_6_TICK_DELTA;                                      C:\mort\Mort Code 08\code\encoder.c
                                           		}                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           	}                                                                               C:\mort\Mort Code 08\code\encoder.c
                                           	else                                                                            C:\mort\Mort Code 08\code\encoder.c
                                           	{                                                                               C:\mort\Mort Code 08\code\encoder.c
                                           		// falling-edge interrupt                                                      C:\mort\Mort Code 08\code\encoder.c
                                           		if(ENCODER_6_PHASE_B_PIN == 0)                                                 C:\mort\Mort Code 08\code\encoder.c
                                           		{                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           			Encoder_6_Count += ENCODER_6_TICK_DELTA;                                      C:\mort\Mort Code 08\code\encoder.c
                                           		}                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           		else                                                                           C:\mort\Mort Code 08\code\encoder.c
                                           		{                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           			Encoder_6_Count -= ENCODER_6_TICK_DELTA;                                      C:\mort\Mort Code 08\code\encoder.c
                                           		}                                                                              C:\mort\Mort Code 08\code\encoder.c
                                           	}                                                                               C:\mort\Mort Code 08\code\encoder.c
                                           }                                                                                C:\mort\Mort Code 08\code\encoder.c
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\encoder.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\encoder.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	TITLE		gyro.c                                                                  C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	VERSION:	0.8 (Beta)                                                            C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	DATE:		09-Feb-2008                                                             C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	AUTHOR:		R. Kevin Watson                                                       C:\mort\Mort Code 08\code\gyro.c
                                           *				kevinw@jpl.nasa.gov                                                         C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	COMMENTS:	This file best viewed with tabs set to four.                         C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *				You are free to use this source code for any non-commercial                 C:\mort\Mort Code 08\code\gyro.c
                                           *				use. Please do not make copies of this source code, modified                C:\mort\Mort Code 08\code\gyro.c
                                           *				or un-modified, publicly available on the internet or                       C:\mort\Mort Code 08\code\gyro.c
                                           *				elsewhere without permission. Thanks.                                       C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *				Copyright ©2005-2008 R. Kevin Watson. All rights are reserved.              C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           ******************************************************************************** C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	CHANGE LOG:                                                                    C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	DATE         REV  DESCRIPTION                                                  C:\mort\Mort Code 08\code\gyro.c
                                           *	-----------  ---  ----------------------------------------------------------   C:\mort\Mort Code 08\code\gyro.c
                                           *	21-Nov-2004  0.1  RKW - Original code.                                         C:\mort\Mort Code 08\code\gyro.c
                                           *	12-Jan-2005  0.2  RKW - Altered Get_Gyro_Rate() and Get_Gyro_Angle() to use    C:\mort\Mort Code 08\code\gyro.c
                                           *	                  long integers for internal calculations, allowing larger     C:\mort\Mort Code 08\code\gyro.c
                                           *	                  numerators and denominators in the GYRO_RATE_SCALE_FACTOR    C:\mort\Mort Code 08\code\gyro.c
                                           *	                  and GYRO_ANGLE_SCALE_FACTOR #defines.                        C:\mort\Mort Code 08\code\gyro.c
                                           *	12-Jan-2005  0.2  RKW - GYRO_RATE_SCALE_FACTOR and GYRO_ANGLE_SCALE_FACTOR     C:\mort\Mort Code 08\code\gyro.c
                                           *	                  #defines added for Analog Devices' ADXRS401, ADXRS150 and    C:\mort\Mort Code 08\code\gyro.c
                                           *	                  ADXRS300 gyros.                                              C:\mort\Mort Code 08\code\gyro.c
                                           *	16-Jan-2005  0.3  RKW - Using preprocessor directives, added the ability       C:\mort\Mort Code 08\code\gyro.c
                                           *	                  to select the gyro type, angular units, sample rate and      C:\mort\Mort Code 08\code\gyro.c
                                           *	                  number of averaged samples per update.                       C:\mort\Mort Code 08\code\gyro.c
                                           *	21-Jan-2005  0.3  RKW - Added scaling factors for the BEI GyroChip.            C:\mort\Mort Code 08\code\gyro.c
                                           *	30-Jan-2005  0.4  RKW - Revised the way bias calculations are done.            C:\mort\Mort Code 08\code\gyro.c
                                           *	                  Instead of using only one data set as a bias, multiple       C:\mort\Mort Code 08\code\gyro.c
                                           *	                  sample sets can now be averaged over a much longer period    C:\mort\Mort Code 08\code\gyro.c
                                           *	                  of time to derive the gyro bias. Updated documentation.      C:\mort\Mort Code 08\code\gyro.c
                                           *	04-Sep-2005  0.5  RKW - Significant overhaul of gyro code to strip-out ADC-    C:\mort\Mort Code 08\code\gyro.c
                                           *	                  specific code and use new adc.c/.h interface. Added          C:\mort\Mort Code 08\code\gyro.c
                                           *	                  deadband option.                                             C:\mort\Mort Code 08\code\gyro.c
                                           *	21-Nov-2005  0.5  RKW - Added support for Murata's ENV-05D gyro.               C:\mort\Mort Code 08\code\gyro.c
                                           *	10-Jan-2006  0.5  RKW - Verified code works on PIC18F8722.                     C:\mort\Mort Code 08\code\gyro.c
                                           *	03-Jan-2008  0.6  RKW - Modified Process_Gyro_Data() to wait for new ADC       C:\mort\Mort Code 08\code\gyro.c
                                           *	                  data so the user just needs to call Process_Gyro_Data()      C:\mort\Mort Code 08\code\gyro.c
                                           *	                  from any/all of the *_spin functions found in the new        C:\mort\Mort Code 08\code\gyro.c
                                           *	                  robot controller code.                                       C:\mort\Mort Code 08\code\gyro.c
                                           *	28-Jan-2008  0.7  RKW - Fixed bug in Get_Gyro_Rate() that would return the     C:\mort\Mort Code 08\code\gyro.c
                                           *	                  wrong value at high angular change rates.                    C:\mort\Mort Code 08\code\gyro.c
                                           *	                  RKW - Modified calculations within Get_Gyro_Angle() to       C:\mort\Mort Code 08\code\gyro.c
                                           *	                  gain more rotation headroom before rollover occurs.          C:\mort\Mort Code 08\code\gyro.c
                                           *	                  RKW - Modified gyro bias code to use a circular queue        C:\mort\Mort Code 08\code\gyro.c
                                           *	                  to store samples until Stop_Gyro_Queue() is called,          C:\mort\Mort Code 08\code\gyro.c
                                           *	                  which averages the queue to derive the bias.                 C:\mort\Mort Code 08\code\gyro.c
                                           *	09-Feb-2008  0.8  RKW - Modified Process_Gyro_Data to optionally call          C:\mort\Mort Code 08\code\gyro.c
                                           *	                  Reset_ADC_Result_Count() when finished processing ADC        C:\mort\Mort Code 08\code\gyro.c
                                           *	                  data.                                                        C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           #include "ifi_frc.h"                                                             C:\mort\Mort Code 08\code\gyro.c
                                           #include "adc.h"                                                                 C:\mort\Mort Code 08\code\gyro.c
                                           #include "gyro.h"                                                                C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           int gyro_bias;                                                                   C:\mort\Mort Code 08\code\gyro.c
                                           int gyro_rate;                                                                   C:\mort\Mort Code 08\code\gyro.c
                                           long gyro_angle;                                                                 C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           /*                                                                               C:\mort\Mort Code 08\code\gyro.c
                                           long vGyro_base_angle;                                                           C:\mort\Mort Code 08\code\gyro.c
                                           long vGyro1_angle;                                                               C:\mort\Mort Code 08\code\gyro.c
                                           long vGyro2_angle;                                                               C:\mort\Mort Code 08\code\gyro.c
                                           */                                                                               C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           long rate_correction_numerator;                                                  C:\mort\Mort Code 08\code\gyro.c
                                           long rate_correction_denominator;                                                C:\mort\Mort Code 08\code\gyro.c
                                           long angle_correction_numerator;                                                 C:\mort\Mort Code 08\code\gyro.c
                                           long angle_correction_denominator;                                               C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           unsigned char calc_gyro_bias;                                                    C:\mort\Mort Code 08\code\gyro.c
                                           unsigned long accumulator;                                                       C:\mort\Mort Code 08\code\gyro.c
                                           unsigned int Gyro_Queue[GYRO_QUEUE_SIZE];                                        C:\mort\Mort Code 08\code\gyro.c
                                           unsigned char Gyro_Bias_Status = GYRO_BIAS_NOT_DONE;                             C:\mort\Mort Code 08\code\gyro.c
                                           unsigned char Gyro_Queue_Index = 0;                                              C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	FUNCTION:		Initialize_Gyro()                                                   C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	PURPOSE:		Initializes the gyro code.                                           C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	CALLED FROM:	teleop.c/Initialization()                                         C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	COMMENTS:		Place "#include "gyro.h" in the includes section                    C:\mort\Mort Code 08\code\gyro.c
                                           *					of teleop.c then call Initialize_Gyro() in                                 C:\mort\Mort Code 08\code\gyro.c
                                           *					teleop.c/Initialization().                                                 C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *					After calling Initialize_Gyro(), gyro rate and angle                       C:\mort\Mort Code 08\code\gyro.c
                                           *					data will be meaningless until a gyro bias calculation                     C:\mort\Mort Code 08\code\gyro.c
                                           *					has taken place by calling Start_Gyro_Bias_Calc() and                      C:\mort\Mort Code 08\code\gyro.c
                                           *					Stop_Gyro_Bias_Calc().                                                     C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\gyro.c
                                           void Initialize_Gyro(void)                                                       C:\mort\Mort Code 08\code\gyro.c
                                           {                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           	// reset the heading angle to zero                                              C:\mort\Mort Code 08\code\gyro.c
003274   0100     MOVLB     0x0            	gyro_angle = 0;                                                                 C:\mort\Mort Code 08\code\gyro.c
003276   6b64     CLRF      0x64,0x1                                                                                        
003278   6b65     CLRF      0x65,0x1                                                                                        
00327a   6b66     CLRF      0x66,0x1                                                                                        
00327c   6b67     CLRF      0x67,0x1                                                                                        
                                           	/*                                                                              C:\mort\Mort Code 08\code\gyro.c
                                           	vGyro_base_angle = 0;                                                           C:\mort\Mort Code 08\code\gyro.c
                                               vGyro1_angle = 0;                                                            C:\mort\Mort Code 08\code\gyro.c
                                               vGyro2_angle = 0;                                                            C:\mort\Mort Code 08\code\gyro.c
                                               */                                                                           C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           	// reset the bias calculation flag                                              C:\mort\Mort Code 08\code\gyro.c
00327e   6b78     CLRF      0x78,0x1       	calc_gyro_bias = 0;                                                             C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           	// Calculate the gyro rate correction numerator and denominator                 C:\mort\Mort Code 08\code\gyro.c
003280   0ea0     MOVLW     0xa0           	rate_correction_numerator = GYRO_SENSITIVITY * 5L;                              C:\mort\Mort Code 08\code\gyro.c
003282   6f68     MOVWF     0x68,0x1                                                                                        
003284   0e0f     MOVLW     0xf                                                                                             
003286   6f69     MOVWF     0x69,0x1                                                                                        
003288   6b6a     CLRF      0x6a,0x1                                                                                        
00328a   6b6b     CLRF      0x6b,0x1                                                                                        
00328c   6b6c     CLRF      0x6c,0x1       	rate_correction_denominator = ADC_RANGE;                                        C:\mort\Mort Code 08\code\gyro.c
00328e   0e10     MOVLW     0x10                                                                                            
003290   6f6d     MOVWF     0x6d,0x1                                                                                        
003292   6b6e     CLRF      0x6e,0x1                                                                                        
003294   6b6f     CLRF      0x6f,0x1                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           	// Calculate the gyro angle correction numerator and denominator                C:\mort\Mort Code 08\code\gyro.c
                                           	// These equations are optimized versions of the commented out equations below  C:\mort\Mort Code 08\code\gyro.c
                                           	// correction_factor_numerator = (GYRO_SENSITIVITY * 5L);                       C:\mort\Mort Code 08\code\gyro.c
                                           	// correction_factor_denominator = (ADC_RANGE * ADC_UPDATE_RATE);               C:\mort\Mort Code 08\code\gyro.c
003296   0e90     MOVLW     0x90           	angle_correction_numerator = GYRO_SENSITIVITY / 2L;                             C:\mort\Mort Code 08\code\gyro.c
003298   6f70     MOVWF     0x70,0x1                                                                                        
00329a   0e01     MOVLW     0x1                                                                                             
00329c   6f71     MOVWF     0x71,0x1                                                                                        
00329e   6b72     CLRF      0x72,0x1                                                                                        
0032a0   6b73     CLRF      0x73,0x1                                                                                        
0032a2   0eaa     MOVLW     0xaa           	angle_correction_denominator = (ADC_RANGE * ADC_UPDATE_RATE / 10L);             C:\mort\Mort Code 08\code\gyro.c
0032a4   6f74     MOVWF     0x74,0x1                                                                                        
0032a6   0e6a     MOVLW     0x6a                                                                                            
0032a8   6f75     MOVWF     0x75,0x1                                                                                        
0032aa   6b76     CLRF      0x76,0x1                                                                                        
0032ac   6b77     CLRF      0x77,0x1                                                                                        
0032ae   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	FUNCTION:		Get_Gyro_Rate()                                                     C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	PURPOSE:		Returns the current heading angular rate of change.                  C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	RETURNS:		Signed integer with the current heading rate of change.              C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\gyro.c
0032b0   d954     RCALL     0x355a         int Get_Gyro_Rate(void)                                                          C:\mort\Mort Code 08\code\gyro.c
0032b2   0e04     MOVLW     0x4                                                                                             
0032b4   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           	long temp_rate;                                                                 C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           	// calculate the angular rate                                                   C:\mort\Mort Code 08\code\gyro.c
0032b6   c062     MOVFF     0x62,0x4       	temp_rate = ((long)gyro_rate * rate_correction_numerator) / rate_correction_denominator; C:\mort\Mort Code 08\code\gyro.c
0032b8   f004                                                                                                               
0032ba   c063     MOVFF     0x63,0x5                                                                                        
0032bc   f005                                                                                                               
0032be   6a06     CLRF      0x6,0x0                                                                                         
0032c0   6a07     CLRF      0x7,0x0                                                                                         
0032c2   ae05     BTFSS     0x5,0x7,0x0                                                                                     
0032c4   d002     BRA       0x32ca                                                                                          
0032c6   6806     SETF      0x6,0x0                                                                                         
0032c8   6807     SETF      0x7,0x0                                                                                         
0032ca   c004     MOVFF     0x4,0x30                                                                                        
0032cc   f030                                                                                                               
0032ce   c005     MOVFF     0x5,0x31                                                                                        
0032d0   f031                                                                                                               
0032d2   c006     MOVFF     0x6,0x32                                                                                        
0032d4   f032                                                                                                               
0032d6   c007     MOVFF     0x7,0x33                                                                                        
0032d8   f033                                                                                                               
0032da   c068     MOVFF     0x68,0x35                                                                                       
0032dc   f035                                                                                                               
0032de   c069     MOVFF     0x69,0x36                                                                                       
0032e0   f036                                                                                                               
0032e2   c06a     MOVFF     0x6a,0x37                                                                                       
0032e4   f037                                                                                                               
0032e6   c06b     MOVFF     0x6b,0x38                                                                                       
0032e8   f038                                                                                                               
0032ea   d92b     RCALL     0x3542                                                                                          
0032ec   c06c     MOVFF     0x6c,0x35                                                                                       
0032ee   f035                                                                                                               
0032f0   c06d     MOVFF     0x6d,0x36                                                                                       
0032f2   f036                                                                                                               
0032f4   c06e     MOVFF     0x6e,0x37                                                                                       
0032f6   f037                                                                                                               
0032f8   c06f     MOVFF     0x6f,0x38                                                                                       
0032fa   f038                                                                                                               
0032fc   d90e     RCALL     0x351a                                                                                          
00351a   d828     RCALL     0x356c                                                                                          
003542   ec48     CALL      0x4690,0x0                                                                                      
003544   f023                                                                                                               
003546   c02c     MOVFF     0x2c,0x0                                                                                        
003548   f000                                                                                                               
00354a   c02d     MOVFF     0x2d,0x1                                                                                        
00354c   f001                                                                                                               
00354e   c02e     MOVFF     0x2e,0x2                                                                                        
003550   f002                                                                                                               
003552   c02f     MOVFF     0x2f,0x3                                                                                        
003554   f003                                                                                                               
003556   efc3     GOTO      0x3586                                                                                          
003558   f01a                                                                                                               
00356c   ecbd     CALL      0x2f7a,0x0                                                                                      
00356e   f017                                                                                                               
003570   c030     MOVFF     0x30,0xfde                                                                                      
003572   ffde                                                                                                               
003574   c031     MOVFF     0x31,0xfde                                                                                      
003576   ffde                                                                                                               
003578   c032     MOVFF     0x32,0xfde                                                                                      
00357a   ffde                                                                                                               
00357c   c033     MOVFF     0x33,0xfdd                                                                                      
00357e   ffdd                                                                                                               
003580   52dd     MOVF      0xdd,0x1,0x0                                                                                    
003582   52dd     MOVF      0xdd,0x1,0x0                                                                                    
003584   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           	// apply the calibration factor                                                 C:\mort\Mort Code 08\code\gyro.c
00351c   cfd9     MOVFF     0xfd9,0xfe9    	temp_rate = temp_rate * GYRO_CAL_FACTOR;                                        C:\mort\Mort Code 08\code\gyro.c
00351e   ffe9                                                                                                               
003520   cfda     MOVFF     0xfda,0xfea                                                                                     
003522   ffea                                                                                                               
003524   cfee     MOVFF     0xfee,0x30                                                                                      
003526   f030                                                                                                               
003528   cfee     MOVFF     0xfee,0x31                                                                                      
00352a   f031                                                                                                               
00352c   cfee     MOVFF     0xfee,0x32                                                                                      
00352e   f032                                                                                                               
003530   cfef     MOVFF     0xfef,0x33                                                                                      
003532   f033                                                                                                               
003534   d831     RCALL     0x3598                                                                                          
003536   ec48     CALL      0x4690,0x0                                                                                      
003538   f023                                                                                                               
00353a   d825     RCALL     0x3586                                                                                          
00353c   d82d     RCALL     0x3598                                                                                          
00353e   efb6     GOTO      0x356c                                                                                          
003540   f01a                                                                                                               
003586   c02c     MOVFF     0x2c,0x30                                                                                       
003588   f030                                                                                                               
00358a   c02d     MOVFF     0x2d,0x31                                                                                       
00358c   f031                                                                                                               
00358e   c02e     MOVFF     0x2e,0x32                                                                                       
003590   f032                                                                                                               
003592   c02f     MOVFF     0x2f,0x33                                                                                       
003594   f033                                                                                                               
003596   0012     RETURN    0x0                                                                                             
003598   0ee8     MOVLW     0xe8                                                                                            
00359a   6e35     MOVWF     0x35,0x0                                                                                        
00359c   0e03     MOVLW     0x3                                                                                             
00359e   6e36     MOVWF     0x36,0x0                                                                                        
0035a0   6a37     CLRF      0x37,0x0                                                                                        
0035a2   6a38     CLRF      0x38,0x0                                                                                        
0035a4   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           	// return the calculated gyro rate to the caller.                               C:\mort\Mort Code 08\code\gyro.c
0032fe   cfdf     MOVFF     0xfdf,0x0      	return((int)temp_rate);                                                         C:\mort\Mort Code 08\code\gyro.c
003300   f000                                                                                                               
003302   0e01     MOVLW     0x1                                                                                             
003304   cfdb     MOVFF     0xfdb,0x1                                                                                       
003306   f001                                                                                                               
003308   c000     MOVFF     0x0,0xff3                                                                                       
00330a   fff3                                                                                                               
00330c   c001     MOVFF     0x1,0xff4                                                                                       
00330e   fff4                                                                                                               
003310   0e04     MOVLW     0x4            }                                                                                C:\mort\Mort Code 08\code\gyro.c
003312   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
003314   e202     BC        0x331a                                                                                          
003316   6ae1     CLRF      0xe1,0x0                                                                                        
003318   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00331a   6ee1     MOVWF     0xe1,0x0                                                                                        
00331c   d123     BRA       0x3564                                                                                          
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	FUNCTION:		Get_Gyro_Angle()                                                    C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	PURPOSE:		Returns the current heading angle.                                   C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	RETURNS:		Signed long with the current heading angle.                          C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\gyro.c
00331e   d91d     RCALL     0x355a         long Get_Gyro_Angle(void)                                                        C:\mort\Mort Code 08\code\gyro.c
003320   0e04     MOVLW     0x4                                                                                             
003322   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
00355a   cfd9     MOVFF     0xfd9,0xfe6                                                                                     
00355c   ffe6                                                                                                               
00355e   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003560   ffd9                                                                                                               
003562   0012     RETURN    0x0                                                                                             
                                           {                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           	long temp_angle;                                                                C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           	// calculate angle                                                              C:\mort\Mort Code 08\code\gyro.c
003324   c064     MOVFF     0x64,0x30      	temp_angle = (gyro_angle * angle_correction_numerator) / angle_correction_denominator; C:\mort\Mort Code 08\code\gyro.c
003326   f030                                                                                                               
003328   c065     MOVFF     0x65,0x31                                                                                       
00332a   f031                                                                                                               
00332c   c066     MOVFF     0x66,0x32                                                                                       
00332e   f032                                                                                                               
003330   c067     MOVFF     0x67,0x33                                                                                       
003332   f033                                                                                                               
003334   c070     MOVFF     0x70,0x35                                                                                       
003336   f035                                                                                                               
003338   c071     MOVFF     0x71,0x36                                                                                       
00333a   f036                                                                                                               
00333c   c072     MOVFF     0x72,0x37                                                                                       
00333e   f037                                                                                                               
003340   c073     MOVFF     0x73,0x38                                                                                       
003342   f038                                                                                                               
003344   d8fe     RCALL     0x3542                                                                                          
003346   c074     MOVFF     0x74,0x35                                                                                       
003348   f035                                                                                                               
00334a   c075     MOVFF     0x75,0x36                                                                                       
00334c   f036                                                                                                               
00334e   c076     MOVFF     0x76,0x37                                                                                       
003350   f037                                                                                                               
003352   c077     MOVFF     0x77,0x38                                                                                       
003354   f038                                                                                                               
003356   d8e1     RCALL     0x351a                                                                                          
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           	// apply the calibration factor                                                 C:\mort\Mort Code 08\code\gyro.c
                                           	temp_angle = temp_angle * GYRO_CAL_FACTOR;                                      C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           	// return the calculated gyro angle to the caller.                              C:\mort\Mort Code 08\code\gyro.c
003358   cfde     MOVFF     0xfde,0x30     	return(temp_angle);                                                             C:\mort\Mort Code 08\code\gyro.c
00335a   f030                                                                                                               
00335c   cfde     MOVFF     0xfde,0x31                                                                                      
00335e   f031                                                                                                               
003360   cfde     MOVFF     0xfde,0x32                                                                                      
003362   f032                                                                                                               
003364   cfdd     MOVFF     0xfdd,0x33                                                                                      
003366   f033                                                                                                               
003368   52dd     MOVF      0xdd,0x1,0x0                                                                                    
00336a   52dd     MOVF      0xdd,0x1,0x0                                                                                    
00336c   0e04     MOVLW     0x4            }                                                                                C:\mort\Mort Code 08\code\gyro.c
00336e   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
003370   e202     BC        0x3376                                                                                          
003372   6ae1     CLRF      0xe1,0x0                                                                                        
003374   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003376   6ee1     MOVWF     0xe1,0x0                                                                                        
003378   d0f5     BRA       0x3564                                                                                          
                                           /*                                                                               C:\mort\Mort Code 08\code\gyro.c
                                           long Get_vGyro_Angle_Handler (void)                                              C:\mort\Mort Code 08\code\gyro.c
                                           {                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           	long temp_angle;                                                                C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           	// calculate angle                                                              C:\mort\Mort Code 08\code\gyro.c
                                           	temp_angle = (vGyro_base_angle * angle_correction_numerator) / angle_correction_denominator; C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           	// apply the calibration factor                                                 C:\mort\Mort Code 08\code\gyro.c
                                           	temp_angle = temp_angle * GYRO_CAL_FACTOR;                                      C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           	// return the calculated gyro angle to the caller.                              C:\mort\Mort Code 08\code\gyro.c
                                           	return(temp_angle);                                                             C:\mort\Mort Code 08\code\gyro.c
                                           }                                                                                C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           long Get_vGyro1_Angle(void)                                                      C:\mort\Mort Code 08\code\gyro.c
                                           {                                                                                C:\mort\Mort Code 08\code\gyro.c
                                               return Get_vGyro_Angle_Handler() - vGyro1_angle;                             C:\mort\Mort Code 08\code\gyro.c
                                           }                                                                                C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           long Get_vGyro2_Angle(void)                                                      C:\mort\Mort Code 08\code\gyro.c
                                           {                                                                                C:\mort\Mort Code 08\code\gyro.c
                                               return Get_vGyro_Angle_Handler() - vGyro2_Angle;                             C:\mort\Mort Code 08\code\gyro.c
                                           }                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           */                                                                               C:\mort\Mort Code 08\code\gyro.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	FUNCTION:		Start_Gyro_Bias_Calc()                                              C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	PURPOSE:		Starts an ongoing gyro bias calculation.                             C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	CALLED FROM:	disabled.c/Disabled_Init()                                        C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	COMMENTS:		IMPORTANT NOTE: Only call this function when your                   C:\mort\Mort Code 08\code\gyro.c
                                           *					robot will be absolutely still and free of vibration                       C:\mort\Mort Code 08\code\gyro.c
                                           *					(e.g., the air compressor is off) until the call to                        C:\mort\Mort Code 08\code\gyro.c
                                           *					Stop_Gyro_Bias_Calc() is made.                                             C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\gyro.c
                                           void Start_Gyro_Bias_Calc(void)                                                  C:\mort\Mort Code 08\code\gyro.c
                                           {                                                                                C:\mort\Mort Code 08\code\gyro.c
00337a   0100     MOVLB     0x0            	if(calc_gyro_bias == 0)                                                         C:\mort\Mort Code 08\code\gyro.c
00337c   5178     MOVF      0x78,0x0,0x1                                                                                    
00337e   e10a     BNZ       0x3394                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\gyro.c
                                           		// clear the accumulator for later use by Stop_Gyro_Bias_Calc()                C:\mort\Mort Code 08\code\gyro.c
003380   6b79     CLRF      0x79,0x1       		accumulator = 0L;                                                              C:\mort\Mort Code 08\code\gyro.c
003382   6b7a     CLRF      0x7a,0x1                                                                                        
003384   6b7b     CLRF      0x7b,0x1                                                                                        
003386   6b7c     CLRF      0x7c,0x1                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           		// reset the circular queue index                                              C:\mort\Mort Code 08\code\gyro.c
003388   0103     MOVLB     0x3            		Gyro_Queue_Index = 0;                                                          C:\mort\Mort Code 08\code\gyro.c
00338a   6b34     CLRF      0x34,0x1                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           		// update the gyro bias status                                                 C:\mort\Mort Code 08\code\gyro.c
00338c   0e01     MOVLW     0x1            		Gyro_Bias_Status = GYRO_BIAS_IN_PROCESS;                                       C:\mort\Mort Code 08\code\gyro.c
00338e   6f33     MOVWF     0x33,0x1                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           		// set flag informing the Process_Gyro_Data()                                  C:\mort\Mort Code 08\code\gyro.c
                                           		// function to start a gyro bias calculation                                   C:\mort\Mort Code 08\code\gyro.c
003390   0100     MOVLB     0x0            		calc_gyro_bias = 1;                                                            C:\mort\Mort Code 08\code\gyro.c
003392   6f78     MOVWF     0x78,0x1                                                                                        
                                           	}                                                                               C:\mort\Mort Code 08\code\gyro.c
003394   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	FUNCTION:		Stop_Gyro_Bias_Calc()                                               C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	PURPOSE:		Ends the current ongoing gyro bias calculation                       C:\mort\Mort Code 08\code\gyro.c
                                           *					and updates the internal gyro_bias variable.                               C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	CALLED FROM:	autonomous.c/Autonomous_Init()                                    C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\gyro.c
003396   d8e1     RCALL     0x355a         void Stop_Gyro_Bias_Calc(void)                                                   C:\mort\Mort Code 08\code\gyro.c
003398   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           	unsigned char i;                                                                C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
00339a   0100     MOVLB     0x0            	if(calc_gyro_bias == 1)                                                         C:\mort\Mort Code 08\code\gyro.c
00339c   0578     DECF      0x78,0x0,0x1                                                                                    
00339e   e12f     BNZ       0x33fe                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\gyro.c
                                           		// add the contents of the circular queue together                             C:\mort\Mort Code 08\code\gyro.c
0033a0   6adf     CLRF      0xdf,0x0       		for(i=0; i<GYRO_QUEUE_SIZE; i++)                                               C:\mort\Mort Code 08\code\gyro.c
0033a2   0e40     MOVLW     0x40                                                                                            
0033a4   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0033a6   e21a     BC        0x33dc                                                                                          
0033d8   2adf     INCF      0xdf,0x1,0x0                                                                                    
0033da   d7e3     BRA       0x33a2                                                                                          
                                           		{                                                                              C:\mort\Mort Code 08\code\gyro.c
0033a8   6aea     CLRF      0xea,0x0       			accumulator += Gyro_Queue[i];                                                 C:\mort\Mort Code 08\code\gyro.c
0033aa   34df     RLCF      0xdf,0x0,0x0                                                                                    
0033ac   0bfe     ANDLW     0xfe                                                                                            
0033ae   36ea     RLCF      0xea,0x1,0x0                                                                                    
0033b0   6ee9     MOVWF     0xe9,0x0                                                                                        
0033b2   0e7d     MOVLW     0x7d                                                                                            
0033b4   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
0033b6   0e00     MOVLW     0x0                                                                                             
0033b8   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0033ba   cfee     MOVFF     0xfee,0x0                                                                                       
0033bc   f000                                                                                                               
0033be   cfef     MOVFF     0xfef,0x1                                                                                       
0033c0   f001                                                                                                               
0033c2   0100     MOVLB     0x0                                                                                             
0033c4   5000     MOVF      0x0,0x0,0x0                                                                                     
0033c6   0100     MOVLB     0x0                                                                                             
0033c8   2779     ADDWF     0x79,0x1,0x1                                                                                    
0033ca   0100     MOVLB     0x0                                                                                             
0033cc   5001     MOVF      0x1,0x0,0x0                                                                                     
0033ce   0100     MOVLB     0x0                                                                                             
0033d0   237a     ADDWFC    0x7a,0x1,0x1                                                                                    
0033d2   0e00     MOVLW     0x0                                                                                             
0033d4   237b     ADDWFC    0x7b,0x1,0x1                                                                                    
0033d6   237c     ADDWFC    0x7c,0x1,0x1                                                                                    
                                           		}                                                                              C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           		// this is the same as dividing the accumulator by                             C:\mort\Mort Code 08\code\gyro.c
                                           		// the number of samples to derive an average value                            C:\mort\Mort Code 08\code\gyro.c
0033dc   0e06     MOVLW     0x6            		accumulator >>= GYRO_QUEUE_SIZE_EXPONENT;                                      C:\mort\Mort Code 08\code\gyro.c
0033de   90d8     BCF       0xd8,0x0,0x0                                                                                    
0033e0   337c     RRCF      0x7c,0x1,0x1                                                                                    
0033e2   337b     RRCF      0x7b,0x1,0x1                                                                                    
0033e4   337a     RRCF      0x7a,0x1,0x1                                                                                    
0033e6   3379     RRCF      0x79,0x1,0x1                                                                                    
0033e8   06e8     DECF      0xe8,0x1,0x0                                                                                    
0033ea   e1f9     BNZ       0x33de                                                                                          
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           		// convert the result to an integer and save                                   C:\mort\Mort Code 08\code\gyro.c
0033ec   c079     MOVFF     0x79,0x60      		gyro_bias = (int)accumulator;                                                  C:\mort\Mort Code 08\code\gyro.c
0033ee   f060                                                                                                               
0033f0   c07a     MOVFF     0x7a,0x61                                                                                       
0033f2   f061                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           		// update the gyro bias status                                                 C:\mort\Mort Code 08\code\gyro.c
0033f4   0103     MOVLB     0x3            		Gyro_Bias_Status = GYRO_BIAS_READY;                                            C:\mort\Mort Code 08\code\gyro.c
0033f6   0e04     MOVLW     0x4                                                                                             
0033f8   6f33     MOVWF     0x33,0x1                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           		// inform Process_Gyro_Data() function that                                    C:\mort\Mort Code 08\code\gyro.c
                                           		// the ongoing bias calculation needs to stop                                  C:\mort\Mort Code 08\code\gyro.c
0033fa   0100     MOVLB     0x0            		calc_gyro_bias = 0;                                                            C:\mort\Mort Code 08\code\gyro.c
0033fc   6b78     CLRF      0x78,0x1                                                                                        
                                           	}                                                                               C:\mort\Mort Code 08\code\gyro.c
0033fe   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\mort\Mort Code 08\code\gyro.c
003400   d0b1     BRA       0x3564                                                                                          
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	FUNCTION:		Get_Gyro_Bias_Status()                                              C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	PURPOSE:		Returns status of a gyro bias calculation.                           C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	RETURNS:		GYRO_BIAS_NOT_DONE if a gyro bias has not been calculated.           C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *					GYRO_BIAS_IN_PROCESS after Start_Gyro_Bias_Calc() has been                 C:\mort\Mort Code 08\code\gyro.c
                                           *					called and data is being collected                                         C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *					GYRO_BIAS_BUFFER_FULL if the circular buffer is full,                      C:\mort\Mort Code 08\code\gyro.c
                                           *					indicating that it is safe to call Stop_Gyro_Bias_Calc().                  C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *					GYRO_BIAS_READY if a gyro bias has been calculated.                        C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\gyro.c
                                           unsigned char Get_Gyro_Bias_Status(void)                                         C:\mort\Mort Code 08\code\gyro.c
                                           {                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           	// return bias calculation status                                               C:\mort\Mort Code 08\code\gyro.c
003402   0103     MOVLB     0x3            	return(Gyro_Bias_Status);                                                       C:\mort\Mort Code 08\code\gyro.c
003404   5133     MOVF      0x33,0x0,0x1                                                                                    
003406   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	FUNCTION:		Get_Gyro_Bias()                                                     C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	PURPOSE:		Returns the current gyro bias.                                       C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	RETURNS:		Signed integer with the current gyro bias.                           C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\gyro.c
                                           int Get_Gyro_Bias(void)                                                          C:\mort\Mort Code 08\code\gyro.c
                                           {                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           	// return the gyro bias to the caller                                           C:\mort\Mort Code 08\code\gyro.c
003408   c060     MOVFF     0x60,0xff3     	return(gyro_bias);                                                              C:\mort\Mort Code 08\code\gyro.c
00340a   fff3                                                                                                               
00340c   c061     MOVFF     0x61,0xff4                                                                                      
00340e   fff4                                                                                                               
003410   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	FUNCTION:		Set_Gyro_Bias()                                                     C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	PURPOSE:		Manually sets the gyro bias.                                         C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\gyro.c
003412   d8a3     RCALL     0x355a         void Set_Gyro_Bias(int new_gyro_bias)                                            C:\mort\Mort Code 08\code\gyro.c
                                           {                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           	// update gyro_bias                                                             C:\mort\Mort Code 08\code\gyro.c
003414   0efd     MOVLW     0xfd           	gyro_bias = new_gyro_bias;                                                      C:\mort\Mort Code 08\code\gyro.c
003416   cfdb     MOVFF     0xfdb,0x60                                                                                      
003418   f060                                                                                                               
00341a   0efe     MOVLW     0xfe                                                                                            
00341c   cfdb     MOVFF     0xfdb,0x61                                                                                      
00341e   f061                                                                                                               
003420   d0a1     BRA       0x3564         }                                                                                C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	FUNCTION:		Reset_Gyro_Angle()                                                  C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	PURPOSE:		Resets the heading angle to zero.                                    C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\gyro.c
                                           void Reset_Gyro_Angle(void)                                                      C:\mort\Mort Code 08\code\gyro.c
                                           {                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           	// zero out gyro_angle                                                          C:\mort\Mort Code 08\code\gyro.c
003422   0100     MOVLB     0x0            	gyro_angle = 0L;                                                                C:\mort\Mort Code 08\code\gyro.c
003424   6b64     CLRF      0x64,0x1                                                                                        
003426   6b65     CLRF      0x65,0x1                                                                                        
003428   6b66     CLRF      0x66,0x1                                                                                        
00342a   6b67     CLRF      0x67,0x1                                                                                        
00342c   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           /*                                                                               C:\mort\Mort Code 08\code\gyro.c
                                           void Reset_VGyro1_Angle(void)                                                    C:\mort\Mort Code 08\code\gyro.c
                                           {                                                                                C:\mort\Mort Code 08\code\gyro.c
                                               vGyro1_angle = ;                                                             C:\mort\Mort Code 08\code\gyro.c
                                           }                                                                                C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           void Reset_VGyro1_Angle(void)                                                    C:\mort\Mort Code 08\code\gyro.c
                                           {                                                                                C:\mort\Mort Code 08\code\gyro.c
                                               vGyro2_angle = 0L;                                                           C:\mort\Mort Code 08\code\gyro.c
                                           }                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           */                                                                               C:\mort\Mort Code 08\code\gyro.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	FUNCTION:		Process_Gyro_Data()                                                 C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	PURPOSE:		Manages ADC data and does gyro rate integration                      C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	CALLED FROM:	ifi_frc.c/Disabled_Spin(),                                        C:\mort\Mort Code 08\code\gyro.c
                                           *					ifi_frc.c/Autonomous_Spin(),                                               C:\mort\Mort Code 08\code\gyro.c
                                           *					ifi_frc.c/Teleop_Spin()                                                    C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	PARAMETERS:		Unsigned char with a value of zero will prevent this              C:\mort\Mort Code 08\code\gyro.c
                                           *					function from calling Reset_ADC_Result_Count() when                        C:\mort\Mort Code 08\code\gyro.c
                                           *					ADC data has been processed. If you do use this mode                       C:\mort\Mort Code 08\code\gyro.c
                                           *					of operation you must call Reset_ADC_Result_Count()                        C:\mort\Mort Code 08\code\gyro.c
                                           *					from your own code. Failure to do this will cause                          C:\mort\Mort Code 08\code\gyro.c
                                           *					the gyro to stop functioning.                                              C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\gyro.c
                                           *                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\gyro.c
00342e   d895     RCALL     0x355a         void Process_Gyro_Data(unsigned char Reset_ADC_Count)                            C:\mort\Mort Code 08\code\gyro.c
003430   0e02     MOVLW     0x2                                                                                             
003432   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\mort\Mort Code 08\code\gyro.c
                                           	int temp_gyro_rate;                                                             C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           	// fresh ADC data available?                                                    C:\mort\Mort Code 08\code\gyro.c
003434   ec27     CALL      0x3a4e,0x0     	if(Get_ADC_Result_Count())                                                      C:\mort\Mort Code 08\code\gyro.c
003436   f01d                                                                                                               
003438   0900     IORLW     0x0                                                                                             
00343a   e068     BZ        0x350c                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\gyro.c
                                           		// should the completed sample set be used to calculate the gyro bias?         C:\mort\Mort Code 08\code\gyro.c
00343c   0100     MOVLB     0x0            		if(calc_gyro_bias == 1)                                                        C:\mort\Mort Code 08\code\gyro.c
00343e   0578     DECF      0x78,0x0,0x1                                                                                    
003440   e121     BNZ       0x3484                                                                                          
                                           		{                                                                              C:\mort\Mort Code 08\code\gyro.c
                                           			// put the ADC reading on the circular queue                                  C:\mort\Mort Code 08\code\gyro.c
003442   0e06     MOVLW     0x6            			Gyro_Queue[Gyro_Queue_Index] = Get_ADC_Result(GYRO_CHANNEL);                  C:\mort\Mort Code 08\code\gyro.c
003444   6ee6     MOVWF     0xe6,0x0                                                                                        
003446   ecc2     CALL      0x3984,0x0                                                                                      
003448   f01c                                                                                                               
00344a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00344c   cff3     MOVFF     0xff3,0x0                                                                                       
00344e   f000                                                                                                               
003450   cff4     MOVFF     0xff4,0x1                                                                                       
003452   f001                                                                                                               
003454   0103     MOVLB     0x3                                                                                             
003456   5134     MOVF      0x34,0x0,0x1                                                                                    
003458   6ee9     MOVWF     0xe9,0x0                                                                                        
00345a   6aea     CLRF      0xea,0x0                                                                                        
00345c   90d8     BCF       0xd8,0x0,0x0                                                                                    
00345e   36e9     RLCF      0xe9,0x1,0x0                                                                                    
003460   36ea     RLCF      0xea,0x1,0x0                                                                                    
003462   0e7d     MOVLW     0x7d                                                                                            
003464   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
003466   0e00     MOVLW     0x0                                                                                             
003468   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00346a   cff3     MOVFF     0xff3,0xfee                                                                                     
00346c   ffee                                                                                                               
00346e   c001     MOVFF     0x1,0xfed                                                                                       
003470   ffed                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           			// increment the write pointer                                                C:\mort\Mort Code 08\code\gyro.c
003472   2b34     INCF      0x34,0x1,0x1   			Gyro_Queue_Index++;                                                           C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           			// is the circular queue now full?                                            C:\mort\Mort Code 08\code\gyro.c
003474   0e3f     MOVLW     0x3f           			if(Gyro_Queue_Index == GYRO_QUEUE_SIZE-1)                                     C:\mort\Mort Code 08\code\gyro.c
003476   5d34     SUBWF     0x34,0x0,0x1                                                                                    
003478   e102     BNZ       0x347e                                                                                          
                                           			{                                                                             C:\mort\Mort Code 08\code\gyro.c
                                           				// update the gyro bias status                                               C:\mort\Mort Code 08\code\gyro.c
00347a   0e02     MOVLW     0x2            				Gyro_Bias_Status = GYRO_BIAS_BUFFER_FULL;                                    C:\mort\Mort Code 08\code\gyro.c
00347c   6f33     MOVWF     0x33,0x1                                                                                        
                                           			}                                                                             C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           			// If the index pointer overflowed, cut-off the high-order bit. Doing this    C:\mort\Mort Code 08\code\gyro.c
                                           			// every time is quicker than checking for overflow every time with an if()   C:\mort\Mort Code 08\code\gyro.c
                                           			// statement and only then occasionally setting it back to zero. For this     C:\mort\Mort Code 08\code\gyro.c
                                           			// to work, the queue size must be a power of 2 (e.g., 16,32,64,128).         C:\mort\Mort Code 08\code\gyro.c
00347e   0e3f     MOVLW     0x3f           			Gyro_Queue_Index &= GYRO_QUEUE_INDEX_MASK;                                    C:\mort\Mort Code 08\code\gyro.c
003480   1734     ANDWF     0x34,0x1,0x1                                                                                    
                                           		}                                                                              C:\mort\Mort Code 08\code\gyro.c
003482   d03f     BRA       0x3502         		else                                                                           C:\mort\Mort Code 08\code\gyro.c
                                           		{                                                                              C:\mort\Mort Code 08\code\gyro.c
                                           			// get the latest measured gyro rate                                          C:\mort\Mort Code 08\code\gyro.c
003484   0e06     MOVLW     0x6            			temp_gyro_rate = (int)Get_ADC_Result(GYRO_CHANNEL) - gyro_bias;               C:\mort\Mort Code 08\code\gyro.c
003486   6ee6     MOVWF     0xe6,0x0                                                                                        
003488   ecc2     CALL      0x3984,0x0                                                                                      
00348a   f01c                                                                                                               
00348c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00348e   0100     MOVLB     0x0                                                                                             
003490   5160     MOVF      0x60,0x0,0x1                                                                                    
003492   5cf3     SUBWF     0xf3,0x0,0x0                                                                                    
003494   6e00     MOVWF     0x0,0x0                                                                                         
003496   5161     MOVF      0x61,0x0,0x1                                                                                    
003498   58f4     SUBWFB    0xf4,0x0,0x0                                                                                    
00349a   6e01     MOVWF     0x1,0x0                                                                                         
00349c   c000     MOVFF     0x0,0xfde                                                                                       
00349e   ffde                                                                                                               
0034a0   6edd     MOVWF     0xdd,0x0                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           			// update reported gyro rate and angle only if                                C:\mort\Mort Code 08\code\gyro.c
                                           			// measured gyro rate lies outside the deadband                               C:\mort\Mort Code 08\code\gyro.c
0034a2   cfde     MOVFF     0xfde,0x0      			if(temp_gyro_rate < -GYRO_DEADBAND || temp_gyro_rate > GYRO_DEADBAND)         C:\mort\Mort Code 08\code\gyro.c
0034a4   f000                                                                                                               
0034a6   cfdd     MOVFF     0xfdd,0x1                                                                                       
0034a8   f001                                                                                                               
0034aa   80d8     BSF       0xd8,0x0,0x0                                                                                    
0034ac   5001     MOVF      0x1,0x0,0x0                                                                                     
0034ae   e704     BNN       0x34b8                                                                                          
0034b0   0ef8     MOVLW     0xf8                                                                                            
0034b2   5c00     SUBWF     0x0,0x0,0x0                                                                                     
0034b4   0eff     MOVLW     0xff                                                                                            
0034b6   5801     SUBWFB    0x1,0x0,0x0                                                                                     
0034b8   e30b     BNC       0x34d0                                                                                          
0034ba   cfde     MOVFF     0xfde,0x2                                                                                       
0034bc   f002                                                                                                               
0034be   cfdd     MOVFF     0xfdd,0x3                                                                                       
0034c0   f003                                                                                                               
0034c2   3403     RLCF      0x3,0x0,0x0                                                                                     
0034c4   e21c     BC        0x34fe                                                                                          
0034c6   5002     MOVF      0x2,0x0,0x0                                                                                     
0034c8   0808     SUBLW     0x8                                                                                             
0034ca   0e00     MOVLW     0x0                                                                                             
0034cc   5403     SUBFWB    0x3,0x0,0x0                                                                                     
0034ce   e217     BC        0x34fe                                                                                          
                                           			{                                                                             C:\mort\Mort Code 08\code\gyro.c
                                           				// update the gyro rate                                                      C:\mort\Mort Code 08\code\gyro.c
0034d0   cfde     MOVFF     0xfde,0x62     				gyro_rate = temp_gyro_rate;                                                  C:\mort\Mort Code 08\code\gyro.c
0034d2   f062                                                                                                               
0034d4   cfdd     MOVFF     0xfdd,0x63                                                                                      
0034d6   f063                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                           				// integrate the gyro rate to derive the heading                             C:\mort\Mort Code 08\code\gyro.c
0034d8   cfde     MOVFF     0xfde,0x0      				gyro_angle += (long)temp_gyro_rate;                                          C:\mort\Mort Code 08\code\gyro.c
0034da   f000                                                                                                               
0034dc   cfdd     MOVFF     0xfdd,0x1                                                                                       
0034de   f001                                                                                                               
0034e0   6a02     CLRF      0x2,0x0                                                                                         
0034e2   6a03     CLRF      0x3,0x0                                                                                         
0034e4   ae01     BTFSS     0x1,0x7,0x0                                                                                     
0034e6   d002     BRA       0x34ec                                                                                          
0034e8   6802     SETF      0x2,0x0                                                                                         
0034ea   6803     SETF      0x3,0x0                                                                                         
0034ec   5000     MOVF      0x0,0x0,0x0                                                                                     
0034ee   2764     ADDWF     0x64,0x1,0x1                                                                                    
0034f0   5001     MOVF      0x1,0x0,0x0                                                                                     
0034f2   2365     ADDWFC    0x65,0x1,0x1                                                                                    
0034f4   5002     MOVF      0x2,0x0,0x0                                                                                     
0034f6   2366     ADDWFC    0x66,0x1,0x1                                                                                    
0034f8   5003     MOVF      0x3,0x0,0x0                                                                                     
0034fa   2367     ADDWFC    0x67,0x1,0x1                                                                                    
                                           			}                                                                             C:\mort\Mort Code 08\code\gyro.c
0034fc   d002     BRA       0x3502         			else                                                                          C:\mort\Mort Code 08\code\gyro.c
                                           			{                                                                             C:\mort\Mort Code 08\code\gyro.c
0034fe   6b62     CLRF      0x62,0x1       				gyro_rate = 0;                                                               C:\mort\Mort Code 08\code\gyro.c
003500   6b63     CLRF      0x63,0x1                                                                                        
                                           			}                                                                             C:\mort\Mort Code 08\code\gyro.c
                                           		}                                                                              C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
003502   0efe     MOVLW     0xfe           		if(Reset_ADC_Count)                                                            C:\mort\Mort Code 08\code\gyro.c
003504   50db     MOVF      0xdb,0x0,0x0                                                                                    
003506   e002     BZ        0x350c                                                                                          
                                           		{                                                                              C:\mort\Mort Code 08\code\gyro.c
003508   ec30     CALL      0x3a60,0x0     			Reset_ADC_Result_Count();                                                     C:\mort\Mort Code 08\code\gyro.c
00350a   f01d                                                                                                               
                                           		}                                                                              C:\mort\Mort Code 08\code\gyro.c
                                           	}                                                                               C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
                                                                                                                            C:\mort\Mort Code 08\code\gyro.c
00350c   0e02     MOVLW     0x2            }                                                                                C:\mort\Mort Code 08\code\gyro.c
00350e   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
003510   e202     BC        0x3516                                                                                          
003512   6ae1     CLRF      0xe1,0x0                                                                                        
003514   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003516   6ee1     MOVWF     0xe1,0x0                                                                                        
003518   d025     BRA       0x3564                                                                                          
003564   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003566   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003568   ffd9                                                                                                               
00356a   0012     RETURN    0x0                                                                                             
                                           /******************************************************************************* C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	TITLE:		interrupts.c                                                           C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	VERSION:	0.3 (Beta)                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	DATE:		03-Jan-2008                                                             C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	AUTHOR:		R. Kevin Watson                                                       C:\mort\Mort Code 08\code\interrupts.c
                                           *				kevinw@jpl.nasa.gov                                                         C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	COMMENTS:	This file contains template interrupt initialization & handling      C:\mort\Mort Code 08\code\interrupts.c
                                           *				code for the IFI FRC robot controller.                                      C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *				This version is compatible with Microchip C18 3.0+ only.                    C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *               This file best viewed with tabs set to four.                     C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *				You are free to use this source code for any non-commercial                 C:\mort\Mort Code 08\code\interrupts.c
                                           *				use. Please do not make copies of this source code, modified                C:\mort\Mort Code 08\code\interrupts.c
                                           *				or un-modified, publicly available on the internet or elsewhere             C:\mort\Mort Code 08\code\interrupts.c
                                           *				without permission. Thanks.                                                 C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *				Copyright ©2004-2008 R. Kevin Watson. All rights are reserved.              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           ******************************************************************************** C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	CHANGE LOG:                                                                    C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	DATE         REV  DESCRIPTION                                                  C:\mort\Mort Code 08\code\interrupts.c
                                           *	-----------  ---  ----------------------------------------------------------   C:\mort\Mort Code 08\code\interrupts.c
                                           *	22-Dec-2003  0.1  RKW Original                                                 C:\mort\Mort Code 08\code\interrupts.c
                                           *	25-Feb-2004  0.2  RKW - Added the ability to clear the interrupt flag before   C:\mort\Mort Code 08\code\interrupts.c
                                           *	                  enabling the interrupt.                                      C:\mort\Mort Code 08\code\interrupts.c
                                           *	03-Jan-2008  0.3  RKW - Renamed all ISRs for consistancy across all            C:\mort\Mort Code 08\code\interrupts.c
                                           *	                  modules of the new robot controller code.                    C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\interrupts.c
                                                                                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           #include "ifi_frc.h"                                                             C:\mort\Mort Code 08\code\interrupts.c
                                           #include "pwm.h"                                                                 C:\mort\Mort Code 08\code\interrupts.c
                                           #include "timers.h"                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           #include "interrupts.h"                                                          C:\mort\Mort Code 08\code\interrupts.c
                                           #include "encoder.h"                                                             C:\mort\Mort Code 08\code\interrupts.c
                                           #include "serial_ports.h"                                                        C:\mort\Mort Code 08\code\interrupts.c
                                           #include "teleop.h"                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           #include "autonomous.h"                                                          C:\mort\Mort Code 08\code\interrupts.c
                                           #include "disabled.h"                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           #include "mort_defines.h"                                                        C:\mort\Mort Code 08\code\interrupts.c
                                                                                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           extern unsigned char volatile Old_Port_B;                                        C:\mort\Mort Code 08\code\interrupts.c
                                                                                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	FUNCTION:		Initialize_Int_1()                                                  C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PURPOSE:		Initializes interrupt 1                                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	CALLED FROM:	main.c/Initialization()                                           C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\interrupts.c
                                           #ifdef ENABLE_INT_1_ISR                                                          C:\mort\Mort Code 08\code\interrupts.c
                                           void Initialize_Int_1(void)                                                      C:\mort\Mort Code 08\code\interrupts.c
                                           {                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           	// initialize external interrupt 1 (INT2 on user 18F8520/18F8722)               C:\mort\Mort Code 08\code\interrupts.c
                                                                                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           	TRISBbits.TRISB2 = 1;		// make sure the RB2/INT2 pin is configured as an input  C:\mort\Mort Code 08\code\interrupts.c
                                           								//                                                                       C:\mort\Mort Code 08\code\interrupts.c
                                           	INTCON3bits.INT2IP = 0;		// 0: interrupt 1 is low priority (leave at 0 for IFI controllers) C:\mort\Mort Code 08\code\interrupts.c
                                           								// 1: interrupt 1 is high priority                                       C:\mort\Mort Code 08\code\interrupts.c
                                           								//                                                                       C:\mort\Mort Code 08\code\interrupts.c
                                           	INTCON2bits.INTEDG2 = 1;	// 0: trigger on the falling-edge                      C:\mort\Mort Code 08\code\interrupts.c
                                           								// 1: trigger on the rising-edge                                         C:\mort\Mort Code 08\code\interrupts.c
                                           								//                                                                       C:\mort\Mort Code 08\code\interrupts.c
                                           	INTCON3bits.INT2IF = 0;		// 0: external interrupt 1 hasn't happened (set to 0 before enabling the interrupt) C:\mort\Mort Code 08\code\interrupts.c
                                           								// 1: external interrupt 1 has happened                                  C:\mort\Mort Code 08\code\interrupts.c
                                           								//                                                                       C:\mort\Mort Code 08\code\interrupts.c
                                           	INTCON3bits.INT2IE = 1;		// 0: disable interrupt	1                              C:\mort\Mort Code 08\code\interrupts.c
                                           								// 1: enable interrupt 1                                                 C:\mort\Mort Code 08\code\interrupts.c
                                           }                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\interrupts.c
                                                                                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	FUNCTION:		Initialize_Int_2()                                                  C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PURPOSE:		Initializes interrupt 2                                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	CALLED FROM:	main.c/Initialization()                                           C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\interrupts.c
                                           #ifdef ENABLE_INT_2_ISR                                                          C:\mort\Mort Code 08\code\interrupts.c
                                           void Initialize_Int_2(void)                                                      C:\mort\Mort Code 08\code\interrupts.c
                                           {                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           	// initialize external interrupt 2 (INT3 on user 18F8520/18F8722)               C:\mort\Mort Code 08\code\interrupts.c
                                           	TRISBbits.TRISB3 = 1;		// make sure the RB3/CCP2/INT3 pin is configured as an input C:\mort\Mort Code 08\code\interrupts.c
                                           								//                                                                       C:\mort\Mort Code 08\code\interrupts.c
                                           	INTCON2bits.INT3IP = 0;		// 0: interrupt 2 is low priority (leave at 0 for IFI controllers) C:\mort\Mort Code 08\code\interrupts.c
                                           								// 1: interrupt 2 is high priority                                       C:\mort\Mort Code 08\code\interrupts.c
                                           								//                                                                       C:\mort\Mort Code 08\code\interrupts.c
                                           	INTCON2bits.INTEDG3 = 1;	// 0: trigger on the falling-edge                      C:\mort\Mort Code 08\code\interrupts.c
                                           								// 1: trigger on the rising-edge                                         C:\mort\Mort Code 08\code\interrupts.c
                                           								//                                                                       C:\mort\Mort Code 08\code\interrupts.c
                                           	INTCON3bits.INT3IF = 0;		// 0: external interrupt 2 hasn't happened (set to 0 before enabling the interrupt) C:\mort\Mort Code 08\code\interrupts.c
                                           								// 1: external interrupt 2 has happened                                  C:\mort\Mort Code 08\code\interrupts.c
                                           								//                                                                       C:\mort\Mort Code 08\code\interrupts.c
                                           	INTCON3bits.INT3IE = 1;		// 0: disable interrupt	2                              C:\mort\Mort Code 08\code\interrupts.c
                                           								// 1: enable interrupt 2                                                 C:\mort\Mort Code 08\code\interrupts.c
                                           }                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\interrupts.c
                                                                                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	FUNCTION:		Initialize_Int_3_6()                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PURPOSE:		Initializes interrupts 3 through 6                                   C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	CALLED FROM:	main.c/Initialization()                                           C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\interrupts.c
                                           #ifdef ENABLE_INT_3_6_ISR                                                        C:\mort\Mort Code 08\code\interrupts.c
                                           void Initialize_Int_3_6(void)                                                    C:\mort\Mort Code 08\code\interrupts.c
                                           {                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           	// initialize external interrupts 3-6 (KBI0 - KBI3 on user 18F8520/18F8722)     C:\mort\Mort Code 08\code\interrupts.c
                                           	TRISBbits.TRISB4 = 1;		// make sure the RB4/HBI0 pin is configured as an input  C:\mort\Mort Code 08\code\interrupts.c
                                           	TRISBbits.TRISB5 = 1;		// make sure the RB5/KBI1/PGM pin is configured as an input C:\mort\Mort Code 08\code\interrupts.c
                                           	TRISBbits.TRISB6 = 1;		// make sure the RB6/KBI2/PGC pin is configured as an input C:\mort\Mort Code 08\code\interrupts.c
                                           	TRISBbits.TRISB7 = 1;		// make sure the RB7/KBI3/PGD pin is configured as an input C:\mort\Mort Code 08\code\interrupts.c
                                           								//                                                                       C:\mort\Mort Code 08\code\interrupts.c
                                             	INTCON2bits.RBIP = 0;		// 0: interrupts 3-6 are low priority (leave at 0 for IFI controllers) C:\mort\Mort Code 08\code\interrupts.c
                                           								// 1: interrupts 3-6 are high priority                                   C:\mort\Mort Code 08\code\interrupts.c
                                           								//                                                                       C:\mort\Mort Code 08\code\interrupts.c
                                           	INTCONbits.RBIF = 0;		// 0: none of the interrupt 3-6 pins has changed state (set to 0 before enabling the interrupts) C:\mort\Mort Code 08\code\interrupts.c
                                           								// 1: at least one of the interrupt 3-6 pins has changed state           C:\mort\Mort Code 08\code\interrupts.c
                                           								//                                                                       C:\mort\Mort Code 08\code\interrupts.c
                                           	INTCONbits.RBIE = 1;		// 0: disable interrupts 3-6                              C:\mort\Mort Code 08\code\interrupts.c
                                           								// 1: enable interrupts 3-6                                              C:\mort\Mort Code 08\code\interrupts.c
                                           }                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\interrupts.c
                                                                                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	FUNCTION:		Int_1_ISR()                                                         C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PURPOSE:		If enabled, the interrupt 1 handler is called when the               C:\mort\Mort Code 08\code\interrupts.c
                                           *					interrupt 1/digital input 1 pin changes logic level. The                   C:\mort\Mort Code 08\code\interrupts.c
                                           *					edge that the interrupt 1 pin reacts to is programmable                    C:\mort\Mort Code 08\code\interrupts.c
                                           *					(see comments in the Initialize_Interrupts() function,                     C:\mort\Mort Code 08\code\interrupts.c
                                           *					above).                                                                    C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	CALLED FROM:	ifi_frc.c/Interrupt_Handler_Low()                                 C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\interrupts.c
                                           #ifdef ENABLE_INT_1_ISR                                                          C:\mort\Mort Code 08\code\interrupts.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\interrupts.c
                                           void Int_1_ISR(void)                                                             C:\mort\Mort Code 08\code\interrupts.c
                                           {                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           	// this function will be called when an interrupt 1 occurs                      C:\mort\Mort Code 08\code\interrupts.c
                                           }                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\interrupts.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\interrupts.c
                                                                                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	FUNCTION:		Int_2_ISR()                                                         C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PURPOSE:		If enabled, the interrupt 2 handler is called when the               C:\mort\Mort Code 08\code\interrupts.c
                                           *					interrupt 2/digital input 2 pin changes logic level. The                   C:\mort\Mort Code 08\code\interrupts.c
                                           *					edge that the interrupt 2 pin reacts to is programmable                    C:\mort\Mort Code 08\code\interrupts.c
                                           *					(see comments in the Initialize_Interrupts() function,                     C:\mort\Mort Code 08\code\interrupts.c
                                           *					above).                                                                    C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	CALLED FROM:	ifi_frc.c/Interrupt_Handler_Low()                                 C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\interrupts.c
                                           #ifdef ENABLE_INT_2_ISR                                                          C:\mort\Mort Code 08\code\interrupts.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\interrupts.c
                                           void Int_2_ISR(void)                                                             C:\mort\Mort Code 08\code\interrupts.c
                                           {                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                                                                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           }                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\interrupts.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\interrupts.c
                                                                                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	FUNCTION:		Int_3_ISR()                                                         C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PURPOSE:		If enabled, the interrupt 3 handler is called when the               C:\mort\Mort Code 08\code\interrupts.c
                                           *					interrupt 3/digital input 3 pin changes logic level.                       C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	CALLED FROM:	ifi_frc.c/Interrupt_Handler_Low()                                 C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PARAMETERS:		RB4_State is the current logic level of the                       C:\mort\Mort Code 08\code\interrupts.c
                                           *					interrupt 3 pin.                                                           C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\interrupts.c
                                           #ifdef ENABLE_INT_3_ISR                                                          C:\mort\Mort Code 08\code\interrupts.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\interrupts.c
                                           void Int_3_ISR(unsigned char RB4_State)                                          C:\mort\Mort Code 08\code\interrupts.c
                                           {                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                                                                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           }                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\interrupts.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\interrupts.c
                                                                                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	FUNCTION:		Int_4_ISR()                                                         C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PURPOSE:		If enabled, the interrupt 4 handler is called when the               C:\mort\Mort Code 08\code\interrupts.c
                                           *					interrupt 4/digital input 4 pin changes logic level.                       C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	CALLED FROM:	ifi_frc.c/Interrupt_Handler_Low()                                 C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PARAMETERS:		RB5_State is the current logic level of the                       C:\mort\Mort Code 08\code\interrupts.c
                                           *					interrupt 4 pin.                                                           C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\interrupts.c
                                           #ifdef ENABLE_INT_4_ISR                                                          C:\mort\Mort Code 08\code\interrupts.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\interrupts.c
                                           void Int_4_ISR(unsigned char RB5_State)                                          C:\mort\Mort Code 08\code\interrupts.c
                                           {                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           	// this function will be called when an interrupt 4 occurs                      C:\mort\Mort Code 08\code\interrupts.c
                                           }                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\interrupts.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\interrupts.c
                                                                                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	FUNCTION:		Int_5_ISR()                                                         C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PURPOSE:		If enabled, the interrupt 5 handler is called when the               C:\mort\Mort Code 08\code\interrupts.c
                                           *					interrupt 5/digital input 5 pin changes logic level.                       C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	CALLED FROM:	ifi_frc.c/Interrupt_Handler_Low()                                 C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PARAMETERS:		RB6_State is the current logic level of the                       C:\mort\Mort Code 08\code\interrupts.c
                                           *					interrupt 5 pin.                                                           C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\interrupts.c
                                           #ifdef ENABLE_INT_5_ISR                                                          C:\mort\Mort Code 08\code\interrupts.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\interrupts.c
                                           void Int_5_ISR(unsigned char RB6_State)                                          C:\mort\Mort Code 08\code\interrupts.c
                                           {                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           	// this function will be called when an interrupt 5 occurs                      C:\mort\Mort Code 08\code\interrupts.c
                                           }                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\interrupts.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\interrupts.c
                                                                                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	FUNCTION:		Int_6_ISR()                                                         C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PURPOSE:		If enabled, the interrupt 6 handler is called when the               C:\mort\Mort Code 08\code\interrupts.c
                                           *					interrupt 6/digital input 6 pin changes logic level.                       C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	CALLED FROM:	ifi_frc.c/Interrupt_Handler_Low()                                 C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PARAMETERS:		RB7_State is the current logic level of the                       C:\mort\Mort Code 08\code\interrupts.c
                                           *					interrupt 6 pin.                                                           C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\interrupts.c
                                           #ifdef ENABLE_INT_6_ISR                                                          C:\mort\Mort Code 08\code\interrupts.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\interrupts.c
                                           void Int_6_ISR(unsigned char RB7_State)                                          C:\mort\Mort Code 08\code\interrupts.c
                                           {                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           	// this function will be called when an interrupt 6 occurs                      C:\mort\Mort Code 08\code\interrupts.c
                                           }                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\interrupts.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\interrupts.c
                                                                                                                            C:\mort\Mort Code 08\code\interrupts.c
                                                                                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	FUNCTION:		Interrupt_Vector_Low()                                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PURPOSE:		Installs the low priority interrupt code at the low                  C:\mort\Mort Code 08\code\interrupts.c
                                           *					priority interrupt vector, which is a fixed place in                       C:\mort\Mort Code 08\code\interrupts.c
                                           *					memory where the microcontroller will start executing                      C:\mort\Mort Code 08\code\interrupts.c
                                           *					code when it detects an interrupt condition. Because                       C:\mort\Mort Code 08\code\interrupts.c
                                           *					this place in memory, at address 0x818, is intended                        C:\mort\Mort Code 08\code\interrupts.c
                                           *					to contain only a very small amount of code, general                       C:\mort\Mort Code 08\code\interrupts.c
                                           *					practice is to place a "goto" instruction here that                        C:\mort\Mort Code 08\code\interrupts.c
                                           *					will point to the real interrupt handler somewhere else                    C:\mort\Mort Code 08\code\interrupts.c
                                           *					in memory. More information on interrupts can be found                     C:\mort\Mort Code 08\code\interrupts.c
                                           *					in the PIC18F8520 and PIC18F8722 data sheets.                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	CALLED FROM:	Called in response to a hardware generated interrupt              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\interrupts.c
                                           #pragma code Interrupt_Vector_Low = LOW_INT_VECTOR                               C:\mort\Mort Code 08\code\interrupts.c
                                           void Interrupt_Vector_Low (void)                                                 C:\mort\Mort Code 08\code\interrupts.c
                                           {                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                             _asm                                                                           C:\mort\Mort Code 08\code\interrupts.c
000818   ef45     GOTO      0x428a             goto Interrupt_Handler_Low  // jump to interrupt routine below               C:\mort\Mort Code 08\code\interrupts.c
00081a   f021                                                                                                               
                                             _endasm                                                                        C:\mort\Mort Code 08\code\interrupts.c
00081c   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           #pragma code                                                                     C:\mort\Mort Code 08\code\interrupts.c
                                                                                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	FUNCTION:		Interrupt_Handler_Low()                                             C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PURPOSE:		Determines which individual interrupt handler                        C:\mort\Mort Code 08\code\interrupts.c
                                           *					should be called, clears the interrupt flag and                            C:\mort\Mort Code 08\code\interrupts.c
                                           *					then calls the interrupt handler.                                          C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	CALLED FROM:	Interrupt_Vector_Low()                                            C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *	COMMENTS:		Before altering this code, make sure you understand                 C:\mort\Mort Code 08\code\interrupts.c
                                           *					how interrupts work. Documentation can be found in                         C:\mort\Mort Code 08\code\interrupts.c
                                           *					the C18 user's manual, the PIC18F8520/PIC18F8722 data                      C:\mort\Mort Code 08\code\interrupts.c
                                           *					sheet, and the included C18_ISR.pdf document.                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *					It is assumed that you won't be reading or writing                         C:\mort\Mort Code 08\code\interrupts.c
                                           *					to program memory in your interrupt service routines.                      C:\mort\Mort Code 08\code\interrupts.c
                                           *					If this is not the case, you'll need to remove                             C:\mort\Mort Code 08\code\interrupts.c
                                           *					TBLPTRU, TBLPTRH, TBLPTRL and TABLAT from the nosave                       C:\mort\Mort Code 08\code\interrupts.c
                                           *					section below.                                                             C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *					It is also assumed that you won't be using function                        C:\mort\Mort Code 08\code\interrupts.c
                                           *					pointers in your interrupt service routines. If this                       C:\mort\Mort Code 08\code\interrupts.c
                                           *					is not the case, you'll need to remove the PCLATH and                      C:\mort\Mort Code 08\code\interrupts.c
                                           *					PCLATU entries from the nosave section below.                              C:\mort\Mort Code 08\code\interrupts.c
                                           *                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\interrupts.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\interrupts.c
                                           #pragma interruptlow Interrupt_Handler_Low nosave=section(".tmpdata"),TBLPTRU,TBLPTRH,TBLPTRL,TABLAT,PCLATH,PCLATU C:\mort\Mort Code 08\code\interrupts.c
00428a   cfd8     MOVFF     0xfd8,0xfe4    void Interrupt_Handler_Low()                                                     C:\mort\Mort Code 08\code\interrupts.c
00428c   ffe4                                                                                                               
00428e   cfe0     MOVFF     0xfe0,0xfe4                                                                                     
004290   ffe4                                                                                                               
004292   6ee4     MOVWF     0xe4,0x0                                                                                        
004294   cfda     MOVFF     0xfda,0xfe4                                                                                     
004296   ffe4                                                                                                               
004298   cfe2     MOVFF     0xfe2,0xfda                                                                                     
00429a   ffda                                                                                                               
00429c   cfe9     MOVFF     0xfe9,0xfe4                                                                                     
00429e   ffe4                                                                                                               
0042a0   cfea     MOVFF     0xfea,0xfe4                                                                                     
0042a2   ffe4                                                                                                               
0042a4   cff3     MOVFF     0xff3,0xfe4                                                                                     
0042a6   ffe4                                                                                                               
0042a8   cff4     MOVFF     0xff4,0xfe4                                                                                     
0042aa   ffe4                                                                                                               
0042ac   ee00     LFSR      0x0,0x2a                                                                                        
0042ae   f02a                                                                                                               
0042b0   0e14     MOVLW     0x14                                                                                            
0042b2   04e8     DECF      0xe8,0x0,0x0                                                                                    
0042b4   e303     BNC       0x42bc                                                                                          
0042b6   cfee     MOVFF     0xfee,0xfe4                                                                                     
0042b8   ffe4                                                                                                               
0042ba   d7fb     BRA       0x42b2                                                                                          
0042bc   52e6     MOVF      0xe6,0x1,0x0                                                                                    
0042be   cfd9     MOVFF     0xfd9,0xfe6                                                                                     
0042c0   ffe6                                                                                                               
0042c2   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0042c4   ffd9                                                                                                               
0042c6   0e02     MOVLW     0x2                                                                                             
0042c8   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\mort\Mort Code 08\code\interrupts.c
                                           	unsigned char Port_B;                                                           C:\mort\Mort Code 08\code\interrupts.c
                                           	unsigned char Port_B_Delta;                                                     C:\mort\Mort Code 08\code\interrupts.c
                                                                                                                            C:\mort\Mort Code 08\code\interrupts.c
0042ca   509e     MOVF      0x9e,0x0,0x0   	if (PIR1bits.RC1IF && PIE1bits.RC1IE) // rx1 interrupt?                         C:\mort\Mort Code 08\code\interrupts.c
0042cc   0b20     ANDLW     0x20                                                                                            
0042ce   e006     BZ        0x42dc                                                                                          
0042d0   509d     MOVF      0x9d,0x0,0x0                                                                                    
0042d2   0b20     ANDLW     0x20                                                                                            
0042d4   e003     BZ        0x42dc                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\interrupts.c
                                           		#ifdef ENABLE_SERIAL_PORT_ONE_RX                                               C:\mort\Mort Code 08\code\interrupts.c
0042d6   ecd1     CALL      0x37a2,0x0     		Rx_1_ISR(); // call the rx1 interrupt handler (in serial_ports.c)              C:\mort\Mort Code 08\code\interrupts.c
0042d8   f01b                                                                                                               
                                           		#endif                                                                         C:\mort\Mort Code 08\code\interrupts.c
                                           	}                                                                               C:\mort\Mort Code 08\code\interrupts.c
0042da   d038     BRA       0x434c         	else if (PIR3bits.RC2IF && PIE3bits.RC2IE) // rx2 interrupt?                    C:\mort\Mort Code 08\code\interrupts.c
0042dc   50a4     MOVF      0xa4,0x0,0x0                                                                                    
0042de   0b20     ANDLW     0x20                                                                                            
0042e0   e006     BZ        0x42ee                                                                                          
0042e2   50a3     MOVF      0xa3,0x0,0x0                                                                                    
0042e4   0b20     ANDLW     0x20                                                                                            
0042e6   e003     BZ        0x42ee                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\interrupts.c
                                           		#ifdef ENABLE_SERIAL_PORT_TWO_RX                                               C:\mort\Mort Code 08\code\interrupts.c
0042e8   ecf0     CALL      0x37e0,0x0     		Rx_2_ISR(); // call the rx2 interrupt handler (in serial_ports.c)              C:\mort\Mort Code 08\code\interrupts.c
0042ea   f01b                                                                                                               
                                           		#endif                                                                         C:\mort\Mort Code 08\code\interrupts.c
                                           	}                                                                               C:\mort\Mort Code 08\code\interrupts.c
                                                                                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           	#ifdef ENABLE_INT_1                                                             C:\mort\Mort Code 08\code\interrupts.c
0042ec   d02f     BRA       0x434c         	else if (INTCON3bits.INT2IF && INTCON3bits.INT2IE) // external interrupt 1?     C:\mort\Mort Code 08\code\interrupts.c
0042ee   50f0     MOVF      0xf0,0x0,0x0                                                                                    
0042f0   0b02     ANDLW     0x2                                                                                             
0042f2   e007     BZ        0x4302                                                                                          
0042f4   50f0     MOVF      0xf0,0x0,0x0                                                                                    
0042f6   0b10     ANDLW     0x10                                                                                            
0042f8   e004     BZ        0x4302                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\interrupts.c
0042fa   92f0     BCF       0xf0,0x1,0x0   		INTCON3bits.INT2IF = 0; // clear the interrupt flag                            C:\mort\Mort Code 08\code\interrupts.c
0042fc   ecbb     CALL      0x4576,0x0     		Int_1_ISR(); // call the interrupt 1 handler (in interrupts.c or encoder.c)    C:\mort\Mort Code 08\code\interrupts.c
0042fe   f022                                                                                                               
                                           	}                                                                               C:\mort\Mort Code 08\code\interrupts.c
                                           	#endif                                                                          C:\mort\Mort Code 08\code\interrupts.c
                                           	#ifdef ENABLE_INT_2                                                             C:\mort\Mort Code 08\code\interrupts.c
                                           	else if (INTCON3bits.INT3IF && INTCON3bits.INT3IE) // external interrupt 2?     C:\mort\Mort Code 08\code\interrupts.c
                                           	{                                                                               C:\mort\Mort Code 08\code\interrupts.c
                                           		INTCON3bits.INT3IF = 0; // clear the interrupt flag                            C:\mort\Mort Code 08\code\interrupts.c
                                           		Int_2_ISR(); // call the interrupt 2 handler (in interrupts.c or encoder.c)    C:\mort\Mort Code 08\code\interrupts.c
                                           	}                                                                               C:\mort\Mort Code 08\code\interrupts.c
                                           	#endif                                                                          C:\mort\Mort Code 08\code\interrupts.c
                                           	#ifdef ENABLE_INT_3_6                                                           C:\mort\Mort Code 08\code\interrupts.c
                                           	else if (INTCONbits.RBIF && INTCONbits.RBIE) // external interrupts 3 through 6? C:\mort\Mort Code 08\code\interrupts.c
                                           	{                                                                               C:\mort\Mort Code 08\code\interrupts.c
                                           		Port_B = PORTB; // remove the "mismatch condition" by reading port b           C:\mort\Mort Code 08\code\interrupts.c
                                           		INTCONbits.RBIF = 0; // clear the interrupt flag                               C:\mort\Mort Code 08\code\interrupts.c
                                           		Port_B_Delta = Port_B ^ Old_Port_B; // determine which bits have changed       C:\mort\Mort Code 08\code\interrupts.c
                                           		Old_Port_B = Port_B; // save a copy of port b for next time around             C:\mort\Mort Code 08\code\interrupts.c
                                                                                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           		#ifdef ENABLE_INT_3                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           		if(Port_B_Delta & 0x10) // did external interrupt 3 change state?              C:\mort\Mort Code 08\code\interrupts.c
                                           		{                                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           			Int_3_ISR(Port_B & 0x10 ? 1 : 0); // call the interrupt 3 handler (in interrupts.c or encoder.c) C:\mort\Mort Code 08\code\interrupts.c
                                           		}                                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           		#endif                                                                         C:\mort\Mort Code 08\code\interrupts.c
                                           		#ifdef ENABLE_INT_4                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           		if(Port_B_Delta & 0x20) // did external interrupt 4 change state?              C:\mort\Mort Code 08\code\interrupts.c
                                           		{                                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           			Int_4_ISR(Port_B & 0x20 ? 1 : 0); // call the interrupt 4 handler (in interrupts.c or encoder.c) C:\mort\Mort Code 08\code\interrupts.c
                                           		}                                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           		#endif                                                                         C:\mort\Mort Code 08\code\interrupts.c
                                           		#ifdef ENABLE_INT_5                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           		if(Port_B_Delta & 0x40) // did external interrupt 5 change state?              C:\mort\Mort Code 08\code\interrupts.c
                                           		{                                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           			Int_5_ISR(Port_B & 0x40 ? 1 : 0); // call the interrupt 5 handler (in interrupts.c or encoder.c) C:\mort\Mort Code 08\code\interrupts.c
                                           		}                                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           		#endif                                                                         C:\mort\Mort Code 08\code\interrupts.c
                                           		#ifdef ENABLE_INT_6                                                            C:\mort\Mort Code 08\code\interrupts.c
                                           		if(Port_B_Delta & 0x80) // did external interrupt 6 change state?              C:\mort\Mort Code 08\code\interrupts.c
                                           		{                                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           			Int_6_ISR(Port_B & 0x80 ? 1 : 0); // call the interrupt 6 handler (in interrupts.c or encoder.c) C:\mort\Mort Code 08\code\interrupts.c
                                           		}                                                                              C:\mort\Mort Code 08\code\interrupts.c
                                           		#endif                                                                         C:\mort\Mort Code 08\code\interrupts.c
                                           	}                                                                               C:\mort\Mort Code 08\code\interrupts.c
                                           	#endif                                                                          C:\mort\Mort Code 08\code\interrupts.c
                                           	#ifdef ENABLE_TIMER_0                                                           C:\mort\Mort Code 08\code\interrupts.c
                                           	else if (INTCONbits.TMR0IF && INTCONbits.TMR0IE) // timer 0 interrupt?          C:\mort\Mort Code 08\code\interrupts.c
                                           	{                                                                               C:\mort\Mort Code 08\code\interrupts.c
                                           		INTCONbits.TMR0IF = 0; // clear the timer 0 interrupt flag                     C:\mort\Mort Code 08\code\interrupts.c
                                           		Timer_0_ISR(); // call the timer 0 interrupt handler (in timers.c)             C:\mort\Mort Code 08\code\interrupts.c
                                           	}                                                                               C:\mort\Mort Code 08\code\interrupts.c
                                           	#endif                                                                          C:\mort\Mort Code 08\code\interrupts.c
                                           	#ifdef ENABLE_TIMER_1                                                           C:\mort\Mort Code 08\code\interrupts.c
                                           	else if (PIR1bits.TMR1IF && PIE1bits.TMR1IE) // timer 1 interrupt?              C:\mort\Mort Code 08\code\interrupts.c
                                           	{                                                                               C:\mort\Mort Code 08\code\interrupts.c
                                           		PIR1bits.TMR1IF = 0; // clear the timer 1 interrupt flag                       C:\mort\Mort Code 08\code\interrupts.c
                                           		Timer_1_ISR(); // call the timer 1 interrupt handler (in timers.c)             C:\mort\Mort Code 08\code\interrupts.c
                                           	}                                                                               C:\mort\Mort Code 08\code\interrupts.c
                                           	#endif                                                                          C:\mort\Mort Code 08\code\interrupts.c
                                           	#ifdef ENABLE_TIMER_2                                                           C:\mort\Mort Code 08\code\interrupts.c
004300   d025     BRA       0x434c         	else if (PIR1bits.TMR2IF && PIE1bits.TMR2IE) // timer 2 interrupt?              C:\mort\Mort Code 08\code\interrupts.c
004302   509e     MOVF      0x9e,0x0,0x0                                                                                    
004304   0b02     ANDLW     0x2                                                                                             
004306   e007     BZ        0x4316                                                                                          
004308   509d     MOVF      0x9d,0x0,0x0                                                                                    
00430a   0b02     ANDLW     0x2                                                                                             
00430c   e004     BZ        0x4316                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\interrupts.c
00430e   929e     BCF       0x9e,0x1,0x0   		PIR1bits.TMR2IF = 0; // clear the timer 2 interrupt flag                       C:\mort\Mort Code 08\code\interrupts.c
004310   ec1b     CALL      0x4636,0x0     		Timer_2_ISR(); // call the timer 2 interrupt handler (in timers.c)             C:\mort\Mort Code 08\code\interrupts.c
004312   f023                                                                                                               
                                           	}                                                                               C:\mort\Mort Code 08\code\interrupts.c
                                           	#endif                                                                          C:\mort\Mort Code 08\code\interrupts.c
                                           	#ifdef ENABLE_TIMER_3                                                           C:\mort\Mort Code 08\code\interrupts.c
                                           	else if (PIR2bits.TMR3IF && PIE2bits.TMR3IE) // timer 3 interrupt?              C:\mort\Mort Code 08\code\interrupts.c
                                           	{                                                                               C:\mort\Mort Code 08\code\interrupts.c
                                           		PIR2bits.TMR3IF = 0; // clear the timer 3 interrupt flag                       C:\mort\Mort Code 08\code\interrupts.c
                                           		Timer_3_ISR(); // call the timer 3 interrupt handler (in timers.c)             C:\mort\Mort Code 08\code\interrupts.c
                                           	}                                                                               C:\mort\Mort Code 08\code\interrupts.c
                                           	#endif                                                                          C:\mort\Mort Code 08\code\interrupts.c
                                           	#ifdef ENABLE_TIMER_4                                                           C:\mort\Mort Code 08\code\interrupts.c
004314   d01b     BRA       0x434c         	else if (PIR3bits.TMR4IF && PIE3bits.TMR4IE) // timer 4 interrupt?              C:\mort\Mort Code 08\code\interrupts.c
004316   50a4     MOVF      0xa4,0x0,0x0                                                                                    
004318   0b08     ANDLW     0x8                                                                                             
00431a   e007     BZ        0x432a                                                                                          
00431c   50a3     MOVF      0xa3,0x0,0x0                                                                                    
00431e   0b08     ANDLW     0x8                                                                                             
004320   e004     BZ        0x432a                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\interrupts.c
004322   96a4     BCF       0xa4,0x3,0x0   		PIR3bits.TMR4IF = 0; // clear the timer 4 interrupt flag                       C:\mort\Mort Code 08\code\interrupts.c
004324   ec35     CALL      0x3a6a,0x0     		Timer_4_ISR(); // call the timer 4 interrupt handler (in timers.c)             C:\mort\Mort Code 08\code\interrupts.c
004326   f01d                                                                                                               
                                           	}                                                                               C:\mort\Mort Code 08\code\interrupts.c
                                           	#endif                                                                          C:\mort\Mort Code 08\code\interrupts.c
004328   d011     BRA       0x434c         	else if (PIR1bits.TX1IF && PIE1bits.TX1IE) // tx1 interrupt?                    C:\mort\Mort Code 08\code\interrupts.c
00432a   509e     MOVF      0x9e,0x0,0x0                                                                                    
00432c   0b10     ANDLW     0x10                                                                                            
00432e   e006     BZ        0x433c                                                                                          
004330   509d     MOVF      0x9d,0x0,0x0                                                                                    
004332   0b10     ANDLW     0x10                                                                                            
004334   e003     BZ        0x433c                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\interrupts.c
                                           		#ifdef ENABLE_SERIAL_PORT_ONE_TX                                               C:\mort\Mort Code 08\code\interrupts.c
004336   ec0f     CALL      0x381e,0x0     		Tx_1_ISR(); // call the tx1 interrupt handler (in serial_ports.c)              C:\mort\Mort Code 08\code\interrupts.c
004338   f01c                                                                                                               
                                           		#endif                                                                         C:\mort\Mort Code 08\code\interrupts.c
                                           	}                                                                               C:\mort\Mort Code 08\code\interrupts.c
00433a   d008     BRA       0x434c         	else if (PIR3bits.TX2IF && PIE3bits.TX2IE) // tx2 interrupt?                    C:\mort\Mort Code 08\code\interrupts.c
00433c   50a4     MOVF      0xa4,0x0,0x0                                                                                    
00433e   0b10     ANDLW     0x10                                                                                            
004340   e005     BZ        0x434c                                                                                          
004342   50a3     MOVF      0xa3,0x0,0x0                                                                                    
004344   0b10     ANDLW     0x10                                                                                            
004346   e002     BZ        0x434c                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\interrupts.c
                                           		#ifdef ENABLE_SERIAL_PORT_TWO_TX                                               C:\mort\Mort Code 08\code\interrupts.c
004348   ec27     CALL      0x384e,0x0     		Tx_2_ISR(); // call the tx2 interrupt handler (in serial_ports.c)              C:\mort\Mort Code 08\code\interrupts.c
00434a   f01c                                                                                                               
                                           		#endif                                                                         C:\mort\Mort Code 08\code\interrupts.c
                                           	}                                                                               C:\mort\Mort Code 08\code\interrupts.c
00434c   0e02     MOVLW     0x2            }                                                                                C:\mort\Mort Code 08\code\interrupts.c
00434e   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
004350   e202     BC        0x4356                                                                                          
004352   6ae1     CLRF      0xe1,0x0                                                                                        
004354   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004356   6ee1     MOVWF     0xe1,0x0                                                                                        
004358   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00435a   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00435c   ffd9                                                                                                               
00435e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004360   ee00     LFSR      0x0,0x3d                                                                                        
004362   f03d                                                                                                               
004364   0e14     MOVLW     0x14                                                                                            
004366   04e8     DECF      0xe8,0x0,0x0                                                                                    
004368   e303     BNC       0x4370                                                                                          
00436a   cfe5     MOVFF     0xfe5,0xfed                                                                                     
00436c   ffed                                                                                                               
00436e   d7fb     BRA       0x4366                                                                                          
004370   cfe5     MOVFF     0xfe5,0xff4                                                                                     
004372   fff4                                                                                                               
004374   cfe5     MOVFF     0xfe5,0xff3                                                                                     
004376   fff3                                                                                                               
004378   cfe5     MOVFF     0xfe5,0xfea                                                                                     
00437a   ffea                                                                                                               
00437c   cfe5     MOVFF     0xfe5,0xfe9                                                                                     
00437e   ffe9                                                                                                               
004380   cfe5     MOVFF     0xfe5,0xfda                                                                                     
004382   ffda                                                                                                               
004384   50e5     MOVF      0xe5,0x0,0x0                                                                                    
004386   cfe5     MOVFF     0xfe5,0xfe0                                                                                     
004388   ffe0                                                                                                               
00438a   cfe5     MOVFF     0xfe5,0xfd8                                                                                     
00438c   ffd8                                                                                                               
00438e   0010     RETFIE    0x0                                                                                             
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\interrupts.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	TITLE:		ifi_frc.c                                                              C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	VERSION:	0.3 (Beta)                                                            C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	DATE:		31-Dec-2007                                                             C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	AUTHOR:		R. Kevin Watson                                                       C:\mort\Mort Code 08\code\main.c
                                           *				kevinw@jpl.nasa.gov                                                         C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	COMMENTS:	This file contains the startup and interrupt service routine         C:\mort\Mort Code 08\code\main.c
                                           *				dispatch code for the IFI FRC robot controller.                             C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *				This file best viewed with tabs set to four.                                C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           ******************************************************************************** C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	Change log:                                                                    C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	DATE         REV  DESCRIPTION                                                  C:\mort\Mort Code 08\code\main.c
                                           *	-----------  ---  ----------------------------------------------------------   C:\mort\Mort Code 08\code\main.c
                                           *	22-Dec-2007  0.1  RKW Original                                                 C:\mort\Mort Code 08\code\main.c
                                           *	24-Dec-2007  0.2  RKW - Added memory initialization code to _startup().        C:\mort\Mort Code 08\code\main.c
                                           *	31-Dec-2007  0.3  RKW - Added calls to Autonomous_Init() and Teleop_Init().    C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\main.c
                                           #include <adc.h>                                                                 C:\mort\Mort Code 08\code\main.c
                                           #include "adc.h"                                                                 C:\mort\Mort Code 08\code\main.c
                                           #include <delays.h>                                                              C:\mort\Mort Code 08\code\main.c
                                           #include "ifi_frc.h"                                                             C:\mort\Mort Code 08\code\main.c
                                           #include "timers.h"                                                              C:\mort\Mort Code 08\code\main.c
                                           #include "interrupts.h"                                                          C:\mort\Mort Code 08\code\main.c
                                           #include "encoder.h"                                                             C:\mort\Mort Code 08\code\main.c
                                           #include "serial_ports.h"                                                        C:\mort\Mort Code 08\code\main.c
                                           #include "teleop.h"                                                              C:\mort\Mort Code 08\code\main.c
                                           #include "autonomous.h"                                                          C:\mort\Mort Code 08\code\main.c
                                           #include "disabled.h"                                                            C:\mort\Mort Code 08\code\main.c
                                           #include "gyro.h"                                                                C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           // So that we'll know which interrupt pin changed state, the                     C:\mort\Mort Code 08\code\main.c
                                           // state of port b is saved in this variable each time the                       C:\mort\Mort Code 08\code\main.c
                                           // interrupt handler for interrupts 3 through 6 is called. This                  C:\mort\Mort Code 08\code\main.c
                                           // variable should be initialized to the current state of port                   C:\mort\Mort Code 08\code\main.c
                                           // B just before enabling interrupts 3 through 6.                                C:\mort\Mort Code 08\code\main.c
                                           unsigned char volatile Old_Port_B = 0xFF;                                        C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	FUNCTION:		Initialization()                                                    C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	PURPOSE:		This function is called once when the robot controller               C:\mort\Mort Code 08\code\main.c
                                           *					is cold or warm booted. You should initialize your code                    C:\mort\Mort Code 08\code\main.c
                                           *					here.                                                                      C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	CALLED FROM:	main() in ifi_frc.c                                               C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\main.c
                                           void Initialization(void)                                                        C:\mort\Mort Code 08\code\main.c
                                           {                                                                                C:\mort\Mort Code 08\code\main.c
                                           	// Setup the digital I/O pins. Use "INPUT" to setup the pin                     C:\mort\Mort Code 08\code\main.c
                                           	// as an input and "OUTPUT" to setup the pin as an output.                      C:\mort\Mort Code 08\code\main.c
003e52   8493     BSF       0x93,0x2,0x0   	digital_io_01 = INPUT;                                                          C:\mort\Mort Code 08\code\main.c
003e54   8693     BSF       0x93,0x3,0x0   	digital_io_02 = INPUT;                                                          C:\mort\Mort Code 08\code\main.c
003e56   8893     BSF       0x93,0x4,0x0   	digital_io_03 = INPUT;                                                          C:\mort\Mort Code 08\code\main.c
003e58   8a93     BSF       0x93,0x5,0x0   	digital_io_04 = INPUT;                                                          C:\mort\Mort Code 08\code\main.c
003e5a   8c93     BSF       0x93,0x6,0x0   	digital_io_05 = INPUT;                                                          C:\mort\Mort Code 08\code\main.c
003e5c   8e93     BSF       0x93,0x7,0x0   	digital_io_06 = INPUT;                                                          C:\mort\Mort Code 08\code\main.c
003e5e   8099     BSF       0x99,0x0,0x0   	digital_io_07 = INPUT;                                                          C:\mort\Mort Code 08\code\main.c
003e60   8299     BSF       0x99,0x1,0x0   	digital_io_08 = INPUT;                                                          C:\mort\Mort Code 08\code\main.c
003e62   8499     BSF       0x99,0x2,0x0   	digital_io_09 = INPUT;                                                          C:\mort\Mort Code 08\code\main.c
003e64   8699     BSF       0x99,0x3,0x0   	digital_io_10 = INPUT;                                                          C:\mort\Mort Code 08\code\main.c
003e66   829a     BSF       0x9a,0x1,0x0   	digital_io_11 = INPUT;                                                          C:\mort\Mort Code 08\code\main.c
003e68   849a     BSF       0x9a,0x2,0x0   	digital_io_12 = INPUT;                                                          C:\mort\Mort Code 08\code\main.c
003e6a   869a     BSF       0x9a,0x3,0x0   	digital_io_13 = INPUT;                                                          C:\mort\Mort Code 08\code\main.c
003e6c   9094     BCF       0x94,0x0,0x0   	digital_io_14 = OUTPUT;     // brakes                                           C:\mort\Mort Code 08\code\main.c
003e6e   989a     BCF       0x9a,0x4,0x0   	digital_io_15 = OUTPUT;     // brakes                                           C:\mort\Mort Code 08\code\main.c
003e70   9a9a     BCF       0x9a,0x5,0x0   	digital_io_16 = OUTPUT;     // brakes                                           C:\mort\Mort Code 08\code\main.c
003e72   9c9a     BCF       0x9a,0x6,0x0   	digital_io_17 = OUTPUT;     // brakes                                           C:\mort\Mort Code 08\code\main.c
003e74   9e9a     BCF       0x9a,0x7,0x0   	digital_io_18 = OUTPUT;     // program button                                   C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           	// Initialize the digital outputs. If the pin is configured                     C:\mort\Mort Code 08\code\main.c
                                           	// as an input above, it doesn't matter what state you                          C:\mort\Mort Code 08\code\main.c
                                           	// initialize it to here.                                                       C:\mort\Mort Code 08\code\main.c
003e76   948a     BCF       0x8a,0x2,0x0   	rc_dig_out01 = 0;                                                               C:\mort\Mort Code 08\code\main.c
003e78   968a     BCF       0x8a,0x3,0x0   	rc_dig_out02 = 0;                                                               C:\mort\Mort Code 08\code\main.c
003e7a   988a     BCF       0x8a,0x4,0x0   	rc_dig_out03 = 0;                                                               C:\mort\Mort Code 08\code\main.c
003e7c   9a8a     BCF       0x8a,0x5,0x0   	rc_dig_out04 = 0;                                                               C:\mort\Mort Code 08\code\main.c
003e7e   9c8a     BCF       0x8a,0x6,0x0   	rc_dig_out05 = 0;                                                               C:\mort\Mort Code 08\code\main.c
003e80   9e8a     BCF       0x8a,0x7,0x0   	rc_dig_out06 = 0;                                                               C:\mort\Mort Code 08\code\main.c
003e82   9090     BCF       0x90,0x0,0x0   	rc_dig_out07 = 0;                                                               C:\mort\Mort Code 08\code\main.c
003e84   9290     BCF       0x90,0x1,0x0   	rc_dig_out08 = 0;                                                               C:\mort\Mort Code 08\code\main.c
003e86   9490     BCF       0x90,0x2,0x0   	rc_dig_out09 = 0;                                                               C:\mort\Mort Code 08\code\main.c
003e88   9690     BCF       0x90,0x3,0x0   	rc_dig_out10 = 0;                                                               C:\mort\Mort Code 08\code\main.c
003e8a   9291     BCF       0x91,0x1,0x0   	rc_dig_out11 = 0;                                                               C:\mort\Mort Code 08\code\main.c
003e8c   9491     BCF       0x91,0x2,0x0   	rc_dig_out12 = 0;                                                               C:\mort\Mort Code 08\code\main.c
003e8e   9691     BCF       0x91,0x3,0x0   	rc_dig_out13 = 0;                                                               C:\mort\Mort Code 08\code\main.c
003e90   908b     BCF       0x8b,0x0,0x0   	rc_dig_out14 = 0;                                                               C:\mort\Mort Code 08\code\main.c
003e92   9891     BCF       0x91,0x4,0x0   	rc_dig_out15 = 0;                                                               C:\mort\Mort Code 08\code\main.c
003e94   9a91     BCF       0x91,0x5,0x0   	rc_dig_out16 = 0;                                                               C:\mort\Mort Code 08\code\main.c
003e96   9c91     BCF       0x91,0x6,0x0   	rc_dig_out17 = 0;                                                               C:\mort\Mort Code 08\code\main.c
003e98   8e91     BSF       0x91,0x7,0x0   	rc_dig_out18 = 1;                                                               C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                               // send printf() output to serial port one.                                  C:\mort\Mort Code 08\code\main.c
003e9a   0103     MOVLB     0x3            	stdout_serial_port = SERIAL_PORT_ONE;                                           C:\mort\Mort Code 08\code\main.c
003e9c   0e01     MOVLW     0x1                                                                                             
003e9e   6f00     MOVWF     0x0,0x1                                                                                         
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           	// initialize the serial ports                                                  C:\mort\Mort Code 08\code\main.c
                                           	// (see serial_ports_readme.txt and serial_ports.c/.h)                          C:\mort\Mort Code 08\code\main.c
003ea0   0e07     MOVLW     0x7            	Init_Serial_Port_One(BAUD_115200);                                              C:\mort\Mort Code 08\code\main.c
003ea2   6ee6     MOVWF     0xe6,0x0                                                                                        
003ea4   ecd3     CALL      0x35a6,0x0                                                                                      
003ea6   f01a                                                                                                               
003ea8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003eaa   0e07     MOVLW     0x7            	Init_Serial_Port_Two(BAUD_115200);                                              C:\mort\Mort Code 08\code\main.c
003eac   6ee6     MOVWF     0xe6,0x0                                                                                        
003eae   ec11     CALL      0x3622,0x0                                                                                      
003eb0   f01b                                                                                                               
003eb2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003eb4   0e18     MOVLW     0x18               printf("Initialized Serial Ports >>\r\n");                                   C:\mort\Mort Code 08\code\main.c
003eb6   6e00     MOVWF     0x0,0x0                                                                                         
003eb8   0e44     MOVLW     0x44                                                                                            
003eba   d86c     RCALL     0x3f94                                                                                          
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                               // Initialize ADC                                                            C:\mort\Mort Code 08\code\main.c
003ebc   ec5c     CALL      0x38b8,0x0         Initialize_ADC();                                                            C:\mort\Mort Code 08\code\main.c
003ebe   f01c                                                                                                               
003ec0   0e02     MOVLW     0x2                printf("Initializing ADC >>\r\n");                                           C:\mort\Mort Code 08\code\main.c
003ec2   6e00     MOVWF     0x0,0x0                                                                                         
003ec4   0e44     MOVLW     0x44                                                                                            
003ec6   d866     RCALL     0x3f94                                                                                          
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                               // Initialize Gyro                                                           C:\mort\Mort Code 08\code\main.c
003ec8   ec3a     CALL      0x3274,0x0         Initialize_Gyro();                                                           C:\mort\Mort Code 08\code\main.c
003eca   f019                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                              	// Remove the // below to initialize encoder #1                              C:\mort\Mort Code 08\code\main.c
003ecc   ec86     CALL      0x450c,0x0         Initialize_Encoder_1();                                                      C:\mort\Mort Code 08\code\main.c
003ece   f022                                                                                                               
003ed0   0ee9     MOVLW     0xe9               printf("Initialized Encoder >>\r\n");                                        C:\mort\Mort Code 08\code\main.c
003ed2   6e00     MOVWF     0x0,0x0                                                                                         
003ed4   0e43     MOVLW     0x43                                                                                            
003ed6   d85e     RCALL     0x3f94                                                                                          
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                               //Initialize Interrupts                                                      C:\mort\Mort Code 08\code\main.c
003ed8   0ecd     MOVLW     0xcd               printf("Initialized Interrupts >>\r\n");                                     C:\mort\Mort Code 08\code\main.c
003eda   6e00     MOVWF     0x0,0x0                                                                                         
003edc   0e43     MOVLW     0x43                                                                                            
003ede   d85a     RCALL     0x3f94                                                                                          
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                               //Initialize timers                                                          C:\mort\Mort Code 08\code\main.c
003ee0   ec0d     CALL      0x461a,0x0         Initialize_Timer_2(); // Our timer, used in robocoach                        C:\mort\Mort Code 08\code\main.c
003ee2   f023                                                                                                               
003ee4   0eb5     MOVLW     0xb5               printf("Initialized Timers >>\r\n");                                         C:\mort\Mort Code 08\code\main.c
003ee6   6e00     MOVWF     0x0,0x0                                                                                         
003ee8   0e43     MOVLW     0x43                                                                                            
003eea   d854     RCALL     0x3f94                                                                                          
                                                                                                                            C:\mort\Mort Code 08\code\main.c
003eec   0e90     MOVLW     0x90           	printf("IFI User Processor Initialized ...\r\n");                               C:\mort\Mort Code 08\code\main.c
003eee   6e00     MOVWF     0x0,0x0                                                                                         
003ef0   0e43     MOVLW     0x43                                                                                            
003ef2   efca     GOTO      0x3f94                                                                                          
003ef4   f01f                                                                                                               
003f94   6e01     MOVWF     0x1,0x0                                                                                         
003f96   6a02     CLRF      0x2,0x0                                                                                         
003f98   c000     MOVFF     0x0,0xfe6                                                                                       
003f9a   ffe6                                                                                                               
003f9c   6ee6     MOVWF     0xe6,0x0                                                                                        
003f9e   c002     MOVFF     0x2,0xfe6                                                                                       
003fa0   ffe6                                                                                                               
003fa2   ec3a     CALL      0x4474,0x0                                                                                      
003fa4   f022                                                                                                               
003fa6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003fa8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003faa   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003fac   0012     RETURN    0x0                                                                                             
                                           }                                                                                C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	FUNCTION:		main()                                                              C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	PURPOSE:		Entry point for your C code.                                         C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	CALLED FROM:	_startup()                                                        C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\main.c
                                           void main(void)                                                                  C:\mort\Mort Code 08\code\main.c
                                           {                                                                                C:\mort\Mort Code 08\code\main.c
                                           	// initialization state flags                                                   C:\mort\Mort Code 08\code\main.c
                                           	static unsigned char disabled_init_flag = 1;                                    C:\mort\Mort Code 08\code\main.c
                                           	static unsigned char autonomous_init_flag = 1;                                  C:\mort\Mort Code 08\code\main.c
                                           	static unsigned char teleop_init_flag = 1;                                      C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           	// take a snapshot of port b before interrupts are enabled                      C:\mort\Mort Code 08\code\main.c
003ef6   cf81     MOVFF     0xf81,0x32b    	Old_Port_B = PORTB;                                                             C:\mort\Mort Code 08\code\main.c
003ef8   f32b                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           	// call the system initialization code which initializes                        C:\mort\Mort Code 08\code\main.c
                                           	// processor registers and the SPI communication channel                        C:\mort\Mort Code 08\code\main.c
                                           	// with the master processor                                                    C:\mort\Mort Code 08\code\main.c
003efa   ece7     CALL      0x25ce,0x0     	IFI_Initialization();                                                           C:\mort\Mort Code 08\code\main.c
003efc   f012                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           	// call the user initialization code in main.c                                  C:\mort\Mort Code 08\code\main.c
003efe   dfa9     RCALL     0x3e52         	Initialization();                                                               C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           	// let the master processor know we're done initializing                        C:\mort\Mort Code 08\code\main.c
003f00   d85f     RCALL     0x3fc0         	Putdata(&txdata);                                                               C:\mort\Mort Code 08\code\main.c
003fc0   0e8c     MOVLW     0x8c                                                                                            
003fc2   6ee6     MOVWF     0xe6,0x0                                                                                        
003fc4   0e01     MOVLW     0x1                                                                                             
003fc6   6ee6     MOVWF     0xe6,0x0                                                                                        
003fc8   ec98     CALL      0x2730,0x0                                                                                      
003fca   f013                                                                                                               
003fcc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003fce   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003fd0   0012     RETURN    0x0                                                                                             
003f02   ec5a     CALL      0x26b4,0x0     	User_Proc_Is_Ready();                                                           C:\mort\Mort Code 08\code\main.c
003f04   f013                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\main.c
003f06   0101     MOVLB     0x1            	statusflag.NEW_SPI_DATA = 0;                                                    C:\mort\Mort Code 08\code\main.c
003f08   91cc     BCF       0xcc,0x0,0x1                                                                                    
                                                                                                                            C:\mort\Mort Code 08\code\main.c
003f92   d7bb     BRA       0x3f0a         	while(TRUE)                                                                     C:\mort\Mort Code 08\code\main.c
                                           	{                                                                               C:\mort\Mort Code 08\code\main.c
003f0a   0101     MOVLB     0x1            		if(disabled_mode)                                                              C:\mort\Mort Code 08\code\main.c
003f0c   afad     BTFSS     0xad,0x7,0x1                                                                                    
003f0e   d015     BRA       0x3f3a                                                                                          
                                           		{                                                                              C:\mort\Mort Code 08\code\main.c
                                           			// set the initialization flags because at some point                         C:\mort\Mort Code 08\code\main.c
                                           			// we'll transition out of the disabled state and need                        C:\mort\Mort Code 08\code\main.c
                                           			// to reset the PWM and relay values before transitioning                     C:\mort\Mort Code 08\code\main.c
                                           			// to the autonomous or teleoperation mode                                    C:\mort\Mort Code 08\code\main.c
003f10   0103     MOVLB     0x3            			teleop_init_flag = 1;                                                         C:\mort\Mort Code 08\code\main.c
003f12   0e01     MOVLW     0x1                                                                                             
003f14   6f2e     MOVWF     0x2e,0x1                                                                                        
003f16   6f2d     MOVWF     0x2d,0x1       			autonomous_init_flag = 1;                                                     C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           			// have we received new data from the master processor?                       C:\mort\Mort Code 08\code\main.c
003f18   0101     MOVLB     0x1            			if(statusflag.NEW_SPI_DATA)                                                   C:\mort\Mort Code 08\code\main.c
003f1a   a1cc     BTFSS     0xcc,0x0,0x1                                                                                    
003f1c   d00b     BRA       0x3f34                                                                                          
                                           			{                                                                             C:\mort\Mort Code 08\code\main.c
                                           				// call Disabled_Init() if this is the first time                            C:\mort\Mort Code 08\code\main.c
                                           				// we've entered disabled_mode                                               C:\mort\Mort Code 08\code\main.c
003f1e   0103     MOVLB     0x3            				if(disabled_init_flag == 1)                                                  C:\mort\Mort Code 08\code\main.c
003f20   052c     DECF      0x2c,0x0,0x1                                                                                    
003f22   e104     BNZ       0x3f2c                                                                                          
                                           				{                                                                            C:\mort\Mort Code 08\code\main.c
003f24   ec9a     CALL      0x4934,0x0     					Disabled_Init();                                                            C:\mort\Mort Code 08\code\main.c
003f26   f024                                                                                                               
003f28   0103     MOVLB     0x3            					disabled_init_flag = 0;                                                     C:\mort\Mort Code 08\code\main.c
003f2a   6b2c     CLRF      0x2c,0x1                                                                                        
                                           				}                                                                            C:\mort\Mort Code 08\code\main.c
003f2c   d840     RCALL     0x3fae         				Getdata(&rxdata);	// get updated data from the master processor              C:\mort\Mort Code 08\code\main.c
003f2e   ec9c     CALL      0x4938,0x0     				Disabled();			// call the user's Disabled() function (in disabled.c)         C:\mort\Mort Code 08\code\main.c
003f30   f024                                                                                                               
                                           				Putdata(&txdata);	// send updated data to the master processor               C:\mort\Mort Code 08\code\main.c
                                           			}                                                                             C:\mort\Mort Code 08\code\main.c
003f32   d02b     BRA       0x3f8a         			else                                                                          C:\mort\Mort Code 08\code\main.c
                                           			{                                                                             C:\mort\Mort Code 08\code\main.c
003f34   ec9d     CALL      0x493a,0x0     				Disabled_Spin();	// located in disabled.c                                    C:\mort\Mort Code 08\code\main.c
003f36   f024                                                                                                               
                                           			}                                                                             C:\mort\Mort Code 08\code\main.c
                                           		}                                                                              C:\mort\Mort Code 08\code\main.c
003f38   d7e8     BRA       0x3f0a         		else if(autonomous_mode)                                                       C:\mort\Mort Code 08\code\main.c
003f3a   adad     BTFSS     0xad,0x6,0x1                                                                                    
003f3c   d015     BRA       0x3f68                                                                                          
                                           		{                                                                              C:\mort\Mort Code 08\code\main.c
                                           			// have we received new data from the master processor?                       C:\mort\Mort Code 08\code\main.c
003f3e   0101     MOVLB     0x1            			if(statusflag.NEW_SPI_DATA)                                                   C:\mort\Mort Code 08\code\main.c
003f40   a1cc     BTFSS     0xcc,0x0,0x1                                                                                    
003f42   d00f     BRA       0x3f62                                                                                          
                                           			{                                                                             C:\mort\Mort Code 08\code\main.c
                                           				// if we just transitioned to autonomous mode from                           C:\mort\Mort Code 08\code\main.c
                                           				// a different mode, we need to reset all motors                             C:\mort\Mort Code 08\code\main.c
                                           				// and relays to the off state before executing the                          C:\mort\Mort Code 08\code\main.c
                                           				// code in Autonomous_Init() and Autonomous() for                            C:\mort\Mort Code 08\code\main.c
                                           				// the first time                                                            C:\mort\Mort Code 08\code\main.c
003f44   0103     MOVLB     0x3            				if(autonomous_init_flag == 1)                                                C:\mort\Mort Code 08\code\main.c
003f46   052d     DECF      0x2d,0x0,0x1                                                                                    
003f48   e108     BNZ       0x3f5a                                                                                          
                                           				{                                                                            C:\mort\Mort Code 08\code\main.c
003f4a   ec38     CALL      0x4070,0x0     					Reset_Outputs();                                                            C:\mort\Mort Code 08\code\main.c
003f4c   f020                                                                                                               
003f4e   ecf9     CALL      0x3bf2,0x0     					Autonomous_Init();                                                          C:\mort\Mort Code 08\code\main.c
003f50   f01d                                                                                                               
003f52   0103     MOVLB     0x3            					autonomous_init_flag = 0;                                                   C:\mort\Mort Code 08\code\main.c
003f54   6b2d     CLRF      0x2d,0x1                                                                                        
003f56   0e01     MOVLW     0x1            					teleop_init_flag = 1;                                                       C:\mort\Mort Code 08\code\main.c
003f58   6f2e     MOVWF     0x2e,0x1                                                                                        
                                           				}                                                                            C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
003f5a   d829     RCALL     0x3fae         				Getdata(&rxdata);	// get updated data from the master processor              C:\mort\Mort Code 08\code\main.c
003f5c   ec03     CALL      0x3c06,0x0     				Autonomous();		// call the user's autonomous code (in autonomous.c)          C:\mort\Mort Code 08\code\main.c
003f5e   f01e                                                                                                               
                                           				Putdata(&txdata);	// send updated data to the master processor               C:\mort\Mort Code 08\code\main.c
                                           			}                                                                             C:\mort\Mort Code 08\code\main.c
003f60   d014     BRA       0x3f8a         			else                                                                          C:\mort\Mort Code 08\code\main.c
                                           			{                                                                             C:\mort\Mort Code 08\code\main.c
003f62   ec3d     CALL      0x3c7a,0x0     				Autonomous_Spin();	// located in autonomous.c                                C:\mort\Mort Code 08\code\main.c
003f64   f01e                                                                                                               
                                           			}                                                                             C:\mort\Mort Code 08\code\main.c
                                           		}                                                                              C:\mort\Mort Code 08\code\main.c
003f66   d7d1     BRA       0x3f0a         		else	// only option left is teleoperation mode                                 C:\mort\Mort Code 08\code\main.c
                                           		{                                                                              C:\mort\Mort Code 08\code\main.c
                                           			// have we received new data from the master processor?                       C:\mort\Mort Code 08\code\main.c
003f68   0101     MOVLB     0x1            			if(statusflag.NEW_SPI_DATA)                                                   C:\mort\Mort Code 08\code\main.c
003f6a   a1cc     BTFSS     0xcc,0x0,0x1                                                                                    
003f6c   d010     BRA       0x3f8e                                                                                          
                                           			{                                                                             C:\mort\Mort Code 08\code\main.c
                                           				// if we just transitioned to teleoperation mode                             C:\mort\Mort Code 08\code\main.c
                                           				// a different mode, we need to reset all motors                             C:\mort\Mort Code 08\code\main.c
                                           				// and relays to the off state before executing                              C:\mort\Mort Code 08\code\main.c
                                           				// the code in Teleop_Init() and Teleop() for the                            C:\mort\Mort Code 08\code\main.c
                                           				// first time                                                                C:\mort\Mort Code 08\code\main.c
003f6e   0103     MOVLB     0x3            				if(teleop_init_flag == 1)                                                    C:\mort\Mort Code 08\code\main.c
003f70   052e     DECF      0x2e,0x0,0x1                                                                                    
003f72   e108     BNZ       0x3f84                                                                                          
                                           				{                                                                            C:\mort\Mort Code 08\code\main.c
003f74   ec38     CALL      0x4070,0x0     					Reset_Outputs();                                                            C:\mort\Mort Code 08\code\main.c
003f76   f020                                                                                                               
003f78   ec4c     CALL      0x898,0x0      					Teleop_Init();                                                              C:\mort\Mort Code 08\code\main.c
003f7a   f004                                                                                                               
003f7c   0103     MOVLB     0x3            					teleop_init_flag = 0;                                                       C:\mort\Mort Code 08\code\main.c
003f7e   6b2e     CLRF      0x2e,0x1                                                                                        
003f80   0e01     MOVLW     0x1            					autonomous_init_flag = 1;                                                   C:\mort\Mort Code 08\code\main.c
003f82   6f2d     MOVWF     0x2d,0x1                                                                                        
                                           				}                                                                            C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
003f84   d814     RCALL     0x3fae         				Getdata(&rxdata);	// get updated data from the master processor              C:\mort\Mort Code 08\code\main.c
003fae   0eac     MOVLW     0xac                                                                                            
003fb0   6ee6     MOVWF     0xe6,0x0                                                                                        
003fb2   0e01     MOVLW     0x1                                                                                             
003fb4   6ee6     MOVWF     0xe6,0x0                                                                                        
003fb6   ec5f     CALL      0x26be,0x0                                                                                      
003fb8   f013                                                                                                               
003fba   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003fbc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003fbe   0012     RETURN    0x0                                                                                             
003f86   ec50     CALL      0x8a0,0x0      				Teleop();			// call the user's teleoperation code (in teleop.c)              C:\mort\Mort Code 08\code\main.c
003f88   f004                                                                                                               
003f8a   d81a     RCALL     0x3fc0         				Putdata(&txdata);	// send updated data to the master processor               C:\mort\Mort Code 08\code\main.c
                                           			}                                                                             C:\mort\Mort Code 08\code\main.c
003f8c   d7be     BRA       0x3f0a         			else                                                                          C:\mort\Mort Code 08\code\main.c
                                           			{                                                                             C:\mort\Mort Code 08\code\main.c
003f8e   ec66     CALL      0x8cc,0x0      				Teleop_Spin();		// located in teleop.c                                       C:\mort\Mort Code 08\code\main.c
003f90   f004                                                                                                               
                                           			}                                                                             C:\mort\Mort Code 08\code\main.c
                                           		}                                                                              C:\mort\Mort Code 08\code\main.c
                                           	}                                                                               C:\mort\Mort Code 08\code\main.c
                                           }                                                                                C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	FUNCTION:		_entry()                                                            C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	PURPOSE:		Installs the bootstrap code at location 0x800, which                 C:\mort\Mort Code 08\code\main.c
                                           *					is a fixed location in program memory where the boot-                      C:\mort\Mort Code 08\code\main.c
                                           *					loader expects the startup code to be found. Because                       C:\mort\Mort Code 08\code\main.c
                                           *					this place in memory, at address 0x800, is intended                        C:\mort\Mort Code 08\code\main.c
                                           *					to contain only a very small amount of code, general                       C:\mort\Mort Code 08\code\main.c
                                           *					practice is to place a "goto" instruction here that                        C:\mort\Mort Code 08\code\main.c
                                           *					will point to the real boot code somewhere else in                         C:\mort\Mort Code 08\code\main.c
                                           *					memory.                                                                    C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	CALLED FROM:	Called by the bootloader after a reset                            C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	COMMENTS:		This code is based upon version 1.7 of Microchip's                  C:\mort\Mort Code 08\code\main.c
                                           *					MPLAB-C18 startup code.                                                    C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\main.c
                                           #pragma code _entry_scn = RESET_VECTOR                                           C:\mort\Mort Code 08\code\main.c
                                           void _entry (void)                                                               C:\mort\Mort Code 08\code\main.c
                                           {                                                                                C:\mort\Mort Code 08\code\main.c
                                           	_asm                                                                            C:\mort\Mort Code 08\code\main.c
000800   ef5d     GOTO      0x48ba         	goto _startup                                                                   C:\mort\Mort Code 08\code\main.c
000802   f024                                                                                                               
                                           	_endasm                                                                         C:\mort\Mort Code 08\code\main.c
000804   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	FUNCTION:		_startup()                                                          C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	PURPOSE:                                                                       C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	CALLED FROM:	_entry()                                                          C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	COMMENTS:		This code is based upon version 1.7 of Microchip's                  C:\mort\Mort Code 08\code\main.c
                                           *					MPLAB-C18 startup code.                                                    C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\main.c
                                           #pragma code _startup_scn                                                        C:\mort\Mort Code 08\code\main.c
                                           void _startup (void)                                                             C:\mort\Mort Code 08\code\main.c
                                           {                                                                                C:\mort\Mort Code 08\code\main.c
                                           	_asm                                                                            C:\mort\Mort Code 08\code\main.c
                                               // Initialize the stack pointer                                              C:\mort\Mort Code 08\code\main.c
0048ba   ee1e     LFSR      0x1,0xe00          lfsr 1, _stack                                                               C:\mort\Mort Code 08\code\main.c
0048bc   f000                                                                                                               
0048be   ee2e     LFSR      0x2,0xe00          lfsr 2, _stack                                                               C:\mort\Mort Code 08\code\main.c
0048c0   f000                                                                                                               
0048c2   6af8     CLRF      0xf8,0x0           clrf TBLPTRU, 0		// 1st silicon doesn't do this on POR                       C:\mort\Mort Code 08\code\main.c
0048c4   9c2b     BCF       0x2b,0x6,0x0       bcf __FPFLAGS,6,0	// Initialize rounding flag for floating point libs        C:\mort\Mort Code 08\code\main.c
                                               _endasm                                                                      C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           	// initialize memory to all zeros                                               C:\mort\Mort Code 08\code\main.c
                                           	_asm                                                                            C:\mort\Mort Code 08\code\main.c
0048c6   ee00     LFSR      0x0,0x0        	lfsr   0, 0                                                                     C:\mort\Mort Code 08\code\main.c
0048c8   f000                                                                                                               
0048ca   0e0f     MOVLW     0xf            	movlw  0xF                                                                      C:\mort\Mort Code 08\code\main.c
                                           	clear_loop:                                                                     C:\mort\Mort Code 08\code\main.c
0048cc   6aee     CLRF      0xee,0x0       	clrf   POSTINC0, 0                                                              C:\mort\Mort Code 08\code\main.c
0048ce   62ea     CPFSEQ    0xea,0x0       	cpfseq FSR0H, 0                                                                 C:\mort\Mort Code 08\code\main.c
0048d0   d7fd     BRA       0x48cc         	bra    clear_loop                                                               C:\mort\Mort Code 08\code\main.c
                                           	_endasm                                                                         C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           	// initialize variables                                                         C:\mort\Mort Code 08\code\main.c
0048d2   ece9     CALL      0x3fd2,0x0         _do_cinit();                                                                 C:\mort\Mort Code 08\code\main.c
0048d4   f01f                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           	loop:                                                                           C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           	// Call the user's main routine                                                 C:\mort\Mort Code 08\code\main.c
0048d6   ec7b     CALL      0x3ef6,0x0     	main ();                                                                        C:\mort\Mort Code 08\code\main.c
0048d8   f01f                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\main.c
0048da   d7fd     BRA       0x48d6         	goto loop;                                                                      C:\mort\Mort Code 08\code\main.c
0048dc   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           // MPLAB-C18 initialized data memory support                                     C:\mort\Mort Code 08\code\main.c
                                           // The linker will populate the _cinit table                                     C:\mort\Mort Code 08\code\main.c
                                           extern far rom struct                                                            C:\mort\Mort Code 08\code\main.c
                                           {                                                                                C:\mort\Mort Code 08\code\main.c
                                           	unsigned short num_init;                                                        C:\mort\Mort Code 08\code\main.c
                                           	struct _init_entry                                                              C:\mort\Mort Code 08\code\main.c
                                           	{                                                                               C:\mort\Mort Code 08\code\main.c
                                           		unsigned long from;                                                            C:\mort\Mort Code 08\code\main.c
                                           		unsigned long to;                                                              C:\mort\Mort Code 08\code\main.c
                                           		unsigned long size;                                                            C:\mort\Mort Code 08\code\main.c
                                           	}                                                                               C:\mort\Mort Code 08\code\main.c
                                             	entries[];                                                                    C:\mort\Mort Code 08\code\main.c
                                           }_cinit;                                                                         C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	FUNCTION:		_do_cinit()                                                         C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	PURPOSE:		Initializes C variables                                              C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	CALLED FROM:	_startup()                                                        C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	COMMENTS:		This code is based upon version 1.7 of Microchip's                  C:\mort\Mort Code 08\code\main.c
                                           *					MPLAB-C18 startup code.                                                    C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\main.c
                                           #pragma code _cinit_scn                                                          C:\mort\Mort Code 08\code\main.c
                                           void _do_cinit (void)                                                            C:\mort\Mort Code 08\code\main.c
                                           {                                                                                C:\mort\Mort Code 08\code\main.c
                                           	// we'll make the assumption in the following code that these statics           C:\mort\Mort Code 08\code\main.c
                                           	// will be allocated into the same bank.                                        C:\mort\Mort Code 08\code\main.c
                                           	static short long prom;				// flash memory source address                       C:\mort\Mort Code 08\code\main.c
                                           	static unsigned short curr_byte;                                                C:\mort\Mort Code 08\code\main.c
                                           	static unsigned short curr_entry;                                               C:\mort\Mort Code 08\code\main.c
                                           	static short long data_ptr;                                                     C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           	// get the number of entries in the _cinit initialization table                 C:\mort\Mort Code 08\code\main.c
                                           	// and save in the curr_entry variable                                          C:\mort\Mort Code 08\code\main.c
003fd2   0e1e     MOVLW     0x1e           	TBLPTR = (short long)&_cinit;                                                   C:\mort\Mort Code 08\code\main.c
003fd4   6ef6     MOVWF     0xf6,0x0                                                                                        
003fd6   0e08     MOVLW     0x8                                                                                             
003fd8   6ef7     MOVWF     0xf7,0x0                                                                                        
003fda   0e00     MOVLW     0x0                                                                                             
003fdc   6ef8     MOVWF     0xf8,0x0                                                                                        
                                           	_asm                                                                            C:\mort\Mort Code 08\code\main.c
003fde   0103     MOVLB     0x3            	movlb data_ptr                                                                  C:\mort\Mort Code 08\code\main.c
003fe0   0009     TBLRDPOSTINC             	tblrdpostinc                                                                    C:\mort\Mort Code 08\code\main.c
003fe2   50f5     MOVF      0xf5,0x0,0x0   	movf TABLAT,0,0                                                                 C:\mort\Mort Code 08\code\main.c
003fe4   6f1e     MOVWF     0x1e,0x1       	movwf curr_entry,1                                                              C:\mort\Mort Code 08\code\main.c
003fe6   0009     TBLRDPOSTINC             	tblrdpostinc                                                                    C:\mort\Mort Code 08\code\main.c
003fe8   50f5     MOVF      0xf5,0x0,0x0   	movf TABLAT, 0, 0                                                               C:\mort\Mort Code 08\code\main.c
003fea   6f1f     MOVWF     0x1f,0x1       	movwf curr_entry+1,1                                                            C:\mort\Mort Code 08\code\main.c
                                           	_endasm                                                                         C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           	// check to see if we have any (more) entries to process?                       C:\mort\Mort Code 08\code\main.c
                                           zero_test:                                                                       C:\mort\Mort Code 08\code\main.c
                                               _asm                                                                         C:\mort\Mort Code 08\code\main.c
003fec   e103     BNZ       0x3ff4         	bnz get_entry                                                                   C:\mort\Mort Code 08\code\main.c
003fee   671e     TSTFSZ    0x1e,0x1       	tstfsz curr_entry,1                                                             C:\mort\Mort Code 08\code\main.c
003ff0   d001     BRA       0x3ff4         	bra get_entry                                                                   C:\mort\Mort Code 08\code\main.c
                                           	_endasm                                                                         C:\mort\Mort Code 08\code\main.c
003ff2   d03d     BRA       0x406e         	goto done;                                                                      C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           	// At this point we know that the table pointer points to the top               C:\mort\Mort Code 08\code\main.c
                                           	// of the current entry in _cinit, so we can just start reading the             C:\mort\Mort Code 08\code\main.c
                                           	// from, to, and size values...                                                 C:\mort\Mort Code 08\code\main.c
                                           get_entry:                                                                       C:\mort\Mort Code 08\code\main.c
                                           	_asm                                                                            C:\mort\Mort Code 08\code\main.c
003ff4   0009     TBLRDPOSTINC             	tblrdpostinc		// read the low byte of the source address into the prom variable C:\mort\Mort Code 08\code\main.c
003ff6   50f5     MOVF      0xf5,0x0,0x0   	movf TABLAT,0,0                                                                 C:\mort\Mort Code 08\code\main.c
003ff8   6f19     MOVWF     0x19,0x1       	movwf prom, 1                                                                   C:\mort\Mort Code 08\code\main.c
003ffa   0009     TBLRDPOSTINC             	tblrdpostinc		// read the middle byte of the source address into the prom variable C:\mort\Mort Code 08\code\main.c
003ffc   50f5     MOVF      0xf5,0x0,0x0   	movf TABLAT,0,0                                                                 C:\mort\Mort Code 08\code\main.c
003ffe   6f1a     MOVWF     0x1a,0x1       	movwf prom+1,1                                                                  C:\mort\Mort Code 08\code\main.c
004000   0009     TBLRDPOSTINC             	tblrdpostinc		// read the high byte of the source address into the prom variable C:\mort\Mort Code 08\code\main.c
004002   50f5     MOVF      0xf5,0x0,0x0   	movf TABLAT,0,0                                                                 C:\mort\Mort Code 08\code\main.c
004004   6f1b     MOVWF     0x1b,0x1       	movwf prom+2,1                                                                  C:\mort\Mort Code 08\code\main.c
004006   0009     TBLRDPOSTINC             	tblrdpostinc		// skip a byte since the source addresss is stored as a 32-bit value C:\mort\Mort Code 08\code\main.c
004008   0009     TBLRDPOSTINC             	tblrdpostinc		// read the lower byte of the destination address directly into FSR0L C:\mort\Mort Code 08\code\main.c
00400a   50f5     MOVF      0xf5,0x0,0x0   	movf TABLAT,0,0                                                                 C:\mort\Mort Code 08\code\main.c
00400c   6ee9     MOVWF     0xe9,0x0       	movwf FSR0L,0                                                                   C:\mort\Mort Code 08\code\main.c
00400e   0009     TBLRDPOSTINC             	tblrdpostinc		// read the upper byte of the destination address directly into FSR0H C:\mort\Mort Code 08\code\main.c
004010   50f5     MOVF      0xf5,0x0,0x0   	movf TABLAT,0,0                                                                 C:\mort\Mort Code 08\code\main.c
004012   6eea     MOVWF     0xea,0x0       	movwf FSR0H,0                                                                   C:\mort\Mort Code 08\code\main.c
004014   0009     TBLRDPOSTINC             	tblrdpostinc		// skip the next two bytes since the destination address is stored as a 32-bit value C:\mort\Mort Code 08\code\main.c
004016   0009     TBLRDPOSTINC             	tblrdpostinc                                                                    C:\mort\Mort Code 08\code\main.c
004018   0009     TBLRDPOSTINC             	tblrdpostinc		// read the lower byte of the size and store in the lower byte of curr_byte C:\mort\Mort Code 08\code\main.c
00401a   50f5     MOVF      0xf5,0x0,0x0   	movf TABLAT,0,0                                                                 C:\mort\Mort Code 08\code\main.c
00401c   6f1c     MOVWF     0x1c,0x1       	movwf curr_byte,1                                                               C:\mort\Mort Code 08\code\main.c
00401e   0009     TBLRDPOSTINC             	tblrdpostinc		// read the upper byte of the size and store in the upper byte of curr_byte C:\mort\Mort Code 08\code\main.c
004020   50f5     MOVF      0xf5,0x0,0x0   	movf TABLAT,0,0                                                                 C:\mort\Mort Code 08\code\main.c
004022   6f1d     MOVWF     0x1d,0x1       	movwf curr_byte+1,1                                                             C:\mort\Mort Code 08\code\main.c
004024   0009     TBLRDPOSTINC             	tblrdpostinc		// skip the next two bytes since the size is stored as a 32-bit value C:\mort\Mort Code 08\code\main.c
004026   0009     TBLRDPOSTINC             	tblrdpostinc                                                                    C:\mort\Mort Code 08\code\main.c
                                           	_endasm                                                                         C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
004028   cff6     MOVFF     0xff6,0x320    	data_ptr = TBLPTR;	// save the table pointer because it now points to the next table entry and we'll need it later C:\mort\Mort Code 08\code\main.c
00402a   f320                                                                                                               
00402c   cff7     MOVFF     0xff7,0x321                                                                                     
00402e   f321                                                                                                               
004030   cff8     MOVFF     0xff8,0x322                                                                                     
004032   f322                                                                                                               
004034   c319     MOVFF     0x319,0xff6    	TBLPTR = prom;		// now assign the source address to the table pointer           C:\mort\Mort Code 08\code\main.c
004036   fff6                                                                                                               
004038   c31a     MOVFF     0x31a,0xff7                                                                                     
00403a   fff7                                                                                                               
00403c   c31b     MOVFF     0x31b,0xff8                                                                                     
00403e   fff8                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           	// determine if we have any more data to copy from this block                   C:\mort\Mort Code 08\code\main.c
                                           	_asm                                                                            C:\mort\Mort Code 08\code\main.c
004040   0103     MOVLB     0x3            	movlb curr_byte                                                                 C:\mort\Mort Code 08\code\main.c
004042   531c     MOVF      0x1c,0x1,0x1   	movf curr_byte,1,1                                                              C:\mort\Mort Code 08\code\main.c
                                           copy_loop:                                                                       C:\mort\Mort Code 08\code\main.c
004044   e102     BNZ       0x404a         	bnz copy_one_byte                                                               C:\mort\Mort Code 08\code\main.c
004046   531d     MOVF      0x1d,0x1,0x1   	movf curr_byte+1,1,1                                                            C:\mort\Mort Code 08\code\main.c
004048   e007     BZ        0x4058         	bz done_copying                                                                 C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           	// we've read the table entry and know that we have data to copy                C:\mort\Mort Code 08\code\main.c
                                           	// so now do the actual transfer from flash memory to SRAM                      C:\mort\Mort Code 08\code\main.c
                                           copy_one_byte:                                                                   C:\mort\Mort Code 08\code\main.c
00404a   0009     TBLRDPOSTINC             	tblrdpostinc                                                                    C:\mort\Mort Code 08\code\main.c
00404c   50f5     MOVF      0xf5,0x0,0x0   	movf TABLAT,0,0                                                                 C:\mort\Mort Code 08\code\main.c
00404e   6eee     MOVWF     0xee,0x0       	movwf POSTINC0,0                                                                C:\mort\Mort Code 08\code\main.c
004050   071c     DECF      0x1c,0x1,0x1   	decf curr_byte,1,1	// decrement and test the byte counter                       C:\mort\Mort Code 08\code\main.c
004052   e2f8     BC        0x4044         	bc copy_loop                                                                    C:\mort\Mort Code 08\code\main.c
004054   071d     DECF      0x1d,0x1,0x1   	decf curr_byte+1,1,1                                                            C:\mort\Mort Code 08\code\main.c
004056   d7f9     BRA       0x404a         	bra copy_one_byte                                                               C:\mort\Mort Code 08\code\main.c
                                           done_copying:                                                                    C:\mort\Mort Code 08\code\main.c
                                           	_endasm                                                                         C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           	// restore the table pointer for the next entry                                 C:\mort\Mort Code 08\code\main.c
004058   c320     MOVFF     0x320,0xff6    	TBLPTR = data_ptr;                                                              C:\mort\Mort Code 08\code\main.c
00405a   fff6                                                                                                               
00405c   c321     MOVFF     0x321,0xff7                                                                                     
00405e   fff7                                                                                                               
004060   c322     MOVFF     0x322,0xff8                                                                                     
004062   fff8                                                                                                               
                                           	// next entry...                                                                C:\mort\Mort Code 08\code\main.c
004064   0103     MOVLB     0x3            	curr_entry--;                                                                   C:\mort\Mort Code 08\code\main.c
004066   071e     DECF      0x1e,0x1,0x1                                                                                    
004068   0e00     MOVLW     0x0                                                                                             
00406a   5b1f     SUBWFB    0x1f,0x1,0x1                                                                                    
00406c   d7bf     BRA       0x3fec         	goto zero_test;                                                                 C:\mort\Mort Code 08\code\main.c
                                           done:                                                                            C:\mort\Mort Code 08\code\main.c
                                           ;                                                                                C:\mort\Mort Code 08\code\main.c
00406e   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	FUNCTION:		Reset_Outputs()                                                     C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	PURPOSE:		Resets the robot controller PWM outputs to neutral and               C:\mort\Mort Code 08\code\main.c
                                           *					turns off all relays.                                                      C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	CALLED FROM:	main()                                                            C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\main.c
                                           *                                                                                C:\mort\Mort Code 08\code\main.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\main.c
                                           void Reset_Outputs(void)                                                         C:\mort\Mort Code 08\code\main.c
                                           {                                                                                C:\mort\Mort Code 08\code\main.c
004070   0101     MOVLB     0x1            	pwm01 = 127;                                                                    C:\mort\Mort Code 08\code\main.c
004072   0e7f     MOVLW     0x7f                                                                                            
004074   6f90     MOVWF     0x90,0x1                                                                                        
004076   6f91     MOVWF     0x91,0x1       	pwm02 = 127;                                                                    C:\mort\Mort Code 08\code\main.c
004078   6f92     MOVWF     0x92,0x1       	pwm03 = 127;                                                                    C:\mort\Mort Code 08\code\main.c
00407a   6f93     MOVWF     0x93,0x1       	pwm04 = 127;                                                                    C:\mort\Mort Code 08\code\main.c
00407c   6f94     MOVWF     0x94,0x1       	pwm05 = 127;                                                                    C:\mort\Mort Code 08\code\main.c
00407e   6f95     MOVWF     0x95,0x1       	pwm06 = 127;                                                                    C:\mort\Mort Code 08\code\main.c
004080   6f96     MOVWF     0x96,0x1       	pwm07 = 127;                                                                    C:\mort\Mort Code 08\code\main.c
004082   6f97     MOVWF     0x97,0x1       	pwm08 = 127;                                                                    C:\mort\Mort Code 08\code\main.c
004084   6f98     MOVWF     0x98,0x1       	pwm09 = 127;                                                                    C:\mort\Mort Code 08\code\main.c
004086   6f99     MOVWF     0x99,0x1       	pwm10 = 127;                                                                    C:\mort\Mort Code 08\code\main.c
004088   6f9a     MOVWF     0x9a,0x1       	pwm11 = 127;                                                                    C:\mort\Mort Code 08\code\main.c
00408a   6f9b     MOVWF     0x9b,0x1       	pwm12 = 127;                                                                    C:\mort\Mort Code 08\code\main.c
00408c   6f9c     MOVWF     0x9c,0x1       	pwm13 = 127;                                                                    C:\mort\Mort Code 08\code\main.c
00408e   6f9d     MOVWF     0x9d,0x1       	pwm14 = 127;                                                                    C:\mort\Mort Code 08\code\main.c
004090   6f9e     MOVWF     0x9e,0x1       	pwm15 = 127;                                                                    C:\mort\Mort Code 08\code\main.c
004092   6f9f     MOVWF     0x9f,0x1       	pwm16 = 127;                                                                    C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
004094   908d     BCF       0x8d,0x0,0x0   	relay1_fwd = 0;                                                                 C:\mort\Mort Code 08\code\main.c
004096   908c     BCF       0x8c,0x0,0x0   	relay1_rev = 0;                                                                 C:\mort\Mort Code 08\code\main.c
004098   928d     BCF       0x8d,0x1,0x0   	relay2_fwd = 0;                                                                 C:\mort\Mort Code 08\code\main.c
00409a   928c     BCF       0x8c,0x1,0x0   	relay2_rev = 0;                                                                 C:\mort\Mort Code 08\code\main.c
00409c   948d     BCF       0x8d,0x2,0x0   	relay3_fwd = 0;                                                                 C:\mort\Mort Code 08\code\main.c
00409e   948c     BCF       0x8c,0x2,0x0   	relay3_rev = 0;                                                                 C:\mort\Mort Code 08\code\main.c
0040a0   968d     BCF       0x8d,0x3,0x0   	relay4_fwd = 0;                                                                 C:\mort\Mort Code 08\code\main.c
0040a2   968c     BCF       0x8c,0x3,0x0   	relay4_rev = 0;                                                                 C:\mort\Mort Code 08\code\main.c
0040a4   988d     BCF       0x8d,0x4,0x0   	relay5_fwd = 0;                                                                 C:\mort\Mort Code 08\code\main.c
0040a6   988c     BCF       0x8c,0x4,0x0   	relay5_rev = 0;                                                                 C:\mort\Mort Code 08\code\main.c
0040a8   9a8d     BCF       0x8d,0x5,0x0   	relay6_fwd = 0;                                                                 C:\mort\Mort Code 08\code\main.c
0040aa   9a8c     BCF       0x8c,0x5,0x0   	relay6_rev = 0;                                                                 C:\mort\Mort Code 08\code\main.c
0040ac   9c8d     BCF       0x8d,0x6,0x0   	relay7_fwd = 0;                                                                 C:\mort\Mort Code 08\code\main.c
0040ae   9c8c     BCF       0x8c,0x6,0x0   	relay7_rev = 0;                                                                 C:\mort\Mort Code 08\code\main.c
0040b0   9091     BCF       0x91,0x0,0x0   	relay8_fwd = 0;                                                                 C:\mort\Mort Code 08\code\main.c
0040b2   9e8c     BCF       0x8c,0x7,0x0   	relay8_rev = 0;                                                                 C:\mort\Mort Code 08\code\main.c
0040b4   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\main.c
                                           * FUNCTION NAME: Get_Analog_Value                                                C:\mort\Mort Code 08\code\main.c
                                           * PURPOSE:       Reads the analog voltage on an A/D port and returns the         C:\mort\Mort Code 08\code\main.c
                                           *                10-bit value read stored in an unsigned int.                    C:\mort\Mort Code 08\code\main.c
                                           * CALLED FROM:                                                                   C:\mort\Mort Code 08\code\main.c
                                           * ARGUMENTS:                                                                     C:\mort\Mort Code 08\code\main.c
                                           *      Argument         Type        IO   Description                             C:\mort\Mort Code 08\code\main.c
                                           *     -----------   -------------   --   -----------                             C:\mort\Mort Code 08\code\main.c
                                           *     ADC_channel       alias       I    alias found in ifi_aliases.h            C:\mort\Mort Code 08\code\main.c
                                           * RETURNS:       unsigned int                                                    C:\mort\Mort Code 08\code\main.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\main.c
0040b6   cfd9     MOVFF     0xfd9,0xfe6    unsigned int Get_Analog_Value (unsigned char ADC_channel)                        C:\mort\Mort Code 08\code\main.c
0040b8   ffe6                                                                                                               
0040ba   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0040bc   ffd9                                                                                                               
0040be   0e02     MOVLW     0x2                                                                                             
0040c0   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\mort\Mort Code 08\code\main.c
                                             unsigned int result;                                                           C:\mort\Mort Code 08\code\main.c
                                                                                                                            C:\mort\Mort Code 08\code\main.c
                                           #if defined(__18F8722)                                                           C:\mort\Mort Code 08\code\main.c
0040d2   0ef1     MOVLW     0xf1             OpenADC( ADC_FOSC_RC & ADC_RIGHT_JUST & ADC_0_TAD,                             C:\mort\Mort Code 08\code\main.c
0040d4   6ee6     MOVWF     0xe6,0x0                                                                                        
0040c2   0e0f     MOVLW     0xf                       ADC_channel & ADC_INT_OFF & ADC_VREFPLUS_VDD & ADC_VREFMINUS_VSS,15); C:\mort\Mort Code 08\code\main.c
0040c4   6ee6     MOVWF     0xe6,0x0                                                                                        
0040c6   0efe     MOVLW     0xfe                                                                                            
0040c8   50db     MOVF      0xdb,0x0,0x0                                                                                    
0040ca   0b7f     ANDLW     0x7f                                                                                            
0040cc   0bfe     ANDLW     0xfe                                                                                            
0040ce   0bfd     ANDLW     0xfd                                                                                            
0040d0   6ee6     MOVWF     0xe6,0x0                                                                                        
0040d6   ec80     CALL      0x4700,0x0                                                                                      
0040d8   f023                                                                                                               
0040da   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0040dc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0040de   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           #else                                                                            C:\mort\Mort Code 08\code\main.c
                                             OpenADC( ADC_FOSC_RC & ADC_RIGHT_JUST & ifi_analog_channels,                   C:\mort\Mort Code 08\code\main.c
                                                     ADC_channel & ADC_INT_OFF & ADC_VREFPLUS_VDD & ADC_VREFMINUS_VSS );    C:\mort\Mort Code 08\code\main.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\main.c
0040e0   0e0a     MOVLW     0xa              Delay10TCYx(10);                                                               C:\mort\Mort Code 08\code\main.c
0040e2   6ee6     MOVWF     0xe6,0x0                                                                                        
0040e4   ec8f     CALL      0x491e,0x0                                                                                      
0040e6   f024                                                                                                               
0040e8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0040ea   ecaf     CALL      0x495e,0x0       ConvertADC();                                                                  C:\mort\Mort Code 08\code\main.c
0040ec   f024                                                                                                               
0040ee   ec07     CALL      0x80e,0x0        while(BusyADC());                                                              C:\mort\Mort Code 08\code\main.c
0040f0   f004                                                                                                               
0040f2   0900     IORLW     0x0                                                                                             
0040f4   e1fc     BNZ       0x40ee                                                                                          
0040f6   ec0b     CALL      0x4816,0x0       ReadADC();                                                                     C:\mort\Mort Code 08\code\main.c
0040f8   f024                                                                                                               
0040fa   ecac     CALL      0x4958,0x0       CloseADC();                                                                    C:\mort\Mort Code 08\code\main.c
0040fc   f024                                                                                                               
0040fe   50c4     MOVF      0xc4,0x0,0x0     result = (int) ADRESH << 8 | ADRESL;                                           C:\mort\Mort Code 08\code\main.c
004100   6e02     MOVWF     0x2,0x0                                                                                         
004102   6e03     MOVWF     0x3,0x0                                                                                         
004104   6a02     CLRF      0x2,0x0                                                                                         
004106   50c3     MOVF      0xc3,0x0,0x0                                                                                    
004108   0100     MOVLB     0x0                                                                                             
00410a   1002     IORWF     0x2,0x0,0x0                                                                                     
00410c   6e00     MOVWF     0x0,0x0                                                                                         
00410e   c003     MOVFF     0x3,0x1                                                                                         
004110   f001                                                                                                               
004112   6ede     MOVWF     0xde,0x0                                                                                        
004114   c003     MOVFF     0x3,0xfdd                                                                                       
004116   ffdd                                                                                                               
004118   cfde     MOVFF     0xfde,0x0        return result;                                                                 C:\mort\Mort Code 08\code\main.c
00411a   f000                                                                                                               
00411c   cfdd     MOVFF     0xfdd,0x1                                                                                       
00411e   f001                                                                                                               
004120   c000     MOVFF     0x0,0xff3                                                                                       
004122   fff3                                                                                                               
004124   c001     MOVFF     0x1,0xff4                                                                                       
004126   fff4                                                                                                               
004128   0e02     MOVLW     0x2            }                                                                                C:\mort\Mort Code 08\code\main.c
00412a   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
00412c   e202     BC        0x4132                                                                                          
00412e   6ae1     CLRF      0xe1,0x0                                                                                        
004130   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004132   6ee1     MOVWF     0xe1,0x0                                                                                        
004134   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004136   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
004138   ffd9                                                                                                               
00413a   0012     RETURN    0x0                                                                                             
                                           /******************************************************************************* C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	TITLE:		serial_ports.c                                                         C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	VERSION:	0.5 (Beta)                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	DATE:		01-Jan-2008                                                             C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	AUTHOR:		R. Kevin Watson                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                           *				kevinw@jpl.nasa.gov                                                         C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	COMMENTS:	The source code in this file implements a fully buffered,            C:\mort\Mort Code 08\code\serial_ports.c
                                           *				interrupt-driven serial port driver that can be used with                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *				the on-board serial ports.                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *				This version is compatible with Microchip C18 3.0+ only.                    C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *				You are free to use this source code for any non-commercial                 C:\mort\Mort Code 08\code\serial_ports.c
                                           *				use. Please do not make copies of this source code, modified                C:\mort\Mort Code 08\code\serial_ports.c
                                           *				or un-modified, publicly available on the internet or                       C:\mort\Mort Code 08\code\serial_ports.c
                                           *				elsewhere without permission. Thanks.                                       C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *				Copyright ©2004-2008 R. Kevin Watson. All rights are reserved.              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           ******************************************************************************** C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	CHANGE LOG:                                                                    C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	DATE         REV  DESCRIPTION                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           *	-----------  ---  ----------------------------------------------------------   C:\mort\Mort Code 08\code\serial_ports.c
                                           *	22-Dec-2004  0.1  RKW - Original code.                                         C:\mort\Mort Code 08\code\serial_ports.c
                                           *	28-Dec-2004  0.2  RKW - Using preprocessor directives, added the ability       C:\mort\Mort Code 08\code\serial_ports.c
                                           *	                  to enable/disable individual serial port receive and         C:\mort\Mort Code 08\code\serial_ports.c
                                           *	                  transmit code. Updated documentation.                        C:\mort\Mort Code 08\code\serial_ports.c
                                           *	05-Feb-2005  0.3  RKW - Added _user_putc() interface to C18's new output       C:\mort\Mort Code 08\code\serial_ports.c
                                           *	                  stream capabilities. Updated documentation.                  C:\mort\Mort Code 08\code\serial_ports.c
                                           *	05-Jan-2006  0.4  RKW - Partial port to 18F8722. Updated documentation.        C:\mort\Mort Code 08\code\serial_ports.c
                                           *	10-Jan-2006  0.4  RKW - Modified the #pragma interruptlow line to also         C:\mort\Mort Code 08\code\serial_ports.c
                                           *	                  save the .tmpdata section.                                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *	01-Jan-2008  0.5  RKW - Modified code to accept a baud rate when calling       C:\mort\Mort Code 08\code\serial_ports.c
                                           *	                  the Init_Serial_Port_One() and Init_Serial_Port_Two()        C:\mort\Mort Code 08\code\serial_ports.c
                                           *	                  functions.                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           #include "ifi_frc.h"                                                             C:\mort\Mort Code 08\code\serial_ports.c
                                           #include "serial_ports.h"                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           // by default stdout stream output is sent to the null device,                   C:\mort\Mort Code 08\code\serial_ports.c
                                           // which is the only device guaranteed to be present.                            C:\mort\Mort Code 08\code\serial_ports.c
                                           unsigned char stdout_serial_port = NUL;                                          C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           //                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           // Serial Port 1 Receive Variables:                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           //                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_ONE_RX                                                 C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char Rx_1_Queue[RX_1_QUEUE_SIZE];	// serial port 1's receive circular queue C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char Rx_1_Queue_Full = FALSE;		// flag that indicates that serial port 1's C:\mort\Mort Code 08\code\serial_ports.c
                                           													// receive circular queue is full and cannot                        C:\mort\Mort Code 08\code\serial_ports.c
                                           													// accept any more data                                             C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           unsigned char Rx_1_Queue_Empty = TRUE;				// flag that indicates that there is no more C:\mort\Mort Code 08\code\serial_ports.c
                                           													// data present in serial port 1's receive                          C:\mort\Mort Code 08\code\serial_ports.c
                                           													// circular queue                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           unsigned char Rx_1_Queue_Read_Index = 0;			// read index into serial port 1's receive C:\mort\Mort Code 08\code\serial_ports.c
                                           													// circular queue                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char Rx_1_Queue_Write_Index = 0;	// write index into serial port 1's receive C:\mort\Mort Code 08\code\serial_ports.c
                                           													// circular queue                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char Rx_1_Queue_Byte_Count = 0;	// number of bytes in serial port 1's receive C:\mort\Mort Code 08\code\serial_ports.c
                                           													// circular queue                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char RX_1_Overrun_Errors = 0;		// number of overrun errors that have occurred C:\mort\Mort Code 08\code\serial_ports.c
                                           													// in serial port 1's receive circuitry since                       C:\mort\Mort Code 08\code\serial_ports.c
                                           													// the last reset                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char RX_1_Framing_Errors = 0;		// number of framing errors that have occurred C:\mort\Mort Code 08\code\serial_ports.c
                                           													// in serial port 1's receive circuitry since                       C:\mort\Mort Code 08\code\serial_ports.c
                                           													// the last reset                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           //                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           // Serial Port 1 Transmit Variables:                                             C:\mort\Mort Code 08\code\serial_ports.c
                                           //                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_ONE_TX                                                 C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char Tx_1_Queue[TX_1_QUEUE_SIZE];	// serial port 1's transmit circular queue C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char Tx_1_Queue_Full = FALSE;		// flag that indicates that serial port 1's C:\mort\Mort Code 08\code\serial_ports.c
                                           													// transmit circular queue is full and cannot                       C:\mort\Mort Code 08\code\serial_ports.c
                                           													// accept any more data                                             C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char Tx_1_Queue_Empty = TRUE;		// flag that indicates that there is no more C:\mort\Mort Code 08\code\serial_ports.c
                                           													// data to send in serial port 1's transmit                         C:\mort\Mort Code 08\code\serial_ports.c
                                           													// circular queue                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char Tx_1_Queue_Read_Index = 0;	// read index into serial port 1's transmit C:\mort\Mort Code 08\code\serial_ports.c
                                           													// circular queue                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           unsigned char Tx_1_Queue_Write_Index = 0;			// write index into serial port 1's transmit C:\mort\Mort Code 08\code\serial_ports.c
                                           													// circular queue                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char Tx_1_Queue_Byte_Count = 0;	// number of bytes in serial port 1's transmit C:\mort\Mort Code 08\code\serial_ports.c
                                           													// circular queue                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           //                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           // Serial Port 2 Receive Variables:                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           //                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_TWO_RX                                                 C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char Rx_2_Queue[RX_2_QUEUE_SIZE];	// serial port 2's receive circular queue C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char Rx_2_Queue_Full = FALSE;		// flag that indicates that serial port 2's C:\mort\Mort Code 08\code\serial_ports.c
                                           													// receive circular queue is full and cannot                        C:\mort\Mort Code 08\code\serial_ports.c
                                           													// accept any more data                                             C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           unsigned char Rx_2_Queue_Empty = TRUE;				// flag that indicates that there is no more C:\mort\Mort Code 08\code\serial_ports.c
                                           													// data present in serial port 2's receive                          C:\mort\Mort Code 08\code\serial_ports.c
                                           													// circular queue                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           unsigned char Rx_2_Queue_Read_Index = 0;			// read index into serial port 2's receive C:\mort\Mort Code 08\code\serial_ports.c
                                           													// circular queue                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char Rx_2_Queue_Write_Index = 0;	// write index into serial port 2's receive C:\mort\Mort Code 08\code\serial_ports.c
                                           													// circular queue                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char Rx_2_Queue_Byte_Count = 0;	// number of bytes in serial port 2's receive C:\mort\Mort Code 08\code\serial_ports.c
                                           													// circular queue                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char RX_2_Overrun_Errors = 0;		// number of overrun errors that have occurred C:\mort\Mort Code 08\code\serial_ports.c
                                           													// in serial port 2's receive circuitry since                       C:\mort\Mort Code 08\code\serial_ports.c
                                           													// the last reset                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char RX_2_Framing_Errors = 0;		// number of framing errors that have occurred C:\mort\Mort Code 08\code\serial_ports.c
                                           													// in serial port 2's receive circuitry since                       C:\mort\Mort Code 08\code\serial_ports.c
                                           													// the last reset                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           //                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           // Serial Port 2 Transmit Variables:                                             C:\mort\Mort Code 08\code\serial_ports.c
                                           //                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_TWO_TX                                                 C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char Tx_2_Queue[TX_2_QUEUE_SIZE];	// serial port 2's transmit circular queue C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char Tx_2_Queue_Full = FALSE;		// flag that indicates that serial port 2's C:\mort\Mort Code 08\code\serial_ports.c
                                           													// transmit circular queue is full and cannot                       C:\mort\Mort Code 08\code\serial_ports.c
                                           													// accept any more data                                             C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char Tx_2_Queue_Empty = TRUE;		// flag that indicates that there is no more C:\mort\Mort Code 08\code\serial_ports.c
                                           													// data to send in serial port 2's transmit                         C:\mort\Mort Code 08\code\serial_ports.c
                                           													// circular queue                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char Tx_2_Queue_Read_Index = 0;	// read index into serial port 2's transmit C:\mort\Mort Code 08\code\serial_ports.c
                                           													// circular queue                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           unsigned char Tx_2_Queue_Write_Index = 0;			// write index into serial port 2's transmit C:\mort\Mort Code 08\code\serial_ports.c
                                           													// circular queue                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           volatile unsigned char Tx_2_Queue_Byte_Count = 0;	// number of bytes in serial port 2's transmit C:\mort\Mort Code 08\code\serial_ports.c
                                           													// circular queue                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	FUNCTION:		Init_Serial_Port_One()                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PURPOSE:		Initializes serial port one for asynchronous operation               C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	CALLED FROM:	main.c/Initialization()                                           C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PARAMETERS:		unsigned char (see comment below)                                 C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	COMMENTS:		This function must be called before you try to use serial           C:\mort\Mort Code 08\code\serial_ports.c
                                           *					port one.                                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *					The	serial port's baud rate is programmed by calling this                  C:\mort\Mort Code 08\code\serial_ports.c
                                           *					function with one of the predefined baud rates found in                    C:\mort\Mort Code 08\code\serial_ports.c
                                           *					serial_ports.h.                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *					This function will not be included in the build unless                     C:\mort\Mort Code 08\code\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_ONE_RX or ENABLE_SERIAL_PORT_ONE_TX                     C:\mort\Mort Code 08\code\serial_ports.c
                                           *					is #define'd in serial_ports.h                                             C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\serial_ports.c
0035a6   d97f     RCALL     0x38a6         void Init_Serial_Port_One(unsigned char Baud_Rate)                               C:\mort\Mort Code 08\code\serial_ports.c
                                           {                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           	// Start by initializing the serial port with code                              C:\mort\Mort Code 08\code\serial_ports.c
                                           	// common to receive and transmit functions                                     C:\mort\Mort Code 08\code\serial_ports.c
0035a8   0efe     MOVLW     0xfe           	switch(Baud_Rate)                                                               C:\mort\Mort Code 08\code\serial_ports.c
0035aa   50db     MOVF      0xdb,0x0,0x0                                                                                    
0035ac   0a08     XORLW     0x8                                                                                             
0035ae   e01e     BZ        0x35ec                                                                                          
0035b0   0a0f     XORLW     0xf                                                                                             
0035b2   e01a     BZ        0x35e8                                                                                          
0035b4   0a01     XORLW     0x1                                                                                             
0035b6   e016     BZ        0x35e4                                                                                          
0035b8   0a03     XORLW     0x3                                                                                             
0035ba   e012     BZ        0x35e0                                                                                          
0035bc   0a01     XORLW     0x1                                                                                             
0035be   e00e     BZ        0x35dc                                                                                          
0035c0   0a07     XORLW     0x7                                                                                             
0035c2   e008     BZ        0x35d4                                                                                          
0035c4   0a01     XORLW     0x1                                                                                             
0035c6   e004     BZ        0x35d0                                                                                          
0035c8   0a03     XORLW     0x3                                                                                             
0035ca   e112     BNZ       0x35f0                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		case BAUD_4800:                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
0035cc   0e81     MOVLW     0x81           			SPBRG1 = 129;                                                                 C:\mort\Mort Code 08\code\serial_ports.c
                                           			TXSTA1bits.BRGH = 0;                                                          C:\mort\Mort Code 08\code\serial_ports.c
0035ce   d003     BRA       0x35d6         			break;                                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           		case BAUD_9600:                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
0035d0   0e40     MOVLW     0x40           			SPBRG1 = 64;                                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           			TXSTA1bits.BRGH = 0;                                                          C:\mort\Mort Code 08\code\serial_ports.c
0035d2   d001     BRA       0x35d6         			break;                                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           		case BAUD_14400:                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
0035d4   0e2a     MOVLW     0x2a           			SPBRG1 = 42;                                                                  C:\mort\Mort Code 08\code\serial_ports.c
0035d6   6eaf     MOVWF     0xaf,0x0                                                                                        
0035d8   94ac     BCF       0xac,0x2,0x0   			TXSTA1bits.BRGH = 0;                                                          C:\mort\Mort Code 08\code\serial_ports.c
0035da   d00d     BRA       0x35f6         			break;                                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           		case BAUD_19200:                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
0035dc   0e81     MOVLW     0x81           			SPBRG1 = 129;                                                                 C:\mort\Mort Code 08\code\serial_ports.c
                                           			TXSTA1bits.BRGH = 1;                                                          C:\mort\Mort Code 08\code\serial_ports.c
0035de   d009     BRA       0x35f2         			break;                                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           		case BAUD_38400:                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
0035e0   0e40     MOVLW     0x40           			SPBRG1 = 64;                                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           			TXSTA1bits.BRGH = 1;                                                          C:\mort\Mort Code 08\code\serial_ports.c
0035e2   d007     BRA       0x35f2         			break;                                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           		case BAUD_57600:                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
0035e4   0e2a     MOVLW     0x2a           			SPBRG1 = 42;                                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           			TXSTA1bits.BRGH = 1;                                                          C:\mort\Mort Code 08\code\serial_ports.c
0035e6   d005     BRA       0x35f2         			break;                                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           		case BAUD_115200:                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
0035e8   0e15     MOVLW     0x15           			SPBRG1 = 21;                                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           			TXSTA1bits.BRGH = 1;                                                          C:\mort\Mort Code 08\code\serial_ports.c
0035ea   d003     BRA       0x35f2         			break;                                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           		case BAUD_230400:                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
0035ec   0e0a     MOVLW     0xa            			SPBRG1 = 10;                                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           			TXSTA1bits.BRGH = 1;                                                          C:\mort\Mort Code 08\code\serial_ports.c
0035ee   d001     BRA       0x35f2         			break;                                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           		default:                                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
0035f0   0e15     MOVLW     0x15           			SPBRG1 = 21;                                                                  C:\mort\Mort Code 08\code\serial_ports.c
0035f2   6eaf     MOVWF     0xaf,0x0                                                                                        
0035f4   84ac     BSF       0xac,0x2,0x0   			TXSTA1bits.BRGH = 1;                                                          C:\mort\Mort Code 08\code\serial_ports.c
                                           			break;                                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           	}                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
0035f6   9a9d     BCF       0x9d,0x5,0x0   	PIE1bits.RC1IE = 0;		// receive interrupt enable bit [127]                      C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: disables received data interrupt                                   C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: enables received data interrupt                                    C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
0035f8   989d     BCF       0x9d,0x4,0x0   	PIE1bits.TX1IE = 0;		// transmit interrupt enable bit [127]                     C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: disables transmit register empty interrupt                         C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: enables transmit register empty interrupt                          C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
0035fa   98ac     BCF       0xac,0x4,0x0   	TXSTA1bits.SYNC = 0;	// USART mode select bit [248]                             C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: asynchronous mode                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: synchronous mode                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
0035fc   9eac     BCF       0xac,0x7,0x0   	TXSTA1bits.CSRC = 0;	// clock source select bit (synchronous mode only) [248]   C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: Slave mode (clock generated by external source)                    C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: Master mode (clock generated internally from BRG)                  C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// if receive functionality is to be included in the                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// software build, include code that is specific to                             C:\mort\Mort Code 08\code\serial_ports.c
                                           	// initializing the receiver                                                    C:\mort\Mort Code 08\code\serial_ports.c
                                           	#ifdef ENABLE_SERIAL_PORT_ONE_RX                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
0035fe   8e94     BSF       0x94,0x7,0x0   	TRISCbits.TRISC7 = 1;	// make sure the RC7/RX1/DT1 pin is configured as an input [140] C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003600   9cab     BCF       0xab,0x6,0x0   	RCSTA1bits.RX9 = 0;		// 9-bit receive enable bit [249]                          C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: 8-bit reception mode                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: 9-bit reception mode                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003602   96ab     BCF       0xab,0x3,0x0   	RCSTA1bits.ADDEN = 0;	// address detect enable bit (9-bit asynchronous mode only) [249] C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: disables address detection                                         C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: enables address detection                                          C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003604   8aab     BSF       0xab,0x5,0x0   	RCSTA1bits.SREN = 1;	// single receive enable bit (master synchronous mode only) [249] C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: disables single receive mode                                       C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: enables single receive mode                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003606   88ab     BSF       0xab,0x4,0x0   	RCSTA1bits.CREN = 1;	// continuous receive mode enable bit [249]                C:\mort\Mort Code 08\code\serial_ports.c
                                           							// asynchronous mode:                                                     C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: disables receiver                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: enable receiver                                                    C:\mort\Mort Code 08\code\serial_ports.c
                                           							// synchronous mode:                                                      C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: disables continuous receive                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: enables continuous receive until CREN is cleared                   C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003608   9a9f     BCF       0x9f,0x5,0x0   	IPR1bits.RC1IP = 0;		// receive interrupt priority bit (must be 0 for IFI controllers) [130] C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: low-priority                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: high-priority                                                      C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
00360a   8a9d     BSF       0x9d,0x5,0x0   	PIE1bits.RC1IE = 1;		// receive interrupt enable bit [127]                      C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: disables received data interrupt                                   C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: enables received data interrupt                                    C:\mort\Mort Code 08\code\serial_ports.c
                                           	#endif					//                                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// if transmit functionality is to be included in the                           C:\mort\Mort Code 08\code\serial_ports.c
                                           	// software build, include code that is specific to                             C:\mort\Mort Code 08\code\serial_ports.c
                                           	// initializing the serial port transmitter                                     C:\mort\Mort Code 08\code\serial_ports.c
                                           	#ifdef ENABLE_SERIAL_PORT_ONE_TX                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
00360c   0102     MOVLB     0x2            	stdout = _H_USER;		// use this driver for output stream functions               C:\mort\Mort Code 08\code\serial_ports.c
00360e   69fd     SETF      0xfd,0x1                                                                                        
003610   69fe     SETF      0xfe,0x1                                                                                        
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003612   9c94     BCF       0x94,0x6,0x0   	TRISCbits.TRISC6 = 0;	// make sure the RC6/TX1/CK1 pin is configured as an output [140] C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003614   9cac     BCF       0xac,0x6,0x0   	TXSTA1bits.TX9 = 0;		// 9-bit transmit enable bit [248]                         C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: 8-bit transmission mode                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: 9-bit transmission mode                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003616   96ac     BCF       0xac,0x3,0x0   	TXSTA1bits.SENDB = 0;	// send break character bit [248]                         C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: Sync Break transmission completed                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: Send Sync Break on next transmission                               C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003618   989f     BCF       0x9f,0x4,0x0   	IPR1bits.TX1IP = 0;		// transmit interrupt priority bit (must be 0 for IFI controllers) [130] C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: low-priority                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: high-priority                                                      C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
00361a   889d     BSF       0x9d,0x4,0x0   	PIE1bits.TX1IE = 1;		// transmit interrupt enable bit [127]                     C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: disables transmit register empty interrupt                         C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: enables transmit register empty interrupt                          C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
00361c   8aac     BSF       0xac,0x5,0x0   	TXSTA1bits.TXEN = 1;  	// Enable transmitter [248]                              C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: serial transmitter is disabled                                     C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: serial transmitter                                                 C:\mort\Mort Code 08\code\serial_ports.c
                                           	#endif					//                                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// finally, turn on the serial port                                             C:\mort\Mort Code 08\code\serial_ports.c
00361e   8eab     BSF       0xab,0x7,0x0   	RCSTA1bits.SPEN = 1;  	// Serial Port Enable [249]                              C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: serial port is disabled                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: serial port is enabled                                             C:\mort\Mort Code 08\code\serial_ports.c
003620   d147     BRA       0x38b0         }                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	FUNCTION:		Init_Serial_Port_Two()                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PURPOSE:		Initializes serial port two for asynchronous operation               C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	CALLED FROM:	main.c/Initialization()                                           C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PARAMETERS:		unsigned char (see comment below)                                 C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	COMMENTS:		This function must be called before you try to use serial           C:\mort\Mort Code 08\code\serial_ports.c
                                           *					port two.                                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *					The	serial port's baud rate is programmed by calling this                  C:\mort\Mort Code 08\code\serial_ports.c
                                           *					function with one of the predefined baud rates found in                    C:\mort\Mort Code 08\code\serial_ports.c
                                           *					serial_ports.h.                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *					This function will not be included in the build unless                     C:\mort\Mort Code 08\code\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_TWO_RX or ENABLE_SERIAL_PORT_TWO_TX                     C:\mort\Mort Code 08\code\serial_ports.c
                                           *					is #define'd in serial_ports.h                                             C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\serial_ports.c
003622   d941     RCALL     0x38a6         void Init_Serial_Port_Two(unsigned char Baud_Rate)                               C:\mort\Mort Code 08\code\serial_ports.c
0038a6   cfd9     MOVFF     0xfd9,0xfe6                                                                                     
0038a8   ffe6                                                                                                               
0038aa   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0038ac   ffd9                                                                                                               
0038ae   0012     RETURN    0x0                                                                                             
                                           {                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           	// Start by initializing the serial port with code                              C:\mort\Mort Code 08\code\serial_ports.c
                                           	// common to receive and transmit functions                                     C:\mort\Mort Code 08\code\serial_ports.c
003624   0efe     MOVLW     0xfe           	switch(Baud_Rate)                                                               C:\mort\Mort Code 08\code\serial_ports.c
003626   50db     MOVF      0xdb,0x0,0x0                                                                                    
003628   0a08     XORLW     0x8                                                                                             
00362a   e01c     BZ        0x3664                                                                                          
00362c   0a0f     XORLW     0xf                                                                                             
00362e   e018     BZ        0x3660                                                                                          
003630   0a01     XORLW     0x1                                                                                             
003632   e014     BZ        0x365c                                                                                          
003634   0a03     XORLW     0x3                                                                                             
003636   e010     BZ        0x3658                                                                                          
003638   0a01     XORLW     0x1                                                                                             
00363a   e00c     BZ        0x3654                                                                                          
00363c   0a07     XORLW     0x7                                                                                             
00363e   e008     BZ        0x3650                                                                                          
003640   0a01     XORLW     0x1                                                                                             
003642   e004     BZ        0x364c                                                                                          
003644   0a03     XORLW     0x3                                                                                             
003646   e112     BNZ       0x366c                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		case BAUD_4800:                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
003648   0e81     MOVLW     0x81           			SPBRG2 = 129;                                                                 C:\mort\Mort Code 08\code\serial_ports.c
                                           			TXSTA2bits.BRGH = 0;                                                          C:\mort\Mort Code 08\code\serial_ports.c
00364a   d011     BRA       0x366e         			break;                                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           		case BAUD_9600:                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
00364c   0e40     MOVLW     0x40           			SPBRG2 = 64;                                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           			TXSTA2bits.BRGH = 0;                                                          C:\mort\Mort Code 08\code\serial_ports.c
00364e   d00f     BRA       0x366e         			break;                                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           		case BAUD_14400:                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
003650   0e2a     MOVLW     0x2a           			SPBRG2 = 42;                                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           			TXSTA2bits.BRGH = 0;                                                          C:\mort\Mort Code 08\code\serial_ports.c
003652   d00d     BRA       0x366e         			break;                                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           		case BAUD_19200:                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
003654   0e81     MOVLW     0x81           			SPBRG2 = 129;                                                                 C:\mort\Mort Code 08\code\serial_ports.c
                                           			TXSTA2bits.BRGH = 1;                                                          C:\mort\Mort Code 08\code\serial_ports.c
003656   d007     BRA       0x3666         			break;                                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           		case BAUD_38400:                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
003658   0e40     MOVLW     0x40           			SPBRG2 = 64;                                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           			TXSTA2bits.BRGH = 1;                                                          C:\mort\Mort Code 08\code\serial_ports.c
00365a   d005     BRA       0x3666         			break;                                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           		case BAUD_57600:                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
00365c   0e2a     MOVLW     0x2a           			SPBRG2 = 42;                                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           			TXSTA2bits.BRGH = 1;                                                          C:\mort\Mort Code 08\code\serial_ports.c
00365e   d003     BRA       0x3666         			break;                                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           		case BAUD_115200:                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
003660   0e15     MOVLW     0x15           			SPBRG2 = 21;                                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           			TXSTA2bits.BRGH = 1;                                                          C:\mort\Mort Code 08\code\serial_ports.c
003662   d001     BRA       0x3666         			break;                                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           		case BAUD_230400:                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
003664   0e0a     MOVLW     0xa            			SPBRG2 = 10;                                                                  C:\mort\Mort Code 08\code\serial_ports.c
003666   6e6f     MOVWF     0x6f,0x0                                                                                        
003668   846c     BSF       0x6c,0x2,0x0   			TXSTA2bits.BRGH = 1;                                                          C:\mort\Mort Code 08\code\serial_ports.c
00366a   d003     BRA       0x3672         			break;                                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           		default: // default for serial port two is 9600 baud.                          C:\mort\Mort Code 08\code\serial_ports.c
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
00366c   0e40     MOVLW     0x40           			SPBRG2 = 64;                                                                  C:\mort\Mort Code 08\code\serial_ports.c
00366e   6e6f     MOVWF     0x6f,0x0                                                                                        
003670   946c     BCF       0x6c,0x2,0x0   			TXSTA2bits.BRGH = 0;                                                          C:\mort\Mort Code 08\code\serial_ports.c
                                           			break;                                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           	}                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
003672   9aa3     BCF       0xa3,0x5,0x0   	PIE3bits.RC2IE = 0;		// receive interrupt enable bit [129]                      C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: disables received data interrupt                                   C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: enables received data interrupt                                    C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003674   98a3     BCF       0xa3,0x4,0x0   	PIE3bits.TX2IE = 0;		// transmit interrupt enable bit [129]                     C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: disables transmit register empty interrupt                         C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: enables transmit register empty interrupt                          C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003676   986c     BCF       0x6c,0x4,0x0   	TXSTA2bits.SYNC = 0;	// USART mode select bit [248]                             C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: asynchronous mode                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: synchronous mode                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003678   9e6c     BCF       0x6c,0x7,0x0   	TXSTA2bits.CSRC = 0;	// clock source select bit (synchronous mode only) [248]   C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: Slave mode (clock generated by external source)                    C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: Master mode (clock generated internally from BRG)                  C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// if receive functionality is to be included in the                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// software build, include code that is specific to                             C:\mort\Mort Code 08\code\serial_ports.c
                                           	// initializing the receiver                                                    C:\mort\Mort Code 08\code\serial_ports.c
                                           	#ifdef ENABLE_SERIAL_PORT_TWO_RX                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
00367a   8498     BSF       0x98,0x2,0x0   	TRISGbits.TRISG2 = 1;	// make sure the RG2/RX2/DT2 pin is configured as an input [151] C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
00367c   9c6b     BCF       0x6b,0x6,0x0   	RCSTA2bits.RX9 = 0;		// 9-bit receive enable bit [249]                          C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: 8-bit reception mode                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: 9-bit reception mode                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
00367e   966b     BCF       0x6b,0x3,0x0   	RCSTA2bits.ADDEN = 0;	// address detect enable bit (9-bit asynchronous mode only) [249] C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: disables address detection                                         C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: enables address detection                                          C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003680   8a6b     BSF       0x6b,0x5,0x0   	RCSTA2bits.SREN = 1;	// single receive enable bit (master synchronous mode only) [249] C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: disables single receive mode                                       C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: enables single receive mode                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003682   886b     BSF       0x6b,0x4,0x0   	RCSTA2bits.CREN = 1;	// continuous receive mode enable bit [249]                C:\mort\Mort Code 08\code\serial_ports.c
                                           							// asynchronous mode:                                                     C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: disables receiver                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: enable receiver                                                    C:\mort\Mort Code 08\code\serial_ports.c
                                           							// synchronous mode:                                                      C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: disables continuous receive                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: enables continuous receive until CREN is cleared                   C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003684   9aa5     BCF       0xa5,0x5,0x0   	IPR3bits.RC2IP = 0;		// receive interrupt priority bit (must be 0 for IFI controllers) [132] C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: low-priority                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: high-priority                                                      C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003686   8aa3     BSF       0xa3,0x5,0x0   	PIE3bits.RC2IE = 1;		// receive interrupt enable bit [129]                      C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: disables received data interrupt                                   C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: enables received data interrupt                                    C:\mort\Mort Code 08\code\serial_ports.c
                                           	#endif					//                                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// if transmit functionality is to be included in the                           C:\mort\Mort Code 08\code\serial_ports.c
                                           	// software build, include code that is specific to                             C:\mort\Mort Code 08\code\serial_ports.c
                                           	// initializing the serial port transmitter                                     C:\mort\Mort Code 08\code\serial_ports.c
                                           	#ifdef ENABLE_SERIAL_PORT_TWO_TX                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003688   0102     MOVLB     0x2            	stdout = _H_USER;		// use this driver for output stream functions               C:\mort\Mort Code 08\code\serial_ports.c
00368a   69fd     SETF      0xfd,0x1                                                                                        
00368c   69fe     SETF      0xfe,0x1                                                                                        
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
00368e   9298     BCF       0x98,0x1,0x0   	TRISGbits.TRISG1 = 0;	// make sure the RG1/TX2/CK2 pin is configured as an output [151] C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003690   9c6c     BCF       0x6c,0x6,0x0   	TXSTA2bits.TX9 = 0;		// 9-bit transmit enable bit [248]                         C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: 8-bit transmission mode                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: 9-bit transmission mode                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003692   966c     BCF       0x6c,0x3,0x0   	TXSTA2bits.SENDB = 0;	// send break character bit [248]                         C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: Sync Break transmission completed                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: Send Sync Break on next transmission                               C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003694   98a5     BCF       0xa5,0x4,0x0   	IPR3bits.TX2IP = 0;		// transmit interrupt priority bit (must be 0 for IFI controllers) [132] C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: low-priority                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: high-priority                                                      C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003696   88a3     BSF       0xa3,0x4,0x0   	PIE3bits.TX2IE = 1;		// transmit interrupt enable bit [129]                     C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: disables transmit register empty interrupt                         C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: enables transmit register empty interrupt                          C:\mort\Mort Code 08\code\serial_ports.c
                                           							//                                                                        C:\mort\Mort Code 08\code\serial_ports.c
003698   8a6c     BSF       0x6c,0x5,0x0   	TXSTA2bits.TXEN = 1;  	// Enable transmitter [248]                              C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: serial transmitter is disabled                                     C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: serial transmitter                                                 C:\mort\Mort Code 08\code\serial_ports.c
                                           	#endif					//                                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// finally, turn on the serial port                                             C:\mort\Mort Code 08\code\serial_ports.c
00369a   8e6b     BSF       0x6b,0x7,0x0   	RCSTA2bits.SPEN = 1;  	// Serial Port Enable [249]                              C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  0: serial port is disabled                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           							//  1: serial port is enabled                                             C:\mort\Mort Code 08\code\serial_ports.c
00369c   d109     BRA       0x38b0         }                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	FUNCTION:		Serial_Port_One_Byte_Count()                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PURPOSE:		Returns the number of bytes in serial port                           C:\mort\Mort Code 08\code\serial_ports.c
                                           *					ones's received data queue.                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PARAMETERS:		none                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	RETURNS:		unsigned char                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	COMMENTS:		This function must be called to determine how much data,            C:\mort\Mort Code 08\code\serial_ports.c
                                           *					if any, is present in serial port one's received data                      C:\mort\Mort Code 08\code\serial_ports.c
                                           *					queue. If the returned number is greater than zero, then                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *					a call to Read_Serial_Port_One() can be made to retrieve                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *					the next byte.                                                             C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *					This function will not be included in the build unless                     C:\mort\Mort Code 08\code\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_ONE_RX is #define'd in serial_ports.h                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_ONE_RX                                                 C:\mort\Mort Code 08\code\serial_ports.c
00369e   d903     RCALL     0x38a6         unsigned char Serial_Port_One_Byte_Count(void)                                   C:\mort\Mort Code 08\code\serial_ports.c
0036a0   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           	unsigned char temp;                                                             C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// since we're about to use the Rx_1_Queue_Byte_Count variable,                 C:\mort\Mort Code 08\code\serial_ports.c
                                           	// which can also be modified in the interrupt service routine,                 C:\mort\Mort Code 08\code\serial_ports.c
                                           	// let's briefly disable the serial port interrupt to make sure                 C:\mort\Mort Code 08\code\serial_ports.c
                                           	// that Rx_1_Queue_Byte_Count doesn't get altered while we're                   C:\mort\Mort Code 08\code\serial_ports.c
                                           	// using it.                                                                    C:\mort\Mort Code 08\code\serial_ports.c
0036a2   9a9d     BCF       0x9d,0x5,0x0   	PIE1bits.RC1IE = 0;                                                             C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// now we can get a local copy of the byte count without fear                   C:\mort\Mort Code 08\code\serial_ports.c
                                           	// that we'll get corrupted data                                                C:\mort\Mort Code 08\code\serial_ports.c
0036a4   c305     MOVFF     0x305,0xfdf    	temp = Rx_1_Queue_Byte_Count;                                                   C:\mort\Mort Code 08\code\serial_ports.c
0036a6   ffdf                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// okay, we have a local copy of the byte count, so turn the                    C:\mort\Mort Code 08\code\serial_ports.c
                                           	// serial port interrupt back on.                                               C:\mort\Mort Code 08\code\serial_ports.c
0036a8   8a9d     BSF       0x9d,0x5,0x0   	PIE1bits.RC1IE = 1;                                                             C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// return the byte count                                                        C:\mort\Mort Code 08\code\serial_ports.c
0036aa   50df     MOVF      0xdf,0x0,0x0   	return(temp);                                                                   C:\mort\Mort Code 08\code\serial_ports.c
0036ac   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\mort\Mort Code 08\code\serial_ports.c
0036ae   d100     BRA       0x38b0                                                                                          
                                           #endif                                                                           C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	FUNCTION:		Serial_Port_Two_Byte_Count()                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PURPOSE:		Returns the number of bytes in serial port                           C:\mort\Mort Code 08\code\serial_ports.c
                                           *					two's received data queue.                                                 C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PARAMETERS:		none                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	RETURNS:		unsigned char                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	COMMENTS:		This function must be called to determine how much data,            C:\mort\Mort Code 08\code\serial_ports.c
                                           *					if any, is present in serial port two's received data                      C:\mort\Mort Code 08\code\serial_ports.c
                                           *					queue. If the returned number is greater than zero, then                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *					a call to Read_Serial_Port_Two() can be made to retrieve                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *					the next byte.                                                             C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *					This function will not be included in the build unless                     C:\mort\Mort Code 08\code\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_TWO_RX is #define'd in serial_ports.h                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_TWO_RX                                                 C:\mort\Mort Code 08\code\serial_ports.c
0036b0   d8fa     RCALL     0x38a6         unsigned char Serial_Port_Two_Byte_Count(void)                                   C:\mort\Mort Code 08\code\serial_ports.c
0036b2   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           	unsigned char temp;                                                             C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// since we're about to use the Rx_1_Queue_Byte_Count variable,                 C:\mort\Mort Code 08\code\serial_ports.c
                                           	// which can also be modified in the interrupt service routine,                 C:\mort\Mort Code 08\code\serial_ports.c
                                           	// let's briefly disable the serial port interrupt to make sure                 C:\mort\Mort Code 08\code\serial_ports.c
                                           	// that Rx_1_Queue_Byte_Count doesn't get altered while we're                   C:\mort\Mort Code 08\code\serial_ports.c
                                           	// using it.                                                                    C:\mort\Mort Code 08\code\serial_ports.c
0036b4   9aa3     BCF       0xa3,0x5,0x0   	PIE3bits.RC2IE = 0;                                                             C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// now we can get a local copy of the byte count without fear                   C:\mort\Mort Code 08\code\serial_ports.c
                                           	// that we'll get corrupted data                                                C:\mort\Mort Code 08\code\serial_ports.c
0036b6   c311     MOVFF     0x311,0xfdf    	temp = Rx_2_Queue_Byte_Count;                                                   C:\mort\Mort Code 08\code\serial_ports.c
0036b8   ffdf                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// okay, we have a local copy of the byte count, so turn the                    C:\mort\Mort Code 08\code\serial_ports.c
                                           	// serial port interrupt back on.                                               C:\mort\Mort Code 08\code\serial_ports.c
0036ba   8aa3     BSF       0xa3,0x5,0x0   	PIE3bits.RC2IE = 1;                                                             C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// return the byte count                                                        C:\mort\Mort Code 08\code\serial_ports.c
0036bc   50df     MOVF      0xdf,0x0,0x0   	return(temp);                                                                   C:\mort\Mort Code 08\code\serial_ports.c
0036be   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\mort\Mort Code 08\code\serial_ports.c
0036c0   d0f7     BRA       0x38b0                                                                                          
                                           #endif                                                                           C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	FUNCTION:		Read_Serial_Port_One()                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PURPOSE:                                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PARAMETERS:		none                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	RETURNS:		unsigned char                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	COMMENTS:		This function will not be included in the build unless              C:\mort\Mort Code 08\code\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_ONE_RX is #define'd in serial_ports.h                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_ONE_RX                                                 C:\mort\Mort Code 08\code\serial_ports.c
0036c2   d8f1     RCALL     0x38a6         unsigned char Read_Serial_Port_One(void)                                         C:\mort\Mort Code 08\code\serial_ports.c
0036c4   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           	unsigned char byte;                                                             C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
0036c6   0103     MOVLB     0x3            	if(Rx_1_Queue_Empty)                                                            C:\mort\Mort Code 08\code\serial_ports.c
0036c8   5102     MOVF      0x2,0x0,0x1                                                                                     
0036ca   e002     BZ        0x36d0                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		// error: no data to read                                                      C:\mort\Mort Code 08\code\serial_ports.c
0036cc   0e00     MOVLW     0x0            		return(0);                                                                     C:\mort\Mort Code 08\code\serial_ports.c
0036ce   d015     BRA       0x36fa                                                                                          
                                           	}                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           	else                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	{                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		// get a byte from the circular queue and store it temporarily                 C:\mort\Mort Code 08\code\serial_ports.c
0036d0   5103     MOVF      0x3,0x0,0x1    		byte = Rx_1_Queue[Rx_1_Queue_Read_Index];                                      C:\mort\Mort Code 08\code\serial_ports.c
0036d2   6aea     CLRF      0xea,0x0                                                                                        
0036d4   0f00     ADDLW     0x0                                                                                             
0036d6   6ee9     MOVWF     0xe9,0x0                                                                                        
0036d8   0e02     MOVLW     0x2                                                                                             
0036da   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0036dc   cfef     MOVFF     0xfef,0xfdf                                                                                     
0036de   ffdf                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// decrement the queue byte count                                              C:\mort\Mort Code 08\code\serial_ports.c
0036e0   0705     DECF      0x5,0x1,0x1    		Rx_1_Queue_Byte_Count--;                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// increment the read pointer                                                  C:\mort\Mort Code 08\code\serial_ports.c
0036e2   2b03     INCF      0x3,0x1,0x1    		Rx_1_Queue_Read_Index++;                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// If the index pointer overflowed, cut-off the high-order bit. Doing this     C:\mort\Mort Code 08\code\serial_ports.c
                                           		// every time is quicker than checking for overflow every time with an if()    C:\mort\Mort Code 08\code\serial_ports.c
                                           		// statement and only then occasionally setting it back to zero. For this      C:\mort\Mort Code 08\code\serial_ports.c
                                           		// to work, the queue size must be a power of 2 (e.g., 16,32,64,128...).       C:\mort\Mort Code 08\code\serial_ports.c
0036e4   0e1f     MOVLW     0x1f           		Rx_1_Queue_Read_Index &= RX_1_QUEUE_INDEX_MASK;                                C:\mort\Mort Code 08\code\serial_ports.c
0036e6   1703     ANDWF     0x3,0x1,0x1                                                                                     
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// since we're about to use the Rx_1_Queue_Write_Index variable, which can     C:\mort\Mort Code 08\code\serial_ports.c
                                           		// also be modified in the interrupt service routine, let's briefly disable    C:\mort\Mort Code 08\code\serial_ports.c
                                           		// the serial port interrupt to make sure that Rx_1_Queue_Write_Index doesn't  C:\mort\Mort Code 08\code\serial_ports.c
                                           		// get altered while we're using it.                                           C:\mort\Mort Code 08\code\serial_ports.c
0036e8   9a9d     BCF       0x9d,0x5,0x0   		PIE1bits.RC1IE = 0;                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// is the circular queue now empty?                                            C:\mort\Mort Code 08\code\serial_ports.c
0036ea   5104     MOVF      0x4,0x0,0x1    		if(Rx_1_Queue_Read_Index == Rx_1_Queue_Write_Index)                            C:\mort\Mort Code 08\code\serial_ports.c
0036ec   5d03     SUBWF     0x3,0x0,0x1                                                                                     
0036ee   e102     BNZ       0x36f4                                                                                          
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
0036f0   0e01     MOVLW     0x1            			Rx_1_Queue_Empty = TRUE;                                                      C:\mort\Mort Code 08\code\serial_ports.c
0036f2   6f02     MOVWF     0x2,0x1                                                                                         
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// okay, we're done using Rx_1_Queue_Write_Index, so turn the serial port      C:\mort\Mort Code 08\code\serial_ports.c
                                           		// interrupt back on.                                                          C:\mort\Mort Code 08\code\serial_ports.c
0036f4   8a9d     BSF       0x9d,0x5,0x0   		PIE1bits.RC1IE = 1;                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                            		// Since we've just removed a byte to the queue, it can't possibly be full.   C:\mort\Mort Code 08\code\serial_ports.c
                                           		// Again, this is quicker than using an if() statement every time              C:\mort\Mort Code 08\code\serial_ports.c
0036f6   6b01     CLRF      0x1,0x1        		Rx_1_Queue_Full = FALSE;                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// return the data                                                             C:\mort\Mort Code 08\code\serial_ports.c
0036f8   50df     MOVF      0xdf,0x0,0x0   		return(byte);                                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           	}                                                                               C:\mort\Mort Code 08\code\serial_ports.c
0036fa   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\mort\Mort Code 08\code\serial_ports.c
0036fc   d0d9     BRA       0x38b0                                                                                          
                                           #endif                                                                           C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	FUNCTION:		Read_Serial_Port_Two()                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PURPOSE:                                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PARAMETERS:		none                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	RETURNS:		unsigned char                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	COMMENTS:		This function will not be included in the build unless              C:\mort\Mort Code 08\code\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_TWO_RX is #define'd in serial_ports.h                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_TWO_RX                                                 C:\mort\Mort Code 08\code\serial_ports.c
0036fe   d8d3     RCALL     0x38a6         unsigned char Read_Serial_Port_Two(void)                                         C:\mort\Mort Code 08\code\serial_ports.c
003700   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           	unsigned char byte;                                                             C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
003702   0103     MOVLB     0x3            	if(Rx_2_Queue_Empty)                                                            C:\mort\Mort Code 08\code\serial_ports.c
003704   510e     MOVF      0xe,0x0,0x1                                                                                     
003706   e002     BZ        0x370c                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		// error: no data to read                                                      C:\mort\Mort Code 08\code\serial_ports.c
003708   0e00     MOVLW     0x0            		return(0);                                                                     C:\mort\Mort Code 08\code\serial_ports.c
00370a   d015     BRA       0x3736                                                                                          
                                           	}                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           	else                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	{                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		// get a byte from the circular queue and store it temporarily                 C:\mort\Mort Code 08\code\serial_ports.c
00370c   510f     MOVF      0xf,0x0,0x1    		byte = Rx_2_Queue[Rx_2_Queue_Read_Index];                                      C:\mort\Mort Code 08\code\serial_ports.c
00370e   6aea     CLRF      0xea,0x0                                                                                        
003710   0f40     ADDLW     0x40                                                                                            
003712   6ee9     MOVWF     0xe9,0x0                                                                                        
003714   0e02     MOVLW     0x2                                                                                             
003716   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
003718   cfef     MOVFF     0xfef,0xfdf                                                                                     
00371a   ffdf                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// decrement the queue byte count                                              C:\mort\Mort Code 08\code\serial_ports.c
00371c   0711     DECF      0x11,0x1,0x1   		Rx_2_Queue_Byte_Count--;                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// increment the read pointer                                                  C:\mort\Mort Code 08\code\serial_ports.c
00371e   2b0f     INCF      0xf,0x1,0x1    		Rx_2_Queue_Read_Index++;                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// If the index pointer overflowed, cut-off the high-order bit. Doing this     C:\mort\Mort Code 08\code\serial_ports.c
                                           		// every time is quicker than checking for overflow every time with an if()    C:\mort\Mort Code 08\code\serial_ports.c
                                           		// statement and only then occasionally setting it back to zero. For this      C:\mort\Mort Code 08\code\serial_ports.c
                                           		// to work, the queue size must be a power of 2 (e.g., 16,32,64,128...).       C:\mort\Mort Code 08\code\serial_ports.c
003720   0e1f     MOVLW     0x1f           		Rx_2_Queue_Read_Index &= RX_2_QUEUE_INDEX_MASK;                                C:\mort\Mort Code 08\code\serial_ports.c
003722   170f     ANDWF     0xf,0x1,0x1                                                                                     
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// since we're about to use the Rx_2_Queue_Write_Index variable, which can     C:\mort\Mort Code 08\code\serial_ports.c
                                           		// also be modified in the interrupt service routine, let's briefly disable    C:\mort\Mort Code 08\code\serial_ports.c
                                           		// the serial port interrupt to make sure that Rx_2_Queue_Write_Index doesn't  C:\mort\Mort Code 08\code\serial_ports.c
                                           		// get altered while we're using it.                                           C:\mort\Mort Code 08\code\serial_ports.c
003724   9aa3     BCF       0xa3,0x5,0x0   		PIE3bits.RC2IE = 0;                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// is the circular queue now empty?                                            C:\mort\Mort Code 08\code\serial_ports.c
003726   5110     MOVF      0x10,0x0,0x1   		if(Rx_2_Queue_Read_Index == Rx_2_Queue_Write_Index)                            C:\mort\Mort Code 08\code\serial_ports.c
003728   5d0f     SUBWF     0xf,0x0,0x1                                                                                     
00372a   e102     BNZ       0x3730                                                                                          
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
00372c   0e01     MOVLW     0x1            			Rx_2_Queue_Empty = TRUE;                                                      C:\mort\Mort Code 08\code\serial_ports.c
00372e   6f0e     MOVWF     0xe,0x1                                                                                         
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// okay, we're done using Rx_2_Queue_Write_Index, so turn the serial port      C:\mort\Mort Code 08\code\serial_ports.c
                                           		// interrupt back on.                                                          C:\mort\Mort Code 08\code\serial_ports.c
003730   8aa3     BSF       0xa3,0x5,0x0   		PIE3bits.RC2IE = 1;                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                            		// Since we've just removed a byte to the queue, it can't possibly be full.   C:\mort\Mort Code 08\code\serial_ports.c
                                           		// Again, this is quicker than using an if() statement every time              C:\mort\Mort Code 08\code\serial_ports.c
003732   6b0d     CLRF      0xd,0x1        		Rx_2_Queue_Full = FALSE;                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// return the data                                                             C:\mort\Mort Code 08\code\serial_ports.c
003734   50df     MOVF      0xdf,0x0,0x0   		return(byte);                                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           	}                                                                               C:\mort\Mort Code 08\code\serial_ports.c
003736   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\mort\Mort Code 08\code\serial_ports.c
003738   d0bb     BRA       0x38b0                                                                                          
                                           #endif                                                                           C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	FUNCTION:		Write_Serial_Port_One()                                             C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PURPOSE:		Sends a byte of data using serial port one.                          C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PARAMETERS:		unsigned char                                                     C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	RETURNS:		nothing                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	COMMENTS:		If you don't initialize the serial port before calling              C:\mort\Mort Code 08\code\serial_ports.c
                                           *					this function, the robot controller will stop functioning                  C:\mort\Mort Code 08\code\serial_ports.c
                                           *					and you'll get the much dreaded red-light-of-death. This                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *					is because the while() statement below is waiting for the                  C:\mort\Mort Code 08\code\serial_ports.c
                                           *					transmit circuitry to send another byte, but if the serial                 C:\mort\Mort Code 08\code\serial_ports.c
                                           *					port hasn't been configured, nothing will be transmitted                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *					and we'll be stuck in the while() loop.                                    C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *					This function will not be included in the build unless                     C:\mort\Mort Code 08\code\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_ONE_TX is #define'd in serial_ports.h                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_ONE_TX                                                 C:\mort\Mort Code 08\code\serial_ports.c
00373a   d8b5     RCALL     0x38a6         void Write_Serial_Port_One(unsigned char byte)                                   C:\mort\Mort Code 08\code\serial_ports.c
                                           {                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           	// if the queue is full, wait here until space is available                     C:\mort\Mort Code 08\code\serial_ports.c
00373c   0103     MOVLB     0x3            	while(Tx_1_Queue_Full);                                                         C:\mort\Mort Code 08\code\serial_ports.c
00373e   5108     MOVF      0x8,0x0,0x1                                                                                     
003740   e1fd     BNZ       0x373c                                                                                          
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// put the byte on the circular queue                                           C:\mort\Mort Code 08\code\serial_ports.c
003742   510b     MOVF      0xb,0x0,0x1    	Tx_1_Queue[Tx_1_Queue_Write_Index] = byte;                                      C:\mort\Mort Code 08\code\serial_ports.c
003744   6aea     CLRF      0xea,0x0                                                                                        
003746   0f20     ADDLW     0x20                                                                                            
003748   6ee9     MOVWF     0xe9,0x0                                                                                        
00374a   0e02     MOVLW     0x2                                                                                             
00374c   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00374e   0efe     MOVLW     0xfe                                                                                            
003750   cfdb     MOVFF     0xfdb,0xfef                                                                                     
003752   ffef                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// increment the queue byte count                                               C:\mort\Mort Code 08\code\serial_ports.c
003754   2b0c     INCF      0xc,0x1,0x1    	Tx_1_Queue_Byte_Count++;                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// increment the write pointer                                                  C:\mort\Mort Code 08\code\serial_ports.c
003756   2b0b     INCF      0xb,0x1,0x1    	Tx_1_Queue_Write_Index++;                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// If the index pointer overflowed, cut-off the high-order bit. Doing this      C:\mort\Mort Code 08\code\serial_ports.c
                                           	// every time is quicker than checking for overflow every time with an if()     C:\mort\Mort Code 08\code\serial_ports.c
                                           	// statement and only then occasionally setting it back to zero. For this       C:\mort\Mort Code 08\code\serial_ports.c
                                           	// to work, the queue size must be a power of 2 (e.g., 16,32,64,128...).        C:\mort\Mort Code 08\code\serial_ports.c
003758   0e1f     MOVLW     0x1f           	Tx_1_Queue_Write_Index &= TX_1_QUEUE_INDEX_MASK;                                C:\mort\Mort Code 08\code\serial_ports.c
00375a   170b     ANDWF     0xb,0x1,0x1                                                                                     
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// since we're about to use the Tx_1_Queue_Write_Index variable, which can      C:\mort\Mort Code 08\code\serial_ports.c
                                           	// also be modified in the interrupt service routine, let's briefly disable     C:\mort\Mort Code 08\code\serial_ports.c
                                           	// the serial port interrupt to make sure that Tx_1_Queue_Write_Index doesn't   C:\mort\Mort Code 08\code\serial_ports.c
                                           	// get altered while we're using it.                                            C:\mort\Mort Code 08\code\serial_ports.c
00375c   989d     BCF       0x9d,0x4,0x0   	PIE1bits.TX1IE = 0;                                                             C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// is the circular queue now full?                                              C:\mort\Mort Code 08\code\serial_ports.c
00375e   510b     MOVF      0xb,0x0,0x1    	if(Tx_1_Queue_Read_Index == Tx_1_Queue_Write_Index)                             C:\mort\Mort Code 08\code\serial_ports.c
003760   5d0a     SUBWF     0xa,0x0,0x1                                                                                     
003762   e102     BNZ       0x3768                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\serial_ports.c
003764   0e01     MOVLW     0x1            		Tx_1_Queue_Full = TRUE;                                                        C:\mort\Mort Code 08\code\serial_ports.c
003766   6f08     MOVWF     0x8,0x1                                                                                         
                                           	}                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// okay, we're done using Tx_Queue_Write_Index, so turn the serial port         C:\mort\Mort Code 08\code\serial_ports.c
                                           	// interrupt back on.                                                           C:\mort\Mort Code 08\code\serial_ports.c
003768   889d     BSF       0x9d,0x4,0x0   	PIE1bits.TX1IE = 1;                                                             C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// Since we've just added a byte to the queue, it can't possibly be empty.      C:\mort\Mort Code 08\code\serial_ports.c
                                           	// Again, this is quicker than using an if() statement every time               C:\mort\Mort Code 08\code\serial_ports.c
00376a   6b09     CLRF      0x9,0x1        	Tx_1_Queue_Empty = FALSE;                                                       C:\mort\Mort Code 08\code\serial_ports.c
00376c   d0a1     BRA       0x38b0         }                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	FUNCTION:		Write_Serial_Port_Two()                                             C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PURPOSE:		Sends a byte of data using serial port two.                          C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PARAMETERS:		unsigned char                                                     C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	RETURNS:		nothing                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	COMMENTS:		If you don't initialize the serial port before calling              C:\mort\Mort Code 08\code\serial_ports.c
                                           *					this function, the robot controller will stop functioning                  C:\mort\Mort Code 08\code\serial_ports.c
                                           *					and you'll get the much dreaded red-light-of-death. This                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *					is because the while() statement below is waiting for the                  C:\mort\Mort Code 08\code\serial_ports.c
                                           *					transmit circuitry to send another byte, but if the serial                 C:\mort\Mort Code 08\code\serial_ports.c
                                           *					port hasn't been configured, nothing will be transmitted                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *					and we'll be stuck in the while() loop.                                    C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *					This function will not be included in the build unless                     C:\mort\Mort Code 08\code\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_TWO_TX is #define'd in serial_ports.h                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_TWO_TX                                                 C:\mort\Mort Code 08\code\serial_ports.c
00376e   d89b     RCALL     0x38a6         void Write_Serial_Port_Two(unsigned char byte)                                   C:\mort\Mort Code 08\code\serial_ports.c
                                           {                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           	// if the queue is full, wait here until space is available                     C:\mort\Mort Code 08\code\serial_ports.c
003770   0103     MOVLB     0x3            	while(Tx_2_Queue_Full);                                                         C:\mort\Mort Code 08\code\serial_ports.c
003772   5114     MOVF      0x14,0x0,0x1                                                                                    
003774   e1fd     BNZ       0x3770                                                                                          
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// put the byte on the circular queue                                           C:\mort\Mort Code 08\code\serial_ports.c
003776   5117     MOVF      0x17,0x0,0x1   	Tx_2_Queue[Tx_2_Queue_Write_Index] = byte;                                      C:\mort\Mort Code 08\code\serial_ports.c
003778   6aea     CLRF      0xea,0x0                                                                                        
00377a   0f60     ADDLW     0x60                                                                                            
00377c   6ee9     MOVWF     0xe9,0x0                                                                                        
00377e   0e02     MOVLW     0x2                                                                                             
003780   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
003782   0efe     MOVLW     0xfe                                                                                            
003784   cfdb     MOVFF     0xfdb,0xfef                                                                                     
003786   ffef                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// increment the queue byte count                                               C:\mort\Mort Code 08\code\serial_ports.c
003788   2b18     INCF      0x18,0x1,0x1   	Tx_2_Queue_Byte_Count++;                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// increment the write pointer                                                  C:\mort\Mort Code 08\code\serial_ports.c
00378a   2b17     INCF      0x17,0x1,0x1   	Tx_2_Queue_Write_Index++;                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// If the index pointer overflowed, cut-off the high-order bit. Doing this      C:\mort\Mort Code 08\code\serial_ports.c
                                           	// every time is quicker than checking for overflow every time with an if()     C:\mort\Mort Code 08\code\serial_ports.c
                                           	// statement and only then occasionally setting it back to zero. For this       C:\mort\Mort Code 08\code\serial_ports.c
                                           	// to work, the queue size must be a power of 2 (e.g., 16,32,64,128...).        C:\mort\Mort Code 08\code\serial_ports.c
00378c   0e1f     MOVLW     0x1f           	Tx_2_Queue_Write_Index &= TX_2_QUEUE_INDEX_MASK;                                C:\mort\Mort Code 08\code\serial_ports.c
00378e   1717     ANDWF     0x17,0x1,0x1                                                                                    
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// since we're about to use the Tx_2_Queue_Write_Index variable, which can      C:\mort\Mort Code 08\code\serial_ports.c
                                           	// also be modified in the interrupt service routine, let's briefly disable     C:\mort\Mort Code 08\code\serial_ports.c
                                           	// the serial port interrupt to make sure that Tx_2_Queue_Write_Index doesn't   C:\mort\Mort Code 08\code\serial_ports.c
                                           	// get altered while we're using it.                                            C:\mort\Mort Code 08\code\serial_ports.c
003790   98a3     BCF       0xa3,0x4,0x0   	PIE3bits.TX2IE = 0;                                                             C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// is the circular queue now full?                                              C:\mort\Mort Code 08\code\serial_ports.c
003792   5117     MOVF      0x17,0x0,0x1   	if(Tx_2_Queue_Read_Index == Tx_2_Queue_Write_Index)                             C:\mort\Mort Code 08\code\serial_ports.c
003794   5d16     SUBWF     0x16,0x0,0x1                                                                                    
003796   e102     BNZ       0x379c                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\serial_ports.c
003798   0e01     MOVLW     0x1            		Tx_2_Queue_Full = TRUE;                                                        C:\mort\Mort Code 08\code\serial_ports.c
00379a   6f14     MOVWF     0x14,0x1                                                                                        
                                           	}                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// okay, we're done using Tx_2_Queue_Write_Index, so turn the serial port       C:\mort\Mort Code 08\code\serial_ports.c
                                           	// interrupt back on.                                                           C:\mort\Mort Code 08\code\serial_ports.c
00379c   88a3     BSF       0xa3,0x4,0x0   	PIE3bits.TX2IE = 1;                                                             C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	// Since we've just added a byte to the queue, it can't possibly be empty.      C:\mort\Mort Code 08\code\serial_ports.c
                                           	// Again, this is quicker than using an if() statement every time               C:\mort\Mort Code 08\code\serial_ports.c
00379e   6b15     CLRF      0x15,0x1       	Tx_2_Queue_Empty = FALSE;                                                       C:\mort\Mort Code 08\code\serial_ports.c
0037a0   d087     BRA       0x38b0         }                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	FUNCTION:		Rx_1_ISR()                                                          C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PURPOSE:		Serial port one new data interrupt handler.                          C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	CALLED FROM:	ifi_frc.c/Interrupt_Handler_Low()                                 C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	COMMENTS:		If the interrupt handler was installed correctly, this              C:\mort\Mort Code 08\code\serial_ports.c
                                           *					function will be called every time a new byte of data                      C:\mort\Mort Code 08\code\serial_ports.c
                                           *					is received by serial port one.                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *					This function will not be included in the build unless                     C:\mort\Mort Code 08\code\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_ONE_RX is #define'd in serial_ports.h                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_ONE_RX                                                 C:\mort\Mort Code 08\code\serial_ports.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           void Rx_1_ISR(void)                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           {                                                                                C:\mort\Mort Code 08\code\serial_ports.c
0037a2   0103     MOVLB     0x3            	if(Rx_1_Queue_Full)                                                             C:\mort\Mort Code 08\code\serial_ports.c
0037a4   5101     MOVF      0x1,0x0,0x1                                                                                     
0037a6   e002     BZ        0x37ac                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		// just turn off the serial port interrupt if we can't store any more data.    C:\mort\Mort Code 08\code\serial_ports.c
                                           		// the interrupt will be re-enabled within the Receive_Byte() function when    C:\mort\Mort Code 08\code\serial_ports.c
                                           		// more data is read.                                                          C:\mort\Mort Code 08\code\serial_ports.c
0037a8   9a9d     BCF       0x9d,0x5,0x0   		PIE1bits.RC1IE = 0;                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	}                                                                               C:\mort\Mort Code 08\code\serial_ports.c
0037aa   0012     RETURN    0x0            	else                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	{                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		// put the byte on the circular queue                                          C:\mort\Mort Code 08\code\serial_ports.c
0037ac   5104     MOVF      0x4,0x0,0x1    		Rx_1_Queue[Rx_1_Queue_Write_Index] = RCREG1;                                   C:\mort\Mort Code 08\code\serial_ports.c
0037ae   6aea     CLRF      0xea,0x0                                                                                        
0037b0   0f00     ADDLW     0x0                                                                                             
0037b2   6ee9     MOVWF     0xe9,0x0                                                                                        
0037b4   0e02     MOVLW     0x2                                                                                             
0037b6   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0037b8   cfae     MOVFF     0xfae,0xfef                                                                                     
0037ba   ffef                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// if the interrupt handler was disabled while data was being received,        C:\mort\Mort Code 08\code\serial_ports.c
                                           		// data may have backed-up in the receiver circuitry, causing an overrun       C:\mort\Mort Code 08\code\serial_ports.c
                                           		// condition. So let's check the OERR bit to see if this has happened          C:\mort\Mort Code 08\code\serial_ports.c
                                           		// and if it has, we'll need to reset the serial port receiver circuitry       C:\mort\Mort Code 08\code\serial_ports.c
                                           		// to get data flowing again.                                                  C:\mort\Mort Code 08\code\serial_ports.c
0037bc   a2ab     BTFSS     0xab,0x1,0x0   		if(RCSTA1bits.OERR)                                                            C:\mort\Mort Code 08\code\serial_ports.c
0037be   d003     BRA       0x37c6                                                                                          
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           			// reset by turning off the receiver circuitry, then...                       C:\mort\Mort Code 08\code\serial_ports.c
0037c0   98ab     BCF       0xab,0x4,0x0   			RCSTA1bits.CREN = 0;                                                          C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           			// ...turn it back on                                                         C:\mort\Mort Code 08\code\serial_ports.c
0037c2   88ab     BSF       0xab,0x4,0x0   			RCSTA1bits.CREN = 1;                                                          C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           			// indicate that we've had an error                                           C:\mort\Mort Code 08\code\serial_ports.c
0037c4   2b06     INCF      0x6,0x1,0x1    			RX_1_Overrun_Errors++;                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// if incoming data gets misaligned and the receiver doesn't receive a         C:\mort\Mort Code 08\code\serial_ports.c
                                           		// stop bit where it expects to detect it, the receiver circuitry will         C:\mort\Mort Code 08\code\serial_ports.c
                                           		// set the FERR bit to indicate that it's received corrupted data. The         C:\mort\Mort Code 08\code\serial_ports.c
                                           		// likely reason for this is an incorrectly set baud rate on either the        C:\mort\Mort Code 08\code\serial_ports.c
                                           		// receiver or transmitter end.                                                C:\mort\Mort Code 08\code\serial_ports.c
0037c6   b4ab     BTFSC     0xab,0x2,0x0   		if(RCSTA1bits.FERR)                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
0037c8   2b07     INCF      0x7,0x1,0x1    			RX_1_Framing_Errors++;                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// increment the queue byte count                                              C:\mort\Mort Code 08\code\serial_ports.c
0037ca   2b05     INCF      0x5,0x1,0x1    		Rx_1_Queue_Byte_Count++;                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// increment the write pointer                                                 C:\mort\Mort Code 08\code\serial_ports.c
0037cc   2b04     INCF      0x4,0x1,0x1    		Rx_1_Queue_Write_Index++;                                                      C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// If the index pointer overflowed, cut-off the high-order bit. Doing this     C:\mort\Mort Code 08\code\serial_ports.c
                                           		// every time is quicker than checking for overflow every time with an if()    C:\mort\Mort Code 08\code\serial_ports.c
                                           		// statement and only then occasionally setting it back to zero. For this      C:\mort\Mort Code 08\code\serial_ports.c
                                           		// to work, the queue size must be a power of 2 (e.g., 16,32,64,128...).       C:\mort\Mort Code 08\code\serial_ports.c
0037ce   0e1f     MOVLW     0x1f           		Rx_1_Queue_Write_Index &= RX_1_QUEUE_INDEX_MASK;                               C:\mort\Mort Code 08\code\serial_ports.c
0037d0   1704     ANDWF     0x4,0x1,0x1                                                                                     
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// is the circular queue now full?                                             C:\mort\Mort Code 08\code\serial_ports.c
0037d2   5104     MOVF      0x4,0x0,0x1    		if(Rx_1_Queue_Read_Index == Rx_1_Queue_Write_Index)                            C:\mort\Mort Code 08\code\serial_ports.c
0037d4   5d03     SUBWF     0x3,0x0,0x1                                                                                     
0037d6   e102     BNZ       0x37dc                                                                                          
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
0037d8   0e01     MOVLW     0x1            			Rx_1_Queue_Full = TRUE;                                                       C:\mort\Mort Code 08\code\serial_ports.c
0037da   6f01     MOVWF     0x1,0x1                                                                                         
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// Since we've just added a byte to the queue, it can't possibly be empty.     C:\mort\Mort Code 08\code\serial_ports.c
                                           		// Again, this is quicker than using an if() statement every time              C:\mort\Mort Code 08\code\serial_ports.c
0037dc   6b02     CLRF      0x2,0x1        		Rx_1_Queue_Empty = FALSE;                                                      C:\mort\Mort Code 08\code\serial_ports.c
                                           	}                                                                               C:\mort\Mort Code 08\code\serial_ports.c
0037de   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	FUNCTION:		Rx_2_ISR()                                                          C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PURPOSE:		Serial port two new data interrupt handler.                          C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	CALLED FROM:	ifi_frc.c/Interrupt_Handler_Low()                                 C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	COMMENTS:		If the interrupt handler was installed correctly, this              C:\mort\Mort Code 08\code\serial_ports.c
                                           *					function will be called every time a new byte of data                      C:\mort\Mort Code 08\code\serial_ports.c
                                           *					is received by serial port two.                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *					This function will not be included in the build unless                     C:\mort\Mort Code 08\code\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_TWO_RX is #define'd in serial_ports.h                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_TWO_RX                                                 C:\mort\Mort Code 08\code\serial_ports.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           void Rx_2_ISR(void)                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           {                                                                                C:\mort\Mort Code 08\code\serial_ports.c
0037e0   0103     MOVLB     0x3            	if(Rx_2_Queue_Full)                                                             C:\mort\Mort Code 08\code\serial_ports.c
0037e2   510d     MOVF      0xd,0x0,0x1                                                                                     
0037e4   e002     BZ        0x37ea                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		// just turn off the serial port interrupt if we can't store any more data.    C:\mort\Mort Code 08\code\serial_ports.c
                                           		// the interrupt will be re-enabled within the Receive_Byte() function when    C:\mort\Mort Code 08\code\serial_ports.c
                                           		// more data is read.                                                          C:\mort\Mort Code 08\code\serial_ports.c
0037e6   9aa3     BCF       0xa3,0x5,0x0   		PIE3bits.RC2IE = 0;                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	}                                                                               C:\mort\Mort Code 08\code\serial_ports.c
0037e8   0012     RETURN    0x0            	else                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	{                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		// put the byte on the circular queue                                          C:\mort\Mort Code 08\code\serial_ports.c
0037ea   5110     MOVF      0x10,0x0,0x1   		Rx_2_Queue[Rx_2_Queue_Write_Index] = RCREG2;                                   C:\mort\Mort Code 08\code\serial_ports.c
0037ec   6aea     CLRF      0xea,0x0                                                                                        
0037ee   0f40     ADDLW     0x40                                                                                            
0037f0   6ee9     MOVWF     0xe9,0x0                                                                                        
0037f2   0e02     MOVLW     0x2                                                                                             
0037f4   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0037f6   cf6e     MOVFF     0xf6e,0xfef                                                                                     
0037f8   ffef                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// if the interrupt handler was disabled while data was being received,        C:\mort\Mort Code 08\code\serial_ports.c
                                           		// data may have backed-up in the receiver circuitry, causing an overrun       C:\mort\Mort Code 08\code\serial_ports.c
                                           		// condition. So let's check the OERR bit to see if this has happened          C:\mort\Mort Code 08\code\serial_ports.c
                                           		// and if it has, we'll need to reset the serial port receiver circuitry       C:\mort\Mort Code 08\code\serial_ports.c
                                           		// to get data flowing again.                                                  C:\mort\Mort Code 08\code\serial_ports.c
0037fa   a26b     BTFSS     0x6b,0x1,0x0   		if(RCSTA2bits.OERR)                                                            C:\mort\Mort Code 08\code\serial_ports.c
0037fc   d003     BRA       0x3804                                                                                          
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           			// reset by turning off the receiver circuitry, then...                       C:\mort\Mort Code 08\code\serial_ports.c
0037fe   986b     BCF       0x6b,0x4,0x0   			RCSTA2bits.CREN = 0;                                                          C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           			// ...turn it back on                                                         C:\mort\Mort Code 08\code\serial_ports.c
003800   886b     BSF       0x6b,0x4,0x0   			RCSTA2bits.CREN = 1;                                                          C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           			// indicate that we've had an error                                           C:\mort\Mort Code 08\code\serial_ports.c
003802   2b12     INCF      0x12,0x1,0x1   			RX_2_Overrun_Errors++;                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// if incoming data gets misaligned and the receiver doesn't receive a         C:\mort\Mort Code 08\code\serial_ports.c
                                           		// stop bit where it expects to detect it, the receiver circuitry will         C:\mort\Mort Code 08\code\serial_ports.c
                                           		// set the FERR bit to indicate that it's received corrupted data. The         C:\mort\Mort Code 08\code\serial_ports.c
                                           		// likely reason for this is an incorrectly set baud rate on either the        C:\mort\Mort Code 08\code\serial_ports.c
                                           		// receiver or transmitter end.                                                C:\mort\Mort Code 08\code\serial_ports.c
003804   b46b     BTFSC     0x6b,0x2,0x0   		if(RCSTA2bits.FERR)                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
003806   2b13     INCF      0x13,0x1,0x1   			RX_2_Framing_Errors++;                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// increment the queue byte count                                              C:\mort\Mort Code 08\code\serial_ports.c
003808   2b11     INCF      0x11,0x1,0x1   		Rx_2_Queue_Byte_Count++;                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// increment the write pointer                                                 C:\mort\Mort Code 08\code\serial_ports.c
00380a   2b10     INCF      0x10,0x1,0x1   		Rx_2_Queue_Write_Index++;                                                      C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// If the index pointer overflowed, cut-off the high-order bit. Doing this     C:\mort\Mort Code 08\code\serial_ports.c
                                           		// every time is quicker than checking for overflow every time with an if()    C:\mort\Mort Code 08\code\serial_ports.c
                                           		// statement and only then occasionally setting it back to zero. For this      C:\mort\Mort Code 08\code\serial_ports.c
                                           		// to work, the queue size must be a power of 2 (e.g., 16,32,64,128...).       C:\mort\Mort Code 08\code\serial_ports.c
00380c   0e1f     MOVLW     0x1f           		Rx_2_Queue_Write_Index &= RX_2_QUEUE_INDEX_MASK;                               C:\mort\Mort Code 08\code\serial_ports.c
00380e   1710     ANDWF     0x10,0x1,0x1                                                                                    
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// is the circular queue now full?                                             C:\mort\Mort Code 08\code\serial_ports.c
003810   5110     MOVF      0x10,0x0,0x1   		if(Rx_2_Queue_Read_Index == Rx_2_Queue_Write_Index)                            C:\mort\Mort Code 08\code\serial_ports.c
003812   5d0f     SUBWF     0xf,0x0,0x1                                                                                     
003814   e102     BNZ       0x381a                                                                                          
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
003816   0e01     MOVLW     0x1            			Rx_2_Queue_Full = TRUE;                                                       C:\mort\Mort Code 08\code\serial_ports.c
003818   6f0d     MOVWF     0xd,0x1                                                                                         
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// Since we've just added a byte to the queue, it can't possibly be empty.     C:\mort\Mort Code 08\code\serial_ports.c
                                           		// Again, this is quicker than using an if() statement every time              C:\mort\Mort Code 08\code\serial_ports.c
00381a   6b0e     CLRF      0xe,0x1        		Rx_2_Queue_Empty = FALSE;                                                      C:\mort\Mort Code 08\code\serial_ports.c
                                           	}                                                                               C:\mort\Mort Code 08\code\serial_ports.c
00381c   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	FUNCTION:		Tx_1_ISR()                                                          C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PURPOSE:		Serial port one empty transmit buffer interrupt handler.             C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	CALLED FROM:	ifi_frc.c/Interrupt_Handler_Low()                                 C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	COMMENTS:		If the interrupt handler was installed correctly, this              C:\mort\Mort Code 08\code\serial_ports.c
                                           *					function will be called every time serial port one is                      C:\mort\Mort Code 08\code\serial_ports.c
                                           *					ready to start sending a byte of data.                                     C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *					This function will not be included in the build unless                     C:\mort\Mort Code 08\code\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_ONE_TX is #define'd in serial_ports.h                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_ONE_TX                                                 C:\mort\Mort Code 08\code\serial_ports.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           void Tx_1_ISR(void)                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           {                                                                                C:\mort\Mort Code 08\code\serial_ports.c
00381e   0103     MOVLB     0x3            	if(Tx_1_Queue_Empty)                                                            C:\mort\Mort Code 08\code\serial_ports.c
003820   5109     MOVF      0x9,0x0,0x1                                                                                     
003822   e002     BZ        0x3828                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		// just turn off the serial port interrupt if we don't have data to send.      C:\mort\Mort Code 08\code\serial_ports.c
                                           		// the interrupt will be re-enabled within the Send_Byte() function when       C:\mort\Mort Code 08\code\serial_ports.c
                                           		// more data is sent.                                                          C:\mort\Mort Code 08\code\serial_ports.c
003824   989d     BCF       0x9d,0x4,0x0   		PIE1bits.TX1IE = 0;                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	}                                                                               C:\mort\Mort Code 08\code\serial_ports.c
003826   0012     RETURN    0x0            	else                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	{                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		// get a byte from the circular queue and send it to the USART                 C:\mort\Mort Code 08\code\serial_ports.c
003828   510a     MOVF      0xa,0x0,0x1    		TXREG1 = Tx_1_Queue[Tx_1_Queue_Read_Index];                                    C:\mort\Mort Code 08\code\serial_ports.c
00382a   6aea     CLRF      0xea,0x0                                                                                        
00382c   0f20     ADDLW     0x20                                                                                            
00382e   6ee9     MOVWF     0xe9,0x0                                                                                        
003830   0e02     MOVLW     0x2                                                                                             
003832   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
003834   50ef     MOVF      0xef,0x0,0x0                                                                                    
003836   6ead     MOVWF     0xad,0x0                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// decrement the queue byte count                                              C:\mort\Mort Code 08\code\serial_ports.c
003838   070c     DECF      0xc,0x1,0x1    		Tx_1_Queue_Byte_Count--;                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// increment the read pointer                                                  C:\mort\Mort Code 08\code\serial_ports.c
00383a   2b0a     INCF      0xa,0x1,0x1    		Tx_1_Queue_Read_Index++;                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// If the index pointer overflowed, cut-off the high-order bit. Doing this     C:\mort\Mort Code 08\code\serial_ports.c
                                           		// every time is quicker than checking for overflow every time with an if()    C:\mort\Mort Code 08\code\serial_ports.c
                                           		// statement and only then occasionally setting it back to zero. For this      C:\mort\Mort Code 08\code\serial_ports.c
                                           		// to work, the queue size must be a power of 2 (e.g., 16,32,64,128...).       C:\mort\Mort Code 08\code\serial_ports.c
00383c   0e1f     MOVLW     0x1f           		Tx_1_Queue_Read_Index &= TX_1_QUEUE_INDEX_MASK;                                C:\mort\Mort Code 08\code\serial_ports.c
00383e   170a     ANDWF     0xa,0x1,0x1                                                                                     
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// is the circular queue now empty?                                            C:\mort\Mort Code 08\code\serial_ports.c
003840   510b     MOVF      0xb,0x0,0x1    		if(Tx_1_Queue_Read_Index == Tx_1_Queue_Write_Index)                            C:\mort\Mort Code 08\code\serial_ports.c
003842   5d0a     SUBWF     0xa,0x0,0x1                                                                                     
003844   e102     BNZ       0x384a                                                                                          
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
003846   0e01     MOVLW     0x1            			Tx_1_Queue_Empty = TRUE;                                                      C:\mort\Mort Code 08\code\serial_ports.c
003848   6f09     MOVWF     0x9,0x1                                                                                         
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                            		// Since we've just removed a byte from the queue, it can't possibly be full. C:\mort\Mort Code 08\code\serial_ports.c
                                           		// Again, this is quicker than using an if() statement every time              C:\mort\Mort Code 08\code\serial_ports.c
00384a   6b08     CLRF      0x8,0x1        		Tx_1_Queue_Full = FALSE;                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                           	}                                                                               C:\mort\Mort Code 08\code\serial_ports.c
00384c   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	FUNCTION:		Tx_2_ISR()                                                          C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PURPOSE:		Serial port two empty transmit buffer interrupt handler.             C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	CALLED FROM:	ifi_frc.c/Interrupt_Handler_Low()                                 C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	COMMENTS:		If the interrupt handler was installed correctly, this              C:\mort\Mort Code 08\code\serial_ports.c
                                           *					function will be called every time serial port two is                      C:\mort\Mort Code 08\code\serial_ports.c
                                           *					ready to start sending a byte of data.                                     C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *					This function will not be included in the build unless                     C:\mort\Mort Code 08\code\serial_ports.c
                                           *					ENABLE_SERIAL_PORT_TWO_TX is #define'd in serial_ports.h                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\serial_ports.c
                                           #ifdef ENABLE_SERIAL_PORT_TWO_TX                                                 C:\mort\Mort Code 08\code\serial_ports.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           void Tx_2_ISR(void)                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           {                                                                                C:\mort\Mort Code 08\code\serial_ports.c
00384e   0103     MOVLB     0x3            	if(Tx_2_Queue_Empty)                                                            C:\mort\Mort Code 08\code\serial_ports.c
003850   5115     MOVF      0x15,0x0,0x1                                                                                    
003852   e002     BZ        0x3858                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		// just turn off the serial port interrupt if we don't have data to send.      C:\mort\Mort Code 08\code\serial_ports.c
                                           		// the interrupt will be re-enabled within the Send_Byte() function when       C:\mort\Mort Code 08\code\serial_ports.c
                                           		// more data is sent.                                                          C:\mort\Mort Code 08\code\serial_ports.c
003854   98a3     BCF       0xa3,0x4,0x0   		PIE3bits.TX2IE = 0;                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	}                                                                               C:\mort\Mort Code 08\code\serial_ports.c
003856   0012     RETURN    0x0            	else                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           	{                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		// get a byte from the circular queue and send it to the USART                 C:\mort\Mort Code 08\code\serial_ports.c
003858   5116     MOVF      0x16,0x0,0x1   		TXREG2 = Tx_2_Queue[Tx_2_Queue_Read_Index];                                    C:\mort\Mort Code 08\code\serial_ports.c
00385a   6aea     CLRF      0xea,0x0                                                                                        
00385c   0f60     ADDLW     0x60                                                                                            
00385e   6ee9     MOVWF     0xe9,0x0                                                                                        
003860   0e02     MOVLW     0x2                                                                                             
003862   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
003864   50ef     MOVF      0xef,0x0,0x0                                                                                    
003866   6e6d     MOVWF     0x6d,0x0                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// decrement the queue byte count                                              C:\mort\Mort Code 08\code\serial_ports.c
003868   0718     DECF      0x18,0x1,0x1   		Tx_2_Queue_Byte_Count--;                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// increment the read pointer                                                  C:\mort\Mort Code 08\code\serial_ports.c
00386a   2b16     INCF      0x16,0x1,0x1   		Tx_2_Queue_Read_Index++;                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// If the index pointer overflowed, cut-off the high-order bit. Doing this     C:\mort\Mort Code 08\code\serial_ports.c
                                           		// every time is quicker than checking for overflow every time with an if()    C:\mort\Mort Code 08\code\serial_ports.c
                                           		// statement and only then occasionally setting it back to zero. For this      C:\mort\Mort Code 08\code\serial_ports.c
                                           		// to work, the queue size must be a power of 2 (e.g., 16,32,64,128...).       C:\mort\Mort Code 08\code\serial_ports.c
00386c   0e1f     MOVLW     0x1f           		Tx_2_Queue_Read_Index &= TX_2_QUEUE_INDEX_MASK;                                C:\mort\Mort Code 08\code\serial_ports.c
00386e   1716     ANDWF     0x16,0x1,0x1                                                                                    
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           		// is the circular queue now empty?                                            C:\mort\Mort Code 08\code\serial_ports.c
003870   5117     MOVF      0x17,0x0,0x1   		if(Tx_2_Queue_Read_Index == Tx_2_Queue_Write_Index)                            C:\mort\Mort Code 08\code\serial_ports.c
003872   5d16     SUBWF     0x16,0x0,0x1                                                                                    
003874   e102     BNZ       0x387a                                                                                          
                                           		{                                                                              C:\mort\Mort Code 08\code\serial_ports.c
003876   0e01     MOVLW     0x1            			Tx_2_Queue_Empty = TRUE;                                                      C:\mort\Mort Code 08\code\serial_ports.c
003878   6f15     MOVWF     0x15,0x1                                                                                        
                                           		}                                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                            		// Since we've just removed a byte from the queue, it can't possibly be full. C:\mort\Mort Code 08\code\serial_ports.c
                                           		// Again, this is quicker than using an if() statement every time              C:\mort\Mort Code 08\code\serial_ports.c
00387a   6b14     CLRF      0x14,0x1       		Tx_2_Queue_Full = FALSE;                                                       C:\mort\Mort Code 08\code\serial_ports.c
                                           	}                                                                               C:\mort\Mort Code 08\code\serial_ports.c
00387c   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\serial_ports.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\serial_ports.c
                                                                                                                            C:\mort\Mort Code 08\code\serial_ports.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	FUNCTION:		_user_putc()                                                        C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PURPOSE:		putc() interface to C18 output stream functions                      C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	CALLED FROM:                                                                   C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\serial_ports.c
                                           *                                                                                C:\mort\Mort Code 08\code\serial_ports.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\serial_ports.c
00387e   d813     RCALL     0x38a6         void _user_putc(unsigned char byte)                                              C:\mort\Mort Code 08\code\serial_ports.c
                                           {                                                                                C:\mort\Mort Code 08\code\serial_ports.c
003880   0103     MOVLB     0x3            	if(stdout_serial_port == NUL)                                                   C:\mort\Mort Code 08\code\serial_ports.c
003882   5100     MOVF      0x0,0x0,0x1                                                                                     
003884   e00f     BZ        0x38a4                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		// send the data to the bit bucket                                             C:\mort\Mort Code 08\code\serial_ports.c
                                           	}                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           	#ifdef ENABLE_SERIAL_PORT_ONE_TX                                                C:\mort\Mort Code 08\code\serial_ports.c
003886   0500     DECF      0x0,0x0,0x1    	else if(stdout_serial_port == SERIAL_PORT_ONE)                                  C:\mort\Mort Code 08\code\serial_ports.c
003888   e105     BNZ       0x3894                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		// send the data to serial port one                                            C:\mort\Mort Code 08\code\serial_ports.c
00388a   0efe     MOVLW     0xfe           		Write_Serial_Port_One(byte);                                                   C:\mort\Mort Code 08\code\serial_ports.c
00388c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00388e   ffe6                                                                                                               
003890   df54     RCALL     0x373a                                                                                          
                                           	}                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           	#endif                                                                          C:\mort\Mort Code 08\code\serial_ports.c
                                           	#ifdef ENABLE_SERIAL_PORT_TWO_TX                                                C:\mort\Mort Code 08\code\serial_ports.c
003892   d007     BRA       0x38a2         	else if(stdout_serial_port == SERIAL_PORT_TWO)                                  C:\mort\Mort Code 08\code\serial_ports.c
003894   0e02     MOVLW     0x2                                                                                             
003896   5d00     SUBWF     0x0,0x0,0x1                                                                                     
003898   e105     BNZ       0x38a4                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           		// send the data to serial port two                                            C:\mort\Mort Code 08\code\serial_ports.c
00389a   0efe     MOVLW     0xfe           		Write_Serial_Port_Two(byte);                                                   C:\mort\Mort Code 08\code\serial_ports.c
00389c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00389e   ffe6                                                                                                               
0038a0   df66     RCALL     0x376e                                                                                          
0038a2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           	}                                                                               C:\mort\Mort Code 08\code\serial_ports.c
                                           	#endif                                                                          C:\mort\Mort Code 08\code\serial_ports.c
0038a4   d005     BRA       0x38b0         }                                                                                C:\mort\Mort Code 08\code\serial_ports.c
0038b0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0038b2   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0038b4   ffd9                                                                                                               
0038b6   0012     RETURN    0x0                                                                                             
                                           /******************************************************************************* C:\mort\Mort Code 08\code\teleop.c
                                           *                                                                                C:\mort\Mort Code 08\code\teleop.c
                                           *	TITLE:		teleop.c                                                               C:\mort\Mort Code 08\code\teleop.c
                                           *                                                                                C:\mort\Mort Code 08\code\teleop.c
                                           *	VERSION:	0.1 (Beta)                                                            C:\mort\Mort Code 08\code\teleop.c
                                           *                                                                                C:\mort\Mort Code 08\code\teleop.c
                                           *	DATE:		31-Dec-2007                                                             C:\mort\Mort Code 08\code\teleop.c
                                           *                                                                                C:\mort\Mort Code 08\code\teleop.c
                                           *	AUTHOR:		R. Kevin Watson                                                       C:\mort\Mort Code 08\code\teleop.c
                                           *				kevinw@jpl.nasa.gov                                                         C:\mort\Mort Code 08\code\teleop.c
                                           *                                                                                C:\mort\Mort Code 08\code\teleop.c
                                           *	COMMENTS:	This file best viewed with tabs set to four.                         C:\mort\Mort Code 08\code\teleop.c
                                           *                                                                                C:\mort\Mort Code 08\code\teleop.c
                                           *				You are free to use this source code for any non-commercial                 C:\mort\Mort Code 08\code\teleop.c
                                           *				use. Please do not make copies of this source code, modified                C:\mort\Mort Code 08\code\teleop.c
                                           *				or un-modified, publicly available on the internet or elsewhere             C:\mort\Mort Code 08\code\teleop.c
                                           *				without permission. Thanks.                                                 C:\mort\Mort Code 08\code\teleop.c
                                           *                                                                                C:\mort\Mort Code 08\code\teleop.c
                                           *				Copyright ©2007-2008 R. Kevin Watson. All rights are reserved.              C:\mort\Mort Code 08\code\teleop.c
                                           *                                                                                C:\mort\Mort Code 08\code\teleop.c
                                           ******************************************************************************** C:\mort\Mort Code 08\code\teleop.c
                                           *                                                                                C:\mort\Mort Code 08\code\teleop.c
                                           *	Change log:                                                                    C:\mort\Mort Code 08\code\teleop.c
                                           *                                                                                C:\mort\Mort Code 08\code\teleop.c
                                           *	DATE         REV  DESCRIPTION                                                  C:\mort\Mort Code 08\code\teleop.c
                                           *	-----------  ---  ----------------------------------------------------------   C:\mort\Mort Code 08\code\teleop.c
                                           *	31-Dec-2007  0.1  RKW Original                                                 C:\mort\Mort Code 08\code\teleop.c
                                           *                                                                                C:\mort\Mort Code 08\code\teleop.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                           #include <adc.h>                                                                 C:\mort\Mort Code 08\code\teleop.c
                                           #include "ifi_frc.h"                                                             C:\mort\Mort Code 08\code\teleop.c
                                           #include "timers.h"                                                              C:\mort\Mort Code 08\code\teleop.c
                                           #include "interrupts.h"                                                          C:\mort\Mort Code 08\code\teleop.c
                                           #include "encoder.h"                                                             C:\mort\Mort Code 08\code\teleop.c
                                           #include "serial_ports.h"                                                        C:\mort\Mort Code 08\code\teleop.c
                                           #include "ifi_code.h"                                                            C:\mort\Mort Code 08\code\teleop.c
                                           #include "teleop.h"                                                              C:\mort\Mort Code 08\code\teleop.c
                                           #include "mort_defines.h"                                                        C:\mort\Mort Code 08\code\teleop.c
                                           #include "adc.h"                                                                 C:\mort\Mort Code 08\code\teleop.c
                                           #include "autonomous.h"                                                          C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                           unsigned char height_flag = HEIGHT_FLAG_MANUAL;                                  C:\mort\Mort Code 08\code\teleop.c
                                           unsigned char tower_at_target = FALSE;                                           C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                           int drive_x = 0;                                                                 C:\mort\Mort Code 08\code\teleop.c
                                           int drive_y = 0;                                                                 C:\mort\Mort Code 08\code\teleop.c
                                           int drive_z = 0;                                                                 C:\mort\Mort Code 08\code\teleop.c
                                           int tower_joystick = 0;                                                          C:\mort\Mort Code 08\code\teleop.c
                                           //const rom near static volatile unsigned short long double super_variable_of_dooooom = 7; C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                           // CALLED ONCE                                                                   C:\mort\Mort Code 08\code\teleop.c
                                           void Teleop_Init(void)                                                           C:\mort\Mort Code 08\code\teleop.c
                                           {                                                                                C:\mort\Mort Code 08\code\teleop.c
000898   0102     MOVLB     0x2                height_flag = HEIGHT_FLAG_MANUAL;                                            C:\mort\Mort Code 08\code\teleop.c
00089a   6be0     CLRF      0xe0,0x1                                                                                        
00089c   6be1     CLRF      0xe1,0x1           tower_at_target = FALSE;                                                     C:\mort\Mort Code 08\code\teleop.c
00089e   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                           // CALLED WHEN DRIVING ROBOT                                                     C:\mort\Mort Code 08\code\teleop.c
                                           void Teleop(void)                                                                C:\mort\Mort Code 08\code\teleop.c
                                           {                                                                                C:\mort\Mort Code 08\code\teleop.c
                                              //printf("x:%3d   y:%3d   \r\n",(int)T_Packet_Data.mx, (int)T_Packet_Data.my); C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
0008a0   d99a     RCALL     0xbd6              Service_Joysticks();                                                         C:\mort\Mort Code 08\code\teleop.c
0008a2   dac7     RCALL     0xe32              Service_Height_Flags();                                                      C:\mort\Mort Code 08\code\teleop.c
0008a4   db1b     RCALL     0xedc              Service_Tower();                                                             C:\mort\Mort Code 08\code\teleop.c
0008a6   ecfa     CALL      0x11f4,0x0         Service_Leds();                                                              C:\mort\Mort Code 08\code\teleop.c
0008a8   f008                                                                                                               
0008aa   0101     MOVLB     0x1                Service_Brakes(DRIVE_TRIG);                                                  C:\mort\Mort Code 08\code\teleop.c
0008ac   51ae     MOVF      0xae,0x0,0x1                                                                                    
0008ae   0b01     ANDLW     0x1                                                                                             
0008b0   6ee6     MOVWF     0xe6,0x0                                                                                        
0008b2   ecd0     CALL      0x11a0,0x0                                                                                      
0008b4   f008                                                                                                               
0008b6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0008b8   ec9f     CALL      0x173e,0x0         Mec_Drive(drive_x, drive_y, drive_z);                                        C:\mort\Mort Code 08\code\teleop.c
0008ba   f00b                                                                                                               
0008bc   d840     RCALL     0x93e                                                                                           
0008be   6e00     MOVWF     0x0,0x0                                                                                         
0008c0   0e06     MOVLW     0x6                                                                                             
0008c2   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0008c4   5000     MOVF      0x0,0x0,0x0                                                                                     
00173e   d91d     RCALL     0x197a                                                                                          
001740   d917     RCALL     0x1970                                                                                          
001742   efb3     GOTO      0x1966                                                                                          
001744   f00c                                                                                                               
001966   c2e2     MOVFF     0x2e2,0xfe6                                                                                     
001968   ffe6                                                                                                               
00196a   c2e3     MOVFF     0x2e3,0xfe6                                                                                     
00196c   ffe6                                                                                                               
00196e   0012     RETURN    0x0                                                                                             
001970   c2e4     MOVFF     0x2e4,0xfe6                                                                                     
001972   ffe6                                                                                                               
001974   c2e5     MOVFF     0x2e5,0xfe6                                                                                     
001976   ffe6                                                                                                               
001978   0012     RETURN    0x0                                                                                             
00197a   c2e6     MOVFF     0x2e6,0xfe6                                                                                     
00197c   ffe6                                                                                                               
00197e   c2e7     MOVFF     0x2e7,0xfe6                                                                                     
001980   ffe6                                                                                                               
001982   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
0008c6   d803     RCALL     0x8ce              Service_Program_Button();                                                    C:\mort\Mort Code 08\code\teleop.c
0008c8   ef14     GOTO      0x1228             Service_Dashboard_Data();                                                    C:\mort\Mort Code 08\code\teleop.c
0008ca   f009                                                                                                               
                                           }                                                                                C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                           // CALLED BETWEEN MASTER DATA                                                    C:\mort\Mort Code 08\code\teleop.c
                                           void Teleop_Spin(void)                                                           C:\mort\Mort Code 08\code\teleop.c
                                           {                                                                                C:\mort\Mort Code 08\code\teleop.c
0008cc   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
0008ce   ec58     CALL      0x16b0,0x0     void Service_Program_Button(void)                                                C:\mort\Mort Code 08\code\teleop.c
0008d0   f00b                                                                                                               
0008d2   0e04     MOVLW     0x4                                                                                             
0008d4   ec8f     CALL      0x191e,0x0                                                                                      
00191e   26e1                                                                                                               
                                           {                                                                                C:\mort\Mort Code 08\code\teleop.c
0008d6   f00c     WORD2     0xc                int byte_count = 0;                                                          C:\mort\Mort Code 08\code\teleop.c
001920   6ade     CLRF      0xde,0x0                                                                                        
001922   6add     CLRF      0xdd,0x0                                                                                        
001924   0e02     MOVLW     0x2                int i = 0;                                                                   C:\mort\Mort Code 08\code\teleop.c
001926   6adb     CLRF      0xdb,0x0                                                                                        
001928   0e03     MOVLW     0x3                                                                                             
00192a   6adb     CLRF      0xdb,0x0                                                                                        
00192c   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
0008d8   ec4f     CALL      0x369e,0x0         byte_count = Serial_Port_One_Byte_Count();                                   C:\mort\Mort Code 08\code\teleop.c
0008da   f01b                                                                                                               
0008dc   6ede     MOVWF     0xde,0x0                                                                                        
0008de   6add     CLRF      0xdd,0x0                                                                                        
0008e0   ecbb     CALL      0x1776,0x0         if (byte_count > 0)                                                          C:\mort\Mort Code 08\code\teleop.c
0008e2   f00b                                                                                                               
0008e4   3401     RLCF      0x1,0x0,0x0                                                                                     
0008e6   e223     BC        0x92e                                                                                           
0008e8   ecea     CALL      0x17d4,0x0                                                                                      
0008ea   f00b                                                                                                               
0008ec   e220     BC        0x92e                                                                                           
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
0008ee   0e02     MOVLW     0x2                    for (i=0; i<byte_count; i++)                                             C:\mort\Mort Code 08\code\teleop.c
0008f0   6adb     CLRF      0xdb,0x0                                                                                        
0008f2   0e03     MOVLW     0x3                                                                                             
0008f4   6adb     CLRF      0xdb,0x0                                                                                        
0008f6   ec4a     CALL      0x1694,0x0                                                                                      
0008f8   f00b                                                                                                               
0008fa   cfde     MOVFF     0xfde,0x2                                                                                       
0008fc   f002                                                                                                               
0008fe   cfdd     MOVFF     0xfdd,0x3                                                                                       
000900   f003                                                                                                               
000902   5001     MOVF      0x1,0x0,0x0                                                                                     
000904   1803     XORWF     0x3,0x0,0x0                                                                                     
000906   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
000908   d002     BRA       0x90e                                                                                           
00090a   3403     RLCF      0x3,0x0,0x0                                                                                     
00090c   d004     BRA       0x916                                                                                           
00090e   5002     MOVF      0x2,0x0,0x0                                                                                     
000910   5c00     SUBWF     0x0,0x0,0x0                                                                                     
000912   5003     MOVF      0x3,0x0,0x0                                                                                     
000914   5801     SUBWFB    0x1,0x0,0x0                                                                                     
000916   e20b     BC        0x92e                                                                                           
000922   0e02     MOVLW     0x2                                                                                             
000924   2adb     INCF      0xdb,0x1,0x0                                                                                    
000926   0e03     MOVLW     0x3                                                                                             
000928   e3e6     BNC       0x8f6                                                                                           
00092a   2adb     INCF      0xdb,0x1,0x0                                                                                    
00092c   d7e4     BRA       0x8f6                                                                                           
                                                   {                                                                        C:\mort\Mort Code 08\code\teleop.c
000918   ec61     CALL      0x36c2,0x0                 if (Read_Serial_Port_One() == 'p')                                   C:\mort\Mort Code 08\code\teleop.c
00091a   f01b                                                                                                               
00091c   0870     SUBLW     0x70                                                                                            
00091e   e101     BNZ       0x922                                                                                           
                                                       {                                                                    C:\mort\Mort Code 08\code\teleop.c
000920   9e88     BCF       0x88,0x7,0x0                   PROGRAM_BUTTON = 0;                                              C:\mort\Mort Code 08\code\teleop.c
                                                       }                                                                    C:\mort\Mort Code 08\code\teleop.c
                                                   }                                                                        C:\mort\Mort Code 08\code\teleop.c
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
00092e   0e04     MOVLW     0x4            }                                                                                C:\mort\Mort Code 08\code\teleop.c
000930   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
000932   e202     BC        0x938                                                                                           
000934   6ae1     CLRF      0xe1,0x0                                                                                        
000936   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000938   6ee1     MOVWF     0xe1,0x0                                                                                        
00093a   ef5d     GOTO      0x16ba                                                                                          
00093c   f00b                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
00093e   ec58     CALL      0x16b0,0x0     void Mec_Drive(int x, int y, int z)                                              C:\mort\Mort Code 08\code\teleop.c
000940   f00b                                                                                                               
000942   0e0c     MOVLW     0xc                                                                                             
000944   ec92     CALL      0x1724,0x0                                                                                      
001724   d8fc                                                                                                               
                                           {                                                                                C:\mort\Mort Code 08\code\teleop.c
                                               /**                                                                          C:\mort\Mort Code 08\code\teleop.c
                                               Objective                                                                    C:\mort\Mort Code 08\code\teleop.c
                                                   Controls the motor outputs on 4 mecanum wheels using a 3 axis joystick input C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                               Called By                                                                    C:\mort\Mort Code 08\code\teleop.c
                                                   ??                                                                       C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                               Parameters                                                                   C:\mort\Mort Code 08\code\teleop.c
                                                   int x : Strafing Direction (-127,127)                                    C:\mort\Mort Code 08\code\teleop.c
                                                   int y : Forward and Reverse (-127,127)                                   C:\mort\Mort Code 08\code\teleop.c
                                                   int z : Spin Direction (-127,127)                                        C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                               Notes                                                                        C:\mort\Mort Code 08\code\teleop.c
                                                   Based upon the ChiefDelphi white paper for initial determination of wheel speeds, C:\mort\Mort Code 08\code\teleop.c
                                                   then scales them based upon a reduction value (a double).                C:\mort\Mort Code 08\code\teleop.c
                                               **/                                                                          C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000946   f00b     WORD2     0xb            	int left_front = 0;                                                             C:\mort\Mort Code 08\code\teleop.c
                                           	int left_back = 0;                                                              C:\mort\Mort Code 08\code\teleop.c
001726   0e04     MOVLW     0x4            	int right_front = 0;                                                            C:\mort\Mort Code 08\code\teleop.c
001728   6adb     CLRF      0xdb,0x0                                                                                        
00172a   0e05     MOVLW     0x5                                                                                             
00172c   6adb     CLRF      0xdb,0x0                                                                                        
00172e   ef8a     GOTO      0x1914         	int right_back = 0;                                                             C:\mort\Mort Code 08\code\teleop.c
001730   f00c                                                                                                               
001914   0e06     MOVLW     0x6                                                                                             
001916   6adb     CLRF      0xdb,0x0                                                                                        
001918   0e07     MOVLW     0x7                                                                                             
00191a   6adb     CLRF      0xdb,0x0                                                                                        
00191c   0012     RETURN    0x0                                                                                             
                                               double reduction;                                                            C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000948   ec64     CALL      0x16c8,0x0     	right_front=y-x-z;                                                              C:\mort\Mort Code 08\code\teleop.c
00094a   f00b                                                                                                               
00094c   5c02     SUBWF     0x2,0x0,0x0                                                                                     
00094e   6e00     MOVWF     0x0,0x0                                                                                         
000950   0efa     MOVLW     0xfa                                                                                            
000952   50db     MOVF      0xdb,0x0,0x0                                                                                    
000954   5803     SUBWFB    0x3,0x0,0x0                                                                                     
000956   ecc6     CALL      0x178c,0x0                                                                                      
000958   f00b                                                                                                               
0016c8   0efb     MOVLW     0xfb                                                                                            
0016ca   cfdb     MOVFF     0xfdb,0x4                                                                                       
0016cc   f004                                                                                                               
0016ce   0efc     MOVLW     0xfc                                                                                            
0016d0   cfdb     MOVFF     0xfdb,0x5                                                                                       
0016d2   f005                                                                                                               
0016d4   0efd     MOVLW     0xfd                                                                                            
0016d6   50db     MOVF      0xdb,0x0,0x0                                                                                    
0016d8   5c04     SUBWF     0x4,0x0,0x0                                                                                     
0016da   6e02     MOVWF     0x2,0x0                                                                                         
0016dc   0efe     MOVLW     0xfe                                                                                            
0016de   50db     MOVF      0xdb,0x0,0x0                                                                                    
0016e0   5805     SUBWFB    0x5,0x0,0x0                                                                                     
0016e2   6e03     MOVWF     0x3,0x0                                                                                         
0016e4   0ef9     MOVLW     0xf9                                                                                            
0016e6   50db     MOVF      0xdb,0x0,0x0                                                                                    
0016e8   0012     RETURN    0x0                                                                                             
00178c   6e01     MOVWF     0x1,0x0                                                                                         
00178e   0e04     MOVLW     0x4                                                                                             
001790   c000     MOVFF     0x0,0xfdb                                                                                       
001792   ffdb                                                                                                               
001794   0e05     MOVLW     0x5                                                                                             
001796   c001     MOVFF     0x1,0xfdb                                                                                       
001798   ffdb                                                                                                               
00179a   0012     RETURN    0x0                                                                                             
00095a   ec75     CALL      0x16ea,0x0     	left_front=y+x+z;                                                               C:\mort\Mort Code 08\code\teleop.c
00095c   f00b                                                                                                               
00095e   ecce     CALL      0x179c,0x0                                                                                      
000960   f00b                                                                                                               
000962   c000     MOVFF     0x0,0xfde                                                                                       
000964   ffde                                                                                                               
000966   6edd     MOVWF     0xdd,0x0                                                                                        
0016ea   0efd     MOVLW     0xfd                                                                                            
0016ec   cfdb     MOVFF     0xfdb,0x4                                                                                       
0016ee   f004                                                                                                               
0016f0   0efe     MOVLW     0xfe                                                                                            
0016f2   cfdb     MOVFF     0xfdb,0x5                                                                                       
0016f4   f005                                                                                                               
0016f6   0efb     MOVLW     0xfb                                                                                            
0016f8   50db     MOVF      0xdb,0x0,0x0                                                                                    
0016fa   2404     ADDWF     0x4,0x0,0x0                                                                                     
0016fc   6e02     MOVWF     0x2,0x0                                                                                         
0016fe   0efc     MOVLW     0xfc                                                                                            
001700   50db     MOVF      0xdb,0x0,0x0                                                                                    
001702   2005     ADDWFC    0x5,0x0,0x0                                                                                     
001704   6e03     MOVWF     0x3,0x0                                                                                         
001706   0ef9     MOVLW     0xf9                                                                                            
001708   50db     MOVF      0xdb,0x0,0x0                                                                                    
00170a   0012     RETURN    0x0                                                                                             
00179c   2402     ADDWF     0x2,0x0,0x0                                                                                     
00179e   6e00     MOVWF     0x0,0x0                                                                                         
0017a0   0efa     MOVLW     0xfa                                                                                            
0017a2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0017a4   2003     ADDWFC    0x3,0x0,0x0                                                                                     
0017a6   6e01     MOVWF     0x1,0x0                                                                                         
0017a8   0012     RETURN    0x0                                                                                             
000968   ec75     CALL      0x16ea,0x0     	right_back=y+x-z;                                                               C:\mort\Mort Code 08\code\teleop.c
00096a   f00b                                                                                                               
00096c   5c02     SUBWF     0x2,0x0,0x0                                                                                     
00096e   6e00     MOVWF     0x0,0x0                                                                                         
000970   0efa     MOVLW     0xfa                                                                                            
000972   50db     MOVF      0xdb,0x0,0x0                                                                                    
000974   5803     SUBWFB    0x3,0x0,0x0                                                                                     
000976   6e01     MOVWF     0x1,0x0                                                                                         
000978   0e06     MOVLW     0x6                                                                                             
00097a   c000     MOVFF     0x0,0xfdb                                                                                       
00097c   ffdb                                                                                                               
00097e   0e07     MOVLW     0x7                                                                                             
000980   c001     MOVFF     0x1,0xfdb                                                                                       
000982   ffdb                                                                                                               
000984   ec64     CALL      0x16c8,0x0     	left_back=y-x+z;                                                                C:\mort\Mort Code 08\code\teleop.c
000986   f00b                                                                                                               
000988   ecce     CALL      0x179c,0x0                                                                                      
00098a   f00b                                                                                                               
00098c   ecb4     CALL      0x1768,0x0                                                                                      
00098e   f00b                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                               // Finds the absolute maximum value of the 4 wheel speeds                    C:\mort\Mort Code 08\code\teleop.c
000990   ec3f     CALL      0x187e,0x0     	reduction = absmax( absmax(right_front,right_back) , absmax(left_front, left_back) ); C:\mort\Mort Code 08\code\teleop.c
000992   f00c                                                                                                               
000994   cfde     MOVFF     0xfde,0xfe6                                                                                     
000996   ffe6                                                                                                               
000998   cfdd     MOVFF     0xfdd,0xfe6                                                                                     
00099a   ffe6                                                                                                               
00099c   ecae     CALL      0x175c,0x0                                                                                      
00099e   f00b                                                                                                               
0009a0   cff3     MOVFF     0xff3,0x2                                                                                       
0009a2   f002                                                                                                               
0009a4   cff4     MOVFF     0xff4,0x3                                                                                       
0009a6   f003                                                                                                               
0009a8   cff3     MOVFF     0xff3,0xfe6                                                                                     
0009aa   ffe6                                                                                                               
0009ac   cff4     MOVFF     0xff4,0xfe6                                                                                     
0009ae   ffe6                                                                                                               
0009b0   ec4b     CALL      0x1896,0x0                                                                                      
0009b2   f00c                                                                                                               
0009b4   ec97     CALL      0x192e,0x0                                                                                      
0009b6   f00c                                                                                                               
0009b8   ecae     CALL      0x175c,0x0                                                                                      
0009ba   f00b                                                                                                               
0009bc   cff3     MOVFF     0xff3,0x4                                                                                       
0009be   f004                                                                                                               
0009c0   cff4     MOVFF     0xff4,0x5                                                                                       
0009c2   f005                                                                                                               
0009c4   cff3     MOVFF     0xff3,0xfe6                                                                                     
0009c6   ffe6                                                                                                               
0009c8   cff4     MOVFF     0xff4,0xfe6                                                                                     
0009ca   ffe6                                                                                                               
0009cc   ecae     CALL      0x175c,0x0                                                                                      
0009ce   f00b                                                                                                               
0009d0   cff3     MOVFF     0xff3,0x0                                                                                       
0009d2   f000                                                                                                               
0009d4   cff4     MOVFF     0xff4,0x1                                                                                       
0009d6   f001                                                                                                               
0009d8   cff3     MOVFF     0xff3,0x32                                                                                      
0009da   f032                                                                                                               
0009dc   cff4     MOVFF     0xff4,0x33                                                                                      
0009de   f033                                                                                                               
0009e0   ec53     CALL      0x2ca6,0x0                                                                                      
0009e2   f016                                                                                                               
0009e4   0e08     MOVLW     0x8                                                                                             
0009e6   c031     MOVFF     0x31,0xfdb                                                                                      
0009e8   ffdb                                                                                                               
0009ea   0e09     MOVLW     0x9                                                                                             
0009ec   c032     MOVFF     0x32,0xfdb                                                                                      
0009ee   ffdb                                                                                                               
0009f0   0e0a     MOVLW     0xa                                                                                             
0009f2   c033     MOVFF     0x33,0xfdb                                                                                      
0009f4   ffdb                                                                                                               
0009f6   0e0b     MOVLW     0xb                                                                                             
0009f8   c034     MOVFF     0x34,0xfdb                                                                                      
0009fa   ffdb                                                                                                               
00175c   dec2     RCALL     0x14e2                                                                                          
00175e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001760   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001762   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001764   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001766   0012     RETURN    0x0                                                                                             
00192e   0e04     MOVLW     0x4                                                                                             
001930   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001932   ffe6                                                                                                               
001934   0e05     MOVLW     0x5                                                                                             
001936   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001938   ffe6                                                                                                               
00193a   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                           	// Determine the multiple to decrease the motor values by                       C:\mort\Mort Code 08\code\teleop.c
0009fc   ec86     CALL      0x170c,0x0     	if (reduction > 127.0)                                                          C:\mort\Mort Code 08\code\teleop.c
0009fe   f00b                                                                                                               
000a00   0e42     MOVLW     0x42                                                                                            
000a02   ecc0     CALL      0x1780,0x0                                                                                      
000a04   f00b                                                                                                               
000a06   ec4d     CALL      0x309a,0x0                                                                                      
000a08   f018                                                                                                               
000a0a   0a01     XORLW     0x1                                                                                             
000a0c   e106     BNZ       0xa1a                                                                                           
00170c   d91e     RCALL     0x194a                                                                                          
00170e   0e0a     MOVLW     0xa                                                                                             
001710   cfdb     MOVFF     0xfdb,0x2                                                                                       
001712   f002                                                                                                               
001714   0e0b     MOVLW     0xb                                                                                             
001716   cfdb     MOVFF     0xfdb,0x3                                                                                       
001718   f003                                                                                                               
00171a   6a36     CLRF      0x36,0x0                                                                                        
00171c   6a37     CLRF      0x37,0x0                                                                                        
00171e   0efe     MOVLW     0xfe                                                                                            
001720   6e38     MOVWF     0x38,0x0                                                                                        
001722   0012     RETURN    0x0                                                                                             
001780   6e39     MOVWF     0x39,0x0                                                                                        
001782   d090     BRA       0x18a4                                                                                          
                                           	{                                                                               C:\mort\Mort Code 08\code\teleop.c
000a0e   6a00     CLRF      0x0,0x0        		reduction /= 127.0;                                                            C:\mort\Mort Code 08\code\teleop.c
000a10   6a01     CLRF      0x1,0x0                                                                                         
000a12   0efe     MOVLW     0xfe                                                                                            
000a14   6e02     MOVWF     0x2,0x0                                                                                         
000a16   0e42     MOVLW     0x42                                                                                            
                                           	}                                                                               C:\mort\Mort Code 08\code\teleop.c
000a18   d00e     BRA       0xa36          	else if (reduction < -127.0)                                                    C:\mort\Mort Code 08\code\teleop.c
000a1a   ec86     CALL      0x170c,0x0                                                                                      
000a1c   f00b                                                                                                               
000a1e   0ec2     MOVLW     0xc2                                                                                            
000a20   ecc0     CALL      0x1780,0x0                                                                                      
000a22   f00b                                                                                                               
000a24   ec56     CALL      0x30ac,0x0                                                                                      
000a26   f018                                                                                                               
000a28   0a01     XORLW     0x1                                                                                             
000a2a   e126     BNZ       0xa78                                                                                           
                                           	{                                                                               C:\mort\Mort Code 08\code\teleop.c
                                           	    //                                                                          C:\mort\Mort Code 08\code\teleop.c
000a2c   6a00     CLRF      0x0,0x0        		reduction /= -127.0;                                                           C:\mort\Mort Code 08\code\teleop.c
000a2e   6a01     CLRF      0x1,0x0                                                                                         
000a30   0efe     MOVLW     0xfe                                                                                            
000a32   6e02     MOVWF     0x2,0x0                                                                                         
000a34   0ec2     MOVLW     0xc2                                                                                            
000a36   6e03     MOVWF     0x3,0x0                                                                                         
000a38   50d9     MOVF      0xd9,0x0,0x0                                                                                    
000a3a   0f08     ADDLW     0x8                                                                                             
000a3c   6ee9     MOVWF     0xe9,0x0                                                                                        
000a3e   cfda     MOVFF     0xfda,0xfea                                                                                     
000a40   ffea                                                                                                               
000a42   cfee     MOVFF     0xfee,0x31                                                                                      
000a44   f031                                                                                                               
000a46   cfee     MOVFF     0xfee,0x32                                                                                      
000a48   f032                                                                                                               
000a4a   cfee     MOVFF     0xfee,0x33                                                                                      
000a4c   f033                                                                                                               
000a4e   cfef     MOVFF     0xfef,0x34                                                                                      
000a50   f034                                                                                                               
000a52   c000     MOVFF     0x0,0x36                                                                                        
000a54   f036                                                                                                               
000a56   c001     MOVFF     0x1,0x37                                                                                        
000a58   f037                                                                                                               
000a5a   c002     MOVFF     0x2,0x38                                                                                        
000a5c   f038                                                                                                               
000a5e   c003     MOVFF     0x3,0x39                                                                                        
000a60   f039                                                                                                               
000a62   ecfd     CALL      0x2dfa,0x0                                                                                      
000a64   f016                                                                                                               
000a66   c034     MOVFF     0x34,0xfed                                                                                      
000a68   ffed                                                                                                               
000a6a   c033     MOVFF     0x33,0xfed                                                                                      
000a6c   ffed                                                                                                               
000a6e   c032     MOVFF     0x32,0xfed                                                                                      
000a70   ffed                                                                                                               
000a72   c031     MOVFF     0x31,0xfef                                                                                      
000a74   ffef                                                                                                               
                                           	}                                                                               C:\mort\Mort Code 08\code\teleop.c
000a76   d00c     BRA       0xa90          	else                                                                            C:\mort\Mort Code 08\code\teleop.c
                                           	{                                                                               C:\mort\Mort Code 08\code\teleop.c
                                           	    // If we are within the range, no reduction                                 C:\mort\Mort Code 08\code\teleop.c
000a78   ecef     CALL      0x17de,0x0     		reduction = 1;                                                                 C:\mort\Mort Code 08\code\teleop.c
000a7a   f00b                                                                                                               
000a7c   0e80     MOVLW     0x80                                                                                            
000a7e   6ef3     MOVWF     0xf3,0x0                                                                                        
000a80   0e0a     MOVLW     0xa                                                                                             
000a82   cff3     MOVFF     0xff3,0xfdb                                                                                     
000a84   ffdb                                                                                                               
000a86   0e3f     MOVLW     0x3f                                                                                            
000a88   6ef3     MOVWF     0xf3,0x0                                                                                        
000a8a   0e0b     MOVLW     0xb                                                                                             
000a8c   cff3     MOVFF     0xff3,0xfdb                                                                                     
000a8e   ffdb                                                                                                               
                                           	}                                                                               C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                               //Reduce the motor values so that the max is at 127 or min at -127           C:\mort\Mort Code 08\code\teleop.c
000a90   ec13     CALL      0x1826,0x0     	left_front /= reduction;                                                        C:\mort\Mort Code 08\code\teleop.c
000a92   f00c                                                                                                               
000a94   cfd9     MOVFF     0xfd9,0xfe9                                                                                     
000a96   ffe9                                                                                                               
000a98   ec27     CALL      0x164e,0x0                                                                                      
000a9a   f00b                                                                                                               
001826   0e08     MOVLW     0x8                                                                                             
001828   cfdb     MOVFF     0xfdb,0x31                                                                                      
00182a   f031                                                                                                               
00182c   0e09     MOVLW     0x9                                                                                             
00182e   cfdb     MOVFF     0xfdb,0x32                                                                                      
001830   f032                                                                                                               
001832   0e0a     MOVLW     0xa                                                                                             
001834   cfdb     MOVFF     0xfdb,0x33                                                                                      
001836   f033                                                                                                               
001838   0e0b     MOVLW     0xb                                                                                             
00183a   cfdb     MOVFF     0xfdb,0x34                                                                                      
00183c   f034                                                                                                               
00183e   efcf     GOTO      0x199e                                                                                          
001840   f00c                                                                                                               
000a9c   0f02     ADDLW     0x2            	left_back /= reduction;                                                         C:\mort\Mort Code 08\code\teleop.c
000a9e   6ee9     MOVWF     0xe9,0x0                                                                                        
000aa0   ec27     CALL      0x164e,0x0                                                                                      
000aa2   f00b                                                                                                               
000aa4   0f06     ADDLW     0x6            	right_back /= reduction;                                                        C:\mort\Mort Code 08\code\teleop.c
000aa6   6ee9     MOVWF     0xe9,0x0                                                                                        
000aa8   ec27     CALL      0x164e,0x0                                                                                      
000aaa   f00b                                                                                                               
00164e   d900     RCALL     0x1850                                                                                          
000aac   0f04     ADDLW     0x4            	right_front /= reduction;                                                       C:\mort\Mort Code 08\code\teleop.c
000aae   6ee9     MOVWF     0xe9,0x0                                                                                        
000ab0   ec28     CALL      0x1850,0x0                                                                                      
000ab2   f00c                                                                                                               
001650   d8ea     RCALL     0x1826                                                                                          
001652   50d9     MOVF      0xd9,0x0,0x0                                                                                    
001654   0012     RETURN    0x0                                                                                             
001850   cfda     MOVFF     0xfda,0xfea                                                                                     
001852   ffea                                                                                                               
001854   c032     MOVFF     0x32,0x37                                                                                       
001856   f037                                                                                                               
001858   c033     MOVFF     0x33,0x38                                                                                       
00185a   f038                                                                                                               
00185c   cfee     MOVFF     0xfee,0x32                                                                                      
00185e   f032                                                                                                               
001860   cfed     MOVFF     0xfed,0x33                                                                                      
001862   f033                                                                                                               
001864   ec47     CALL      0x488e,0x0                                                                                      
001866   f024                                                                                                               
001868   c032     MOVFF     0x32,0xfee                                                                                      
00186a   ffee                                                                                                               
00186c   c033     MOVFF     0x33,0xfed                                                                                      
00186e   ffed                                                                                                               
001870   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                               // Make the value range from 0 to 255, with 128 and 127 of the converted value being equal C:\mort\Mort Code 08\code\teleop.c
000ab4   0e7f     MOVLW     0x7f           	left_front 	+= 127;                                                             C:\mort\Mort Code 08\code\teleop.c
000ab6   26de     ADDWF     0xde,0x1,0x0                                                                                    
000ab8   0e00     MOVLW     0x0                                                                                             
000aba   22dd     ADDWFC    0xdd,0x1,0x0                                                                                    
000abc   50d9     MOVF      0xd9,0x0,0x0   	left_back 	+= 127;                                                              C:\mort\Mort Code 08\code\teleop.c
000abe   0f02     ADDLW     0x2                                                                                             
000ac0   eca6     CALL      0x174c,0x0                                                                                      
000ac2   f00b                                                                                                               
000ac4   50d9     MOVF      0xd9,0x0,0x0   	right_front += 127;                                                             C:\mort\Mort Code 08\code\teleop.c
000ac6   0f04     ADDLW     0x4                                                                                             
000ac8   eca6     CALL      0x174c,0x0                                                                                      
000aca   f00b                                                                                                               
00174c   6ee9     MOVWF     0xe9,0x0                                                                                        
00174e   cfda     MOVFF     0xfda,0xfea                                                                                     
001750   ffea                                                                                                               
001752   0e7f     MOVLW     0x7f                                                                                            
001754   26ee     ADDWF     0xee,0x1,0x0                                                                                    
001756   0e00     MOVLW     0x0                                                                                             
001758   22ed     ADDWFC    0xed,0x1,0x0                                                                                    
00175a   0012     RETURN    0x0                                                                                             
000acc   50d9     MOVF      0xd9,0x0,0x0   	right_back 	+= 127;                                                             C:\mort\Mort Code 08\code\teleop.c
000ace   0f06     ADDLW     0x6                                                                                             
000ad0   eca6     CALL      0x174c,0x0                                                                                      
000ad2   f00b                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000ad4   ecda     CALL      0x15b4,0x0         left_front = Limit(left_front, 0, 255);                                      C:\mort\Mort Code 08\code\teleop.c
000ad6   f00a                                                                                                               
0015b4   d946     RCALL     0x1842                                                                                          
0015b6   cfde     MOVFF     0xfde,0xfe6                                                                                     
0015b8   ffe6                                                                                                               
0015ba   cfdd     MOVFF     0xfdd,0xfe6                                                                                     
0015bc   ffe6                                                                                                               
0015be   d91d     RCALL     0x17fa                                                                                          
0015c0   cff3     MOVFF     0xff3,0xfde                                                                                     
0015c2   ffde                                                                                                               
0015c4   cff4     MOVFF     0xff4,0xfdd                                                                                     
0015c6   ffdd                                                                                                               
0015c8   d93c     RCALL     0x1842             left_back = Limit(left_back, 0, 255);                                        C:\mort\Mort Code 08\code\teleop.c
0015ca   d959     RCALL     0x187e                                                                                          
0015cc   d916     RCALL     0x17fa                                                                                          
0015ce   0e02     MOVLW     0x2                                                                                             
0015d0   cff3     MOVFF     0xff3,0xfdb                                                                                     
0015d2   ffdb                                                                                                               
0015d4   0e03     MOVLW     0x3                                                                                             
0015d6   cff4     MOVFF     0xff4,0xfdb                                                                                     
0015d8   ffdb                                                                                                               
00187e   0e02     MOVLW     0x2                                                                                             
001880   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001882   ffe6                                                                                                               
001884   0e03     MOVLW     0x3                                                                                             
001886   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001888   ffe6                                                                                                               
00188a   0012     RETURN    0x0                                                                                             
0015da   d933     RCALL     0x1842             right_front = Limit(right_front, 0, 255);                                    C:\mort\Mort Code 08\code\teleop.c
0015dc   d9a8     RCALL     0x192e                                                                                          
0015de   d90d     RCALL     0x17fa                                                                                          
0015e0   0e04     MOVLW     0x4                                                                                             
0015e2   cff3     MOVFF     0xff3,0xfdb                                                                                     
0015e4   ffdb                                                                                                               
0015e6   0e05     MOVLW     0x5                                                                                             
0015e8   cff4     MOVFF     0xff4,0xfdb                                                                                     
0015ea   ffdb                                                                                                               
0015ec   d92a     RCALL     0x1842             right_back = Limit(right_back, 0, 255);                                      C:\mort\Mort Code 08\code\teleop.c
0015ee   efcb     GOTO      0x1996                                                                                          
0015f0   f00c                                                                                                               
0017fa   de48     RCALL     0x148c                                                                                          
0017fc   6e00     MOVWF     0x0,0x0                                                                                         
0017fe   0e06     MOVLW     0x6                                                                                             
001800   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001802   5000     MOVF      0x0,0x0,0x0                                                                                     
001804   0012     RETURN    0x0                                                                                             
001896   0e06     MOVLW     0x6                                                                                             
001898   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00189a   ffe6                                                                                                               
00189c   0e07     MOVLW     0x7                                                                                             
00189e   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0018a0   ffe6                                                                                                               
0018a2   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                           	// Flop reversed motors                                                         C:\mort\Mort Code 08\code\teleop.c
000ad8   ecbb     CALL      0x1776,0x0     	left_front = 255 - left_front;                                                  C:\mort\Mort Code 08\code\teleop.c
000ada   f00b                                                                                                               
000adc   0eff     MOVLW     0xff                                                                                            
000ade   80d8     BSF       0xd8,0x0,0x0                                                                                    
000ae0   5600     SUBFWB    0x0,0x1,0x0                                                                                     
000ae2   0e00     MOVLW     0x0                                                                                             
000ae4   5601     SUBFWB    0x1,0x1,0x0                                                                                     
000ae6   c000     MOVFF     0x0,0xfde                                                                                       
000ae8   ffde                                                                                                               
000aea   c001     MOVFF     0x1,0xfdd                                                                                       
000aec   ffdd                                                                                                               
000aee   ec4a     CALL      0x1694,0x0     	left_back = 255 - left_back;                                                    C:\mort\Mort Code 08\code\teleop.c
000af0   f00b                                                                                                               
000af2   0eff     MOVLW     0xff                                                                                            
000af4   80d8     BSF       0xd8,0x0,0x0                                                                                    
000af6   5600     SUBFWB    0x0,0x1,0x0                                                                                     
000af8   0e00     MOVLW     0x0                                                                                             
000afa   5601     SUBFWB    0x1,0x1,0x0                                                                                     
000afc   ecb4     CALL      0x1768,0x0                                                                                      
000afe   f00b                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                           	// Scale to overcome victor deadzone                                            C:\mort\Mort Code 08\code\teleop.c
000b00   ecbb     CALL      0x1776,0x0     	if (left_front > 128)                                                           C:\mort\Mort Code 08\code\teleop.c
000b02   f00b                                                                                                               
000b04   3401     RLCF      0x1,0x0,0x0                                                                                     
000b06   e211     BC        0xb2a                                                                                           
000b08   5000     MOVF      0x0,0x0,0x0                                                                                     
000b0a   0880     SUBLW     0x80                                                                                            
000b0c   0e00     MOVLW     0x0                                                                                             
000b0e   5401     SUBFWB    0x1,0x0,0x0                                                                                     
000b10   e20c     BC        0xb2a                                                                                           
001776   cfde     MOVFF     0xfde,0x0                                                                                       
001778   f000                                                                                                               
00177a   cfdd     MOVFF     0xfdd,0x1                                                                                       
00177c   f001                                                                                                               
00177e   0012     RETURN    0x0                                                                                             
                                           	{                                                                               C:\mort\Mort Code 08\code\teleop.c
000b12   ec41     CALL      0x1682,0x0     	    left_front = (((127.0 - PWM_DEADZONE_LEFT) / 127.0) * (left_front-127.0)) + PWM_DEADZONE_LEFT + 127.0; C:\mort\Mort Code 08\code\teleop.c
000b14   f00b                                                                                                               
000b16   0e00     MOVLW     0x0                                                                                             
000b18   cfdf     MOVFF     0xfdf,0x32                                                                                      
000b1a   f032                                                                                                               
000b1c   0e01     MOVLW     0x1                                                                                             
000b1e   ecba     CALL      0x1574,0x0                                                                                      
000b20   f00a                                                                                                               
000b22   c032     MOVFF     0x32,0xfde                                                                                      
000b24   ffde                                                                                                               
000b26   c033     MOVFF     0x33,0xfdd                                                                                      
000b28   ffdd                                                                                                               
                                           	}                                                                               C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000b2a   ec4a     CALL      0x1694,0x0         if (left_back > 128)                                                         C:\mort\Mort Code 08\code\teleop.c
000b2c   f00b                                                                                                               
000b2e   3401     RLCF      0x1,0x0,0x0                                                                                     
000b30   e213     BC        0xb58                                                                                           
000b32   5000     MOVF      0x0,0x0,0x0                                                                                     
000b34   0880     SUBLW     0x80                                                                                            
000b36   0e00     MOVLW     0x0                                                                                             
000b38   5401     SUBFWB    0x1,0x0,0x0                                                                                     
000b3a   e20e     BC        0xb58                                                                                           
                                           	{                                                                               C:\mort\Mort Code 08\code\teleop.c
000b3c   ec41     CALL      0x1682,0x0     	    left_back = (((127.0 - PWM_DEADZONE_LEFT) / 127.0) * (left_back-127.0)) + PWM_DEADZONE_LEFT + 127.0; C:\mort\Mort Code 08\code\teleop.c
000b3e   f00b                                                                                                               
000b40   0e02     MOVLW     0x2                                                                                             
000b42   cfdb     MOVFF     0xfdb,0x32                                                                                      
000b44   f032                                                                                                               
000b46   0e03     MOVLW     0x3                                                                                             
000b48   ecba     CALL      0x1574,0x0                                                                                      
000b4a   f00a                                                                                                               
000b4c   0e02     MOVLW     0x2                                                                                             
000b4e   c032     MOVFF     0x32,0xfdb                                                                                      
000b50   ffdb                                                                                                               
000b52   0e03     MOVLW     0x3                                                                                             
000b54   c033     MOVFF     0x33,0xfdb                                                                                      
000b56   ffdb                                                                                                               
                                           	}                                                                               C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000b58   ecd5     CALL      0x17aa,0x0         if (right_front > 127)                                                       C:\mort\Mort Code 08\code\teleop.c
000b5a   f00b                                                                                                               
000b5c   3401     RLCF      0x1,0x0,0x0                                                                                     
000b5e   e213     BC        0xb86                                                                                           
000b60   5000     MOVF      0x0,0x0,0x0                                                                                     
000b62   087f     SUBLW     0x7f                                                                                            
000b64   0e00     MOVLW     0x0                                                                                             
000b66   5401     SUBFWB    0x1,0x0,0x0                                                                                     
000b68   e20e     BC        0xb86                                                                                           
0017aa   0e04     MOVLW     0x4                                                                                             
0017ac   cfdb     MOVFF     0xfdb,0x0                                                                                       
0017ae   f000                                                                                                               
0017b0   0e05     MOVLW     0x5                                                                                             
0017b2   cfdb     MOVFF     0xfdb,0x1                                                                                       
0017b4   f001                                                                                                               
0017b6   0012     RETURN    0x0                                                                                             
                                           	{                                                                               C:\mort\Mort Code 08\code\teleop.c
000b6a   ec41     CALL      0x1682,0x0     	    right_front = (((127.0 - PWM_DEADZONE_RIGHT) / 127.0) * (right_front-127.0)) + PWM_DEADZONE_RIGHT + 127.0; C:\mort\Mort Code 08\code\teleop.c
000b6c   f00b                                                                                                               
000b6e   0e04     MOVLW     0x4                                                                                             
000b70   cfdb     MOVFF     0xfdb,0x32                                                                                      
000b72   f032                                                                                                               
000b74   0e05     MOVLW     0x5                                                                                             
000b76   ecba     CALL      0x1574,0x0                                                                                      
000b78   f00a                                                                                                               
000b7a   0e04     MOVLW     0x4                                                                                             
000b7c   c032     MOVFF     0x32,0xfdb                                                                                      
000b7e   ffdb                                                                                                               
000b80   0e05     MOVLW     0x5                                                                                             
000b82   c033     MOVFF     0x33,0xfdb                                                                                      
000b84   ffdb                                                                                                               
                                           	}                                                                               C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000b86   ec51     CALL      0x16a2,0x0         if (right_back > 127)                                                        C:\mort\Mort Code 08\code\teleop.c
000b88   f00b                                                                                                               
000b8a   3401     RLCF      0x1,0x0,0x0                                                                                     
000b8c   e20f     BC        0xbac                                                                                           
000b8e   5000     MOVF      0x0,0x0,0x0                                                                                     
000b90   087f     SUBLW     0x7f                                                                                            
000b92   0e00     MOVLW     0x0                                                                                             
000b94   5401     SUBFWB    0x1,0x0,0x0                                                                                     
000b96   e20a     BC        0xbac                                                                                           
                                           	{                                                                               C:\mort\Mort Code 08\code\teleop.c
000b98   ec41     CALL      0x1682,0x0     	    right_back = (((127.0 - PWM_DEADZONE_RIGHT) / 127.0) * (right_back-127.0)) + PWM_DEADZONE_RIGHT + 127.0; C:\mort\Mort Code 08\code\teleop.c
000b9a   f00b                                                                                                               
000b9c   0e06     MOVLW     0x6                                                                                             
000b9e   cfdb     MOVFF     0xfdb,0x32                                                                                      
000ba0   f032                                                                                                               
000ba2   0e07     MOVLW     0x7                                                                                             
000ba4   ecba     CALL      0x1574,0x0                                                                                      
000ba6   f00a                                                                                                               
000ba8   ecdc     CALL      0x17b8,0x0                                                                                      
000baa   f00b                                                                                                               
001574   da0c     RCALL     0x198e                                                                                          
001576   d9a8     RCALL     0x18c8                                                                                          
001578   d9ef     RCALL     0x1958                                                                                          
00157a   ec66     CALL      0x2ccc,0x0                                                                                      
00157c   f016                                                                                                               
00157e   d99b     RCALL     0x18b6                                                                                          
001580   d942     RCALL     0x1806                                                                                          
001582   c008     MOVFF     0x8,0x31                                                                                        
001584   f031                                                                                                               
001586   c009     MOVFF     0x9,0x32                                                                                        
001588   f032                                                                                                               
00158a   c00a     MOVFF     0xa,0x33                                                                                        
00158c   f033                                                                                                               
00158e   c00b     MOVFF     0xb,0x34                                                                                        
001590   f034                                                                                                               
001592   ec50     CALL      0x2ea0,0x0                                                                                      
001594   f017                                                                                                               
001596   d9a7     RCALL     0x18e6                                                                                          
001598   6a36     CLRF      0x36,0x0                                                                                        
00159a   6a37     CLRF      0x37,0x0                                                                                        
00159c   0e40     MOVLW     0x40                                                                                            
00159e   6e38     MOVWF     0x38,0x0                                                                                        
0015a0   0e41     MOVLW     0x41                                                                                            
0015a2   6e39     MOVWF     0x39,0x0                                                                                        
0015a4   ec67     CALL      0x2cce,0x0                                                                                      
0015a6   f016                                                                                                               
0015a8   d9a7     RCALL     0x18f8                                                                                          
0015aa   d9d6     RCALL     0x1958                                                                                          
0015ac   ec67     CALL      0x2cce,0x0                                                                                      
0015ae   f016                                                                                                               
0015b0   ef1e     GOTO      0x303c                                                                                          
0015b2   f018                                                                                                               
001682   0e9f     MOVLW     0x9f                                                                                            
001684   6e08     MOVWF     0x8,0x0                                                                                         
001686   0ecf     MOVLW     0xcf                                                                                            
001688   6e09     MOVWF     0x9,0x0                                                                                         
00168a   0e67     MOVLW     0x67                                                                                            
00168c   6e0a     MOVWF     0xa,0x0                                                                                         
00168e   0e3f     MOVLW     0x3f                                                                                            
001690   6e0b     MOVWF     0xb,0x0                                                                                         
001692   0012     RETURN    0x0                                                                                             
0017b8   0e06     MOVLW     0x6                                                                                             
0017ba   c032     MOVFF     0x32,0xfdb                                                                                      
0017bc   ffdb                                                                                                               
0017be   0e07     MOVLW     0x7                                                                                             
0017c0   c033     MOVFF     0x33,0xfdb                                                                                      
0017c2   ffdb                                                                                                               
0017c4   0012     RETURN    0x0                                                                                             
0018e6   c031     MOVFF     0x31,0x4                                                                                        
0018e8   f004                                                                                                               
0018ea   c032     MOVFF     0x32,0x5                                                                                        
0018ec   f005                                                                                                               
0018ee   c033     MOVFF     0x33,0x6                                                                                        
0018f0   f006                                                                                                               
0018f2   c034     MOVFF     0x34,0x7                                                                                        
0018f4   f007                                                                                                               
0018f6   0012     RETURN    0x0                                                                                             
0018f8   c031     MOVFF     0x31,0x0                                                                                        
0018fa   f000                                                                                                               
0018fc   c032     MOVFF     0x32,0x1                                                                                        
0018fe   f001                                                                                                               
001900   c033     MOVFF     0x33,0x2                                                                                        
001902   f002                                                                                                               
001904   c034     MOVFF     0x34,0x3                                                                                        
001906   f003                                                                                                               
001908   0012     RETURN    0x0                                                                                             
001958   6a36     CLRF      0x36,0x0                                                                                        
00195a   6a37     CLRF      0x37,0x0                                                                                        
00195c   0efe     MOVLW     0xfe                                                                                            
00195e   6e38     MOVWF     0x38,0x0                                                                                        
001960   0e42     MOVLW     0x42                                                                                            
001962   6e39     MOVWF     0x39,0x0                                                                                        
001964   0012     RETURN    0x0                                                                                             
                                           	}                                                                               C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000bac   ecda     CALL      0x15b4,0x0         left_front = Limit(left_front, 0, 255);                                      C:\mort\Mort Code 08\code\teleop.c
000bae   f00a                                                                                                               
                                               left_back = Limit(left_back, 0, 255);                                        C:\mort\Mort Code 08\code\teleop.c
                                               right_front = Limit(right_front, 0, 255);                                    C:\mort\Mort Code 08\code\teleop.c
                                               right_back = Limit(right_back, 0, 255);                                      C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000bb0   0e02     MOVLW     0x2                BACK_LEFT 	= left_back;                                                      C:\mort\Mort Code 08\code\teleop.c
000bb2   cfdb     MOVFF     0xfdb,0x191                                                                                     
000bb4   f191                                                                                                               
000bb6   cfdf     MOVFF     0xfdf,0x192        FRONT_LEFT  = left_front;                                                    C:\mort\Mort Code 08\code\teleop.c
000bb8   f192                                                                                                               
000bba   0e04     MOVLW     0x4            	FRONT_RIGHT = right_front;                                                      C:\mort\Mort Code 08\code\teleop.c
000bbc   cfdb     MOVFF     0xfdb,0x193                                                                                     
000bbe   f193                                                                                                               
000bc0   0e06     MOVLW     0x6            	BACK_RIGHT 	= right_back;                                                       C:\mort\Mort Code 08\code\teleop.c
000bc2   cfdb     MOVFF     0xfdb,0x190                                                                                     
000bc4   f190                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000bc6   0e0c     MOVLW     0xc            }                                                                                C:\mort\Mort Code 08\code\teleop.c
000bc8   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
000bca   e202     BC        0xbd0                                                                                           
000bcc   6ae1     CLRF      0xe1,0x0                                                                                        
000bce   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000bd0   6ee1     MOVWF     0xe1,0x0                                                                                        
000bd2   ef5d     GOTO      0x16ba                                                                                          
000bd4   f00b                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                           void Service_Joysticks(void)                                                     C:\mort\Mort Code 08\code\teleop.c
                                           {                                                                                C:\mort\Mort Code 08\code\teleop.c
                                               // Makes copies                                                              C:\mort\Mort Code 08\code\teleop.c
000bd6   0101     MOVLB     0x1                drive_x = DRIVE_X;                                                           C:\mort\Mort Code 08\code\teleop.c
000bd8   51b7     MOVF      0xb7,0x0,0x1                                                                                    
000bda   0102     MOVLB     0x2                                                                                             
000bdc   6fe2     MOVWF     0xe2,0x1                                                                                        
000bde   6be3     CLRF      0xe3,0x1                                                                                        
000be0   0101     MOVLB     0x1                drive_y = DRIVE_Y;                                                           C:\mort\Mort Code 08\code\teleop.c
000be2   51b2     MOVF      0xb2,0x0,0x1                                                                                    
000be4   0102     MOVLB     0x2                                                                                             
000be6   6fe4     MOVWF     0xe4,0x1                                                                                        
000be8   6be5     CLRF      0xe5,0x1                                                                                        
000bea   0101     MOVLB     0x1                drive_z = DRIVE_Z;                                                           C:\mort\Mort Code 08\code\teleop.c
000bec   51b6     MOVF      0xb6,0x0,0x1                                                                                    
000bee   0102     MOVLB     0x2                                                                                             
000bf0   6fe6     MOVWF     0xe6,0x1                                                                                        
000bf2   6be7     CLRF      0xe7,0x1                                                                                        
000bf4   0101     MOVLB     0x1                tower_joystick = TOWER_JOYSTICK;                                             C:\mort\Mort Code 08\code\teleop.c
000bf6   51b4     MOVF      0xb4,0x0,0x1                                                                                    
000bf8   0102     MOVLB     0x2                                                                                             
000bfa   6fe8     MOVWF     0xe8,0x1                                                                                        
000bfc   6be9     CLRF      0xe9,0x1                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                               // Translate to zero (center)                                                C:\mort\Mort Code 08\code\teleop.c
000bfe   0e5c     MOVLW     0x5c               drive_x -= DRIVE_X_OFFSET;                                                   C:\mort\Mort Code 08\code\teleop.c
000c00   5fe2     SUBWF     0xe2,0x1,0x1                                                                                    
000c02   0e00     MOVLW     0x0                                                                                             
000c04   5be3     SUBWFB    0xe3,0x1,0x1                                                                                    
000c06   0e58     MOVLW     0x58               drive_y -= DRIVE_Y_OFFSET;                                                   C:\mort\Mort Code 08\code\teleop.c
000c08   5fe4     SUBWF     0xe4,0x1,0x1                                                                                    
000c0a   0e00     MOVLW     0x0                                                                                             
000c0c   5be5     SUBWFB    0xe5,0x1,0x1                                                                                    
000c0e   0e44     MOVLW     0x44               drive_z -= DRIVE_Z_OFFSET;                                                   C:\mort\Mort Code 08\code\teleop.c
000c10   5fe6     SUBWF     0xe6,0x1,0x1                                                                                    
000c12   0e00     MOVLW     0x0                                                                                             
000c14   5be7     SUBWFB    0xe7,0x1,0x1                                                                                    
000c16   0e31     MOVLW     0x31               tower_joystick -= TOWER_JOYSTICK_OFFSET;                                     C:\mort\Mort Code 08\code\teleop.c
000c18   5fe8     SUBWF     0xe8,0x1,0x1                                                                                    
000c1a   0e00     MOVLW     0x0                                                                                             
000c1c   5be9     SUBWFB    0xe9,0x1,0x1                                                                                    
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                               // Scales inputs to -127  127                                                C:\mort\Mort Code 08\code\teleop.c
000c1e   35e3     RLCF      0xe3,0x0,0x1       if (drive_x > 0)                                                             C:\mort\Mort Code 08\code\teleop.c
000c20   e20b     BC        0xc38                                                                                           
000c22   51e2     MOVF      0xe2,0x0,0x1                                                                                    
000c24   0800     SUBLW     0x0                                                                                             
000c26   0e00     MOVLW     0x0                                                                                             
000c28   55e3     SUBFWB    0xe3,0x0,0x1                                                                                    
000c2a   e206     BC        0xc38                                                                                           
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
000c2c   0ea1     MOVLW     0xa1                   drive_x = (127.0 / DRIVE_X_MAX) *  drive_x;                              C:\mort\Mort Code 08\code\teleop.c
000c2e   6e00     MOVWF     0x0,0x0                                                                                         
000c30   0e17     MOVLW     0x17                                                                                            
000c32   6e01     MOVWF     0x1,0x0                                                                                         
000c34   0e7a     MOVLW     0x7a                                                                                            
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
000c36   d008     BRA       0xc48              else if (drive_x < 0)                                                        C:\mort\Mort Code 08\code\teleop.c
000c38   0e80     MOVLW     0x80                                                                                            
000c3a   15e3     ANDWF     0xe3,0x0,0x1                                                                                    
000c3c   e012     BZ        0xc62                                                                                           
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
000c3e   0e1e     MOVLW     0x1e                   drive_x = ((-1.0 * 127.0) / DRIVE_X_MIN) * drive_x;                      C:\mort\Mort Code 08\code\teleop.c
000c40   6e00     MOVWF     0x0,0x0                                                                                         
000c42   0e98     MOVLW     0x98                                                                                            
000c44   6e01     MOVWF     0x1,0x0                                                                                         
000c46   0eeb     MOVLW     0xeb                                                                                            
000c48   6e02     MOVWF     0x2,0x0                                                                                         
000c4a   0e3f     MOVLW     0x3f                                                                                            
000c4c   6e03     MOVWF     0x3,0x0                                                                                         
000c4e   c2e2     MOVFF     0x2e2,0x32                                                                                      
000c50   f032                                                                                                               
000c52   c2e3     MOVFF     0x2e3,0x33                                                                                      
000c54   f033                                                                                                               
000c56   ec46     CALL      0x188c,0x0                                                                                      
000c58   f00c                                                                                                               
000c5a   c032     MOVFF     0x32,0x2e2                                                                                      
000c5c   f2e2                                                                                                               
000c5e   c033     MOVFF     0x33,0x2e3                                                                                      
000c60   f2e3                                                                                                               
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000c62   0102     MOVLB     0x2                if (drive_y > 0)                                                             C:\mort\Mort Code 08\code\teleop.c
000c64   35e5     RLCF      0xe5,0x0,0x1                                                                                    
000c66   e20b     BC        0xc7e                                                                                           
000c68   51e4     MOVF      0xe4,0x0,0x1                                                                                    
000c6a   0800     SUBLW     0x0                                                                                             
000c6c   0e00     MOVLW     0x0                                                                                             
000c6e   55e5     SUBFWB    0xe5,0x0,0x1                                                                                    
000c70   e206     BC        0xc7e                                                                                           
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
000c72   0eaf     MOVLW     0xaf                   drive_y = (127.0 / DRIVE_Y_MAX) *  drive_y;                              C:\mort\Mort Code 08\code\teleop.c
000c74   6e00     MOVWF     0x0,0x0                                                                                         
000c76   0ef0     MOVLW     0xf0                                                                                            
000c78   6e01     MOVWF     0x1,0x0                                                                                         
000c7a   0e8a     MOVLW     0x8a                                                                                            
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
000c7c   d008     BRA       0xc8e              else if (drive_y < 0)                                                        C:\mort\Mort Code 08\code\teleop.c
000c7e   0e80     MOVLW     0x80                                                                                            
000c80   15e5     ANDWF     0xe5,0x0,0x1                                                                                    
000c82   e012     BZ        0xca8                                                                                           
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
000c84   0e7a     MOVLW     0x7a                   drive_y = ((-1.0 * 127.0) / DRIVE_Y_MIN) * drive_y;                      C:\mort\Mort Code 08\code\teleop.c
000c86   6e00     MOVWF     0x0,0x0                                                                                         
000c88   0ea0     MOVLW     0xa0                                                                                            
000c8a   6e01     MOVWF     0x1,0x0                                                                                         
000c8c   0ef2     MOVLW     0xf2                                                                                            
000c8e   6e02     MOVWF     0x2,0x0                                                                                         
000c90   0e3f     MOVLW     0x3f                                                                                            
000c92   6e03     MOVWF     0x3,0x0                                                                                         
000c94   c2e4     MOVFF     0x2e4,0x32                                                                                      
000c96   f032                                                                                                               
000c98   c2e5     MOVFF     0x2e5,0x33                                                                                      
000c9a   f033                                                                                                               
000c9c   ec46     CALL      0x188c,0x0                                                                                      
000c9e   f00c                                                                                                               
000ca0   c032     MOVFF     0x32,0x2e4                                                                                      
000ca2   f2e4                                                                                                               
000ca4   c033     MOVFF     0x33,0x2e5                                                                                      
000ca6   f2e5                                                                                                               
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000ca8   0102     MOVLB     0x2                if (drive_z > 0)                                                             C:\mort\Mort Code 08\code\teleop.c
000caa   35e7     RLCF      0xe7,0x0,0x1                                                                                    
000cac   e20b     BC        0xcc4                                                                                           
000cae   51e6     MOVF      0xe6,0x0,0x1                                                                                    
000cb0   0800     SUBLW     0x0                                                                                             
000cb2   0e00     MOVLW     0x0                                                                                             
000cb4   55e7     SUBFWB    0xe7,0x0,0x1                                                                                    
000cb6   e206     BC        0xcc4                                                                                           
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
000cb8   0edc     MOVLW     0xdc                   drive_z = (127.0 / DRIVE_Z_MAX) *  drive_z;                              C:\mort\Mort Code 08\code\teleop.c
000cba   6e00     MOVWF     0x0,0x0                                                                                         
000cbc   0eec     MOVLW     0xec                                                                                            
000cbe   6e01     MOVWF     0x1,0x0                                                                                         
000cc0   0e97     MOVLW     0x97                                                                                            
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
000cc2   d007     BRA       0xcd2              else if (drive_z < 0)                                                        C:\mort\Mort Code 08\code\teleop.c
000cc4   0e80     MOVLW     0x80                                                                                            
000cc6   15e7     ANDWF     0xe7,0x0,0x1                                                                                    
000cc8   e011     BZ        0xcec                                                                                           
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
000cca   0e0f     MOVLW     0xf                    drive_z = ((-1.0 * 127.0) / DRIVE_Z_MIN) * drive_z;                      C:\mort\Mort Code 08\code\teleop.c
000ccc   6e00     MOVWF     0x0,0x0                                                                                         
000cce   6e01     MOVWF     0x1,0x0                                                                                         
000cd0   0eef     MOVLW     0xef                                                                                            
000cd2   6e02     MOVWF     0x2,0x0                                                                                         
000cd4   0e3f     MOVLW     0x3f                                                                                            
000cd6   6e03     MOVWF     0x3,0x0                                                                                         
000cd8   c2e6     MOVFF     0x2e6,0x32                                                                                      
000cda   f032                                                                                                               
000cdc   c2e7     MOVFF     0x2e7,0x33                                                                                      
000cde   f033                                                                                                               
000ce0   ec46     CALL      0x188c,0x0                                                                                      
000ce2   f00c                                                                                                               
000ce4   c032     MOVFF     0x32,0x2e6                                                                                      
000ce6   f2e6                                                                                                               
000ce8   c033     MOVFF     0x33,0x2e7                                                                                      
000cea   f2e7                                                                                                               
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000cec   0102     MOVLB     0x2                if (tower_joystick > 0)                                                      C:\mort\Mort Code 08\code\teleop.c
000cee   35e9     RLCF      0xe9,0x0,0x1                                                                                    
000cf0   e20b     BC        0xd08                                                                                           
000cf2   51e8     MOVF      0xe8,0x0,0x1                                                                                    
000cf4   0800     SUBLW     0x0                                                                                             
000cf6   0e00     MOVLW     0x0                                                                                             
000cf8   55e9     SUBFWB    0xe9,0x0,0x1                                                                                    
000cfa   e206     BC        0xd08                                                                                           
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
000cfc   0eb4     MOVLW     0xb4                   tower_joystick = (127.0 / TOWER_JOYSTICK_MAX) * tower_joystick;          C:\mort\Mort Code 08\code\teleop.c
000cfe   6e00     MOVWF     0x0,0x0                                                                                         
000d00   0e98     MOVLW     0x98                                                                                            
000d02   6e01     MOVWF     0x1,0x0                                                                                         
000d04   0e0e     MOVLW     0xe                                                                                             
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
000d06   d008     BRA       0xd18              else if (tower_joystick < 0)                                                 C:\mort\Mort Code 08\code\teleop.c
000d08   0e80     MOVLW     0x80                                                                                            
000d0a   15e9     ANDWF     0xe9,0x0,0x1                                                                                    
000d0c   e012     BZ        0xd32                                                                                           
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
000d0e   0ea9     MOVLW     0xa9                   tower_joystick = ((-1.0 * 127.0) / TOWER_JOYSTICK_MIN) * tower_joystick; C:\mort\Mort Code 08\code\teleop.c
000d10   6e00     MOVWF     0x0,0x0                                                                                         
000d12   0eef     MOVLW     0xef                                                                                            
000d14   6e01     MOVWF     0x1,0x0                                                                                         
000d16   0e2c     MOVLW     0x2c                                                                                            
000d18   6e02     MOVWF     0x2,0x0                                                                                         
000d1a   0e40     MOVLW     0x40                                                                                            
000d1c   6e03     MOVWF     0x3,0x0                                                                                         
000d1e   c2e8     MOVFF     0x2e8,0x32                                                                                      
000d20   f032                                                                                                               
000d22   c2e9     MOVFF     0x2e9,0x33                                                                                      
000d24   f033                                                                                                               
000d26   ec46     CALL      0x188c,0x0                                                                                      
000d28   f00c                                                                                                               
000d2a   c032     MOVFF     0x32,0x2e8                                                                                      
000d2c   f2e8                                                                                                               
000d2e   c033     MOVFF     0x33,0x2e9                                                                                      
000d30   f2e9                                                                                                               
0015f2   d979     RCALL     0x18e6                                                                                          
0015f4   d908     RCALL     0x1806                                                                                          
0015f6   d156     BRA       0x18a4                                                                                          
001784   ec50     CALL      0x2ea0,0x0                                                                                      
001786   f017                                                                                                               
001788   ef1e     GOTO      0x303c                                                                                          
00178a   f018                                                                                                               
00188c   ec53     CALL      0x2ca6,0x0                                                                                      
00188e   f016                                                                                                               
001890   deb0     RCALL     0x15f2                                                                                          
001892   efc2     GOTO      0x1784                                                                                          
001894   f00b                                                                                                               
0018a4   c000     MOVFF     0x0,0x31                                                                                        
0018a6   f031                                                                                                               
0018a8   c001     MOVFF     0x1,0x32                                                                                        
0018aa   f032                                                                                                               
0018ac   c002     MOVFF     0x2,0x33                                                                                        
0018ae   f033                                                                                                               
0018b0   c003     MOVFF     0x3,0x34                                                                                        
0018b2   f034                                                                                                               
0018b4   0012     RETURN    0x0                                                                                             
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                               // Puts deadband on all joysticks                                            C:\mort\Mort Code 08\code\teleop.c
000d32   0e0f     MOVLW     0xf                drive_x = Deadband(drive_x, DRIVE_X_DEADBAND);                               C:\mort\Mort Code 08\code\teleop.c
000d34   6ee6     MOVWF     0xe6,0x0                                                                                        
000d36   6ae6     CLRF      0xe6,0x0                                                                                        
000d38   ecb3     CALL      0x1966,0x0                                                                                      
000d3a   f00c                                                                                                               
000d3c   ec99     CALL      0x1732,0x0                                                                                      
000d3e   f00b                                                                                                               
000d40   cff3     MOVFF     0xff3,0x2e2                                                                                     
000d42   f2e2                                                                                                               
000d44   cff4     MOVFF     0xff4,0x2e3                                                                                     
000d46   f2e3                                                                                                               
000d48   0e0f     MOVLW     0xf                drive_y = Deadband(drive_y, DRIVE_Y_DEADBAND);                               C:\mort\Mort Code 08\code\teleop.c
000d4a   6ee6     MOVWF     0xe6,0x0                                                                                        
000d4c   6ae6     CLRF      0xe6,0x0                                                                                        
000d4e   ecb8     CALL      0x1970,0x0                                                                                      
000d50   f00c                                                                                                               
000d52   ec99     CALL      0x1732,0x0                                                                                      
000d54   f00b                                                                                                               
000d56   cff3     MOVFF     0xff3,0x2e4                                                                                     
000d58   f2e4                                                                                                               
000d5a   cff4     MOVFF     0xff4,0x2e5                                                                                     
000d5c   f2e5                                                                                                               
000d5e   0e19     MOVLW     0x19               drive_z = Deadband(drive_z, DRIVE_Z_DEADBAND);                               C:\mort\Mort Code 08\code\teleop.c
000d60   6ee6     MOVWF     0xe6,0x0                                                                                        
000d62   6ae6     CLRF      0xe6,0x0                                                                                        
000d64   ecbd     CALL      0x197a,0x0                                                                                      
000d66   f00c                                                                                                               
000d68   ec99     CALL      0x1732,0x0                                                                                      
000d6a   f00b                                                                                                               
000d6c   cff3     MOVFF     0xff3,0x2e6                                                                                     
000d6e   f2e6                                                                                                               
000d70   cff4     MOVFF     0xff4,0x2e7                                                                                     
000d72   f2e7                                                                                                               
000d74   0e0f     MOVLW     0xf                tower_joystick = Deadband(tower_joystick, TOWER_JOYSTICK_DEADBAND);          C:\mort\Mort Code 08\code\teleop.c
000d76   6ee6     MOVWF     0xe6,0x0                                                                                        
000d78   6ae6     CLRF      0xe6,0x0                                                                                        
000d7a   c2e8     MOVFF     0x2e8,0xfe6                                                                                     
000d7c   ffe6                                                                                                               
000d7e   c2e9     MOVFF     0x2e9,0xfe6                                                                                     
000d80   ffe6                                                                                                               
000d82   ec99     CALL      0x1732,0x0                                                                                      
000d84   f00b                                                                                                               
000d86   cff3     MOVFF     0xff3,0x2e8                                                                                     
000d88   f2e8                                                                                                               
000d8a   cff4     MOVFF     0xff4,0x2e9                                                                                     
000d8c   f2e9                                                                                                               
001732   de08     RCALL     0x1344                                                                                          
001734   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001736   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001738   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00173a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00173c   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000d8e   0102     MOVLB     0x2                drive_x *= -1;                                                               C:\mort\Mort Code 08\code\teleop.c
000d90   6de2     NEGF      0xe2,0x1                                                                                        
000d92   1fe3     COMF      0xe3,0x1,0x1                                                                                    
000d94   0e00     MOVLW     0x0                                                                                             
000d96   23e3     ADDWFC    0xe3,0x1,0x1                                                                                    
                                               drive_y *= 1;                                                                C:\mort\Mort Code 08\code\teleop.c
000d98   6de6     NEGF      0xe6,0x1           drive_z *= -1;                                                               C:\mort\Mort Code 08\code\teleop.c
000d9a   1fe7     COMF      0xe7,0x1,0x1                                                                                    
000d9c   23e7     ADDWFC    0xe7,0x1,0x1                                                                                    
000d9e   6de8     NEGF      0xe8,0x1           tower_joystick *= -1;                                                        C:\mort\Mort Code 08\code\teleop.c
000da0   1fe9     COMF      0xe9,0x1,0x1                                                                                    
000da2   23e9     ADDWFC    0xe9,0x1,0x1                                                                                    
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000da4   ec3a     CALL      0x1674,0x0         drive_x = Limit(drive_x, -127, 127);                                         C:\mort\Mort Code 08\code\teleop.c
000da6   f00b                                                                                                               
000da8   ecb3     CALL      0x1966,0x0                                                                                      
000daa   f00c                                                                                                               
000dac   ecfd     CALL      0x17fa,0x0                                                                                      
000dae   f00b                                                                                                               
000db0   cff3     MOVFF     0xff3,0x2e2                                                                                     
000db2   f2e2                                                                                                               
000db4   cff4     MOVFF     0xff4,0x2e3                                                                                     
000db6   f2e3                                                                                                               
000db8   ec3a     CALL      0x1674,0x0         drive_y = Limit(drive_y, -127, 127);                                         C:\mort\Mort Code 08\code\teleop.c
000dba   f00b                                                                                                               
000dbc   ecb8     CALL      0x1970,0x0                                                                                      
000dbe   f00c                                                                                                               
000dc0   ecfd     CALL      0x17fa,0x0                                                                                      
000dc2   f00b                                                                                                               
000dc4   cff3     MOVFF     0xff3,0x2e4                                                                                     
000dc6   f2e4                                                                                                               
000dc8   cff4     MOVFF     0xff4,0x2e5                                                                                     
000dca   f2e5                                                                                                               
000dcc   ec3a     CALL      0x1674,0x0         drive_z = Limit(drive_z, -127, 127);                                         C:\mort\Mort Code 08\code\teleop.c
000dce   f00b                                                                                                               
000dd0   ecbd     CALL      0x197a,0x0                                                                                      
000dd2   f00c                                                                                                               
000dd4   ecfd     CALL      0x17fa,0x0                                                                                      
000dd6   f00b                                                                                                               
000dd8   cff3     MOVFF     0xff3,0x2e6                                                                                     
000dda   f2e6                                                                                                               
000ddc   cff4     MOVFF     0xff4,0x2e7                                                                                     
000dde   f2e7                                                                                                               
000de0   ec3a     CALL      0x1674,0x0         tower_joystick = Limit(tower_joystick, -127, 127);                           C:\mort\Mort Code 08\code\teleop.c
000de2   f00b                                                                                                               
000de4   c2e8     MOVFF     0x2e8,0xfe6                                                                                     
000de6   ffe6                                                                                                               
000de8   c2e9     MOVFF     0x2e9,0xfe6                                                                                     
000dea   ffe6                                                                                                               
000dec   ecfd     CALL      0x17fa,0x0                                                                                      
000dee   f00b                                                                                                               
000df0   cff3     MOVFF     0xff3,0x2e8                                                                                     
000df2   f2e8                                                                                                               
000df4   cff4     MOVFF     0xff4,0x2e9                                                                                     
000df6   f2e9                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000df8   0101     MOVLB     0x1                printf("drive_x: %d drive_y:%d drive_z:%d p1_x:%d p1_y: %d p2_x: %d\r\n", drive_x, drive_y, drive_z, p1_x, p1_y, p2_x); C:\mort\Mort Code 08\code\teleop.c
000dfa   51b7     MOVF      0xb7,0x0,0x1                                                                                    
000dfc   6ee6     MOVWF     0xe6,0x0                                                                                        
000dfe   6ae6     CLRF      0xe6,0x0                                                                                        
000e00   51b2     MOVF      0xb2,0x0,0x1                                                                                    
000e02   6ee6     MOVWF     0xe6,0x0                                                                                        
000e04   6ae6     CLRF      0xe6,0x0                                                                                        
000e06   51b6     MOVF      0xb6,0x0,0x1                                                                                    
000e08   6ee6     MOVWF     0xe6,0x0                                                                                        
000e0a   6ae6     CLRF      0xe6,0x0                                                                                        
000e0c   ec9f     CALL      0x173e,0x0                                                                                      
000e0e   f00b                                                                                                               
000e10   0e36     MOVLW     0x36                                                                                            
000e12   6e00     MOVWF     0x0,0x0                                                                                         
000e14   0e44     MOVLW     0x44                                                                                            
000e16   6e01     MOVWF     0x1,0x0                                                                                         
000e18   6a02     CLRF      0x2,0x0                                                                                         
000e1a   c000     MOVFF     0x0,0xfe6                                                                                       
000e1c   ffe6                                                                                                               
000e1e   6ee6     MOVWF     0xe6,0x0                                                                                        
000e20   c002     MOVFF     0x2,0xfe6                                                                                       
000e22   ffe6                                                                                                               
000e24   ec3a     CALL      0x4474,0x0                                                                                      
000e26   f022                                                                                                               
000e28   6e03     MOVWF     0x3,0x0                                                                                         
000e2a   0e0f     MOVLW     0xf                                                                                             
000e2c   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
000e2e   5003     MOVF      0x3,0x0,0x0                                                                                     
000e30   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000e32   ec58     CALL      0x16b0,0x0     void Service_Height_Flags (void)                                                 C:\mort\Mort Code 08\code\teleop.c
000e34   f00b                                                                                                               
000e36   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\mort\Mort Code 08\code\teleop.c
000e38   6adf     CLRF      0xdf,0x0       	unsigned char button_pressed = 0;                                               C:\mort\Mort Code 08\code\teleop.c
                                           	static unsigned char button_cancel = 0;                                         C:\mort\Mort Code 08\code\teleop.c
                                           	static unsigned char button_released = 0;                                       C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000e3a   0101     MOVLB     0x1            	button_pressed = TOWER_BUTTON_LOW + TOWER_BUTTON_MIDDLE + TOWER_BUTTON_HIGH;    C:\mort\Mort Code 08\code\teleop.c
000e3c   51af     MOVF      0xaf,0x0,0x1                                                                                    
000e3e   0b10     ANDLW     0x10                                                                                            
000e40   e001     BZ        0xe44                                                                                           
000e42   0e01     MOVLW     0x1                                                                                             
000e44   6e01     MOVWF     0x1,0x0                                                                                         
000e46   51af     MOVF      0xaf,0x0,0x1                                                                                    
000e48   0b20     ANDLW     0x20                                                                                            
000e4a   e001     BZ        0xe4e                                                                                           
000e4c   0e01     MOVLW     0x1                                                                                             
000e4e   6e00     MOVWF     0x0,0x0                                                                                         
000e50   51af     MOVF      0xaf,0x0,0x1                                                                                    
000e52   0b40     ANDLW     0x40                                                                                            
000e54   e001     BZ        0xe58                                                                                           
000e56   0e01     MOVLW     0x1                                                                                             
000e58   2400     ADDWF     0x0,0x0,0x0                                                                                     
000e5a   2401     ADDWF     0x1,0x0,0x0                                                                                     
000e5c   6edf     MOVWF     0xdf,0x0                                                                                        
000e5e   0e01     MOVLW     0x1            	button_pressed = Limit(button_pressed, 0, 1); //retard check                    C:\mort\Mort Code 08\code\teleop.c
000e60   6ee6     MOVWF     0xe6,0x0                                                                                        
000e62   6ae6     CLRF      0xe6,0x0                                                                                        
000e64   0e00     MOVLW     0x0                                                                                             
000e66   6ee6     MOVWF     0xe6,0x0                                                                                        
000e68   6ae6     CLRF      0xe6,0x0                                                                                        
000e6a   cfdf     MOVFF     0xfdf,0xfe6                                                                                     
000e6c   ffe6                                                                                                               
000e6e   6ae6     CLRF      0xe6,0x0                                                                                        
000e70   ecfd     CALL      0x17fa,0x0                                                                                      
000e72   f00b                                                                                                               
000e74   50f3     MOVF      0xf3,0x0,0x0                                                                                    
000e76   6edf     MOVWF     0xdf,0x0                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000e78   0101     MOVLB     0x1            	if (TOWER_BUTTON_LOW && !button_cancel)                                         C:\mort\Mort Code 08\code\teleop.c
000e7a   51af     MOVF      0xaf,0x0,0x1                                                                                    
000e7c   0b40     ANDLW     0x40                                                                                            
000e7e   e005     BZ        0xe8a                                                                                           
000e80   0102     MOVLB     0x2                                                                                             
000e82   51ea     MOVF      0xea,0x0,0x1                                                                                    
000e84   e102     BNZ       0xe8a                                                                                           
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
000e86   0e01     MOVLW     0x1                    height_flag = HEIGHT_FLAG_LOW;                                           C:\mort\Mort Code 08\code\teleop.c
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
000e88   d011     BRA       0xeac              else if (TOWER_BUTTON_MIDDLE && !button_cancel)                              C:\mort\Mort Code 08\code\teleop.c
000e8a   0101     MOVLB     0x1                                                                                             
000e8c   51af     MOVF      0xaf,0x0,0x1                                                                                    
000e8e   0b20     ANDLW     0x20                                                                                            
000e90   e005     BZ        0xe9c                                                                                           
000e92   0102     MOVLB     0x2                                                                                             
000e94   51ea     MOVF      0xea,0x0,0x1                                                                                    
000e96   e102     BNZ       0xe9c                                                                                           
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
000e98   0e02     MOVLW     0x2                    height_flag = HEIGHT_FLAG_MIDDLE;                                        C:\mort\Mort Code 08\code\teleop.c
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
000e9a   d008     BRA       0xeac              else if (TOWER_BUTTON_HIGH && !button_cancel)                                C:\mort\Mort Code 08\code\teleop.c
000e9c   0101     MOVLB     0x1                                                                                             
000e9e   51af     MOVF      0xaf,0x0,0x1                                                                                    
000ea0   0b10     ANDLW     0x10                                                                                            
000ea2   e005     BZ        0xeae                                                                                           
000ea4   0102     MOVLB     0x2                                                                                             
000ea6   51ea     MOVF      0xea,0x0,0x1                                                                                    
000ea8   e102     BNZ       0xeae                                                                                           
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
000eaa   0e03     MOVLW     0x3                    height_flag = HEIGHT_FLAG_HIGH;                                          C:\mort\Mort Code 08\code\teleop.c
000eac   6fe0     MOVWF     0xe0,0x1                                                                                        
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000eae   0102     MOVLB     0x2            	if (height_flag != HEIGHT_FLAG_MANUAL && !button_pressed)                       C:\mort\Mort Code 08\code\teleop.c
000eb0   51e0     MOVF      0xe0,0x0,0x1                                                                                    
000eb2   e004     BZ        0xebc                                                                                           
000eb4   50df     MOVF      0xdf,0x0,0x0                                                                                    
000eb6   e102     BNZ       0xebc                                                                                           
                                           	{                                                                               C:\mort\Mort Code 08\code\teleop.c
000eb8   0e01     MOVLW     0x1            		button_released = 1;                                                           C:\mort\Mort Code 08\code\teleop.c
000eba   6feb     MOVWF     0xeb,0x1                                                                                        
                                           	}                                                                               C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000ebc   50df     MOVF      0xdf,0x0,0x0   	if (button_pressed && button_released)                                          C:\mort\Mort Code 08\code\teleop.c
000ebe   e007     BZ        0xece                                                                                           
000ec0   51eb     MOVF      0xeb,0x0,0x1                                                                                    
000ec2   e005     BZ        0xece                                                                                           
                                           	{                                                                               C:\mort\Mort Code 08\code\teleop.c
000ec4   6be0     CLRF      0xe0,0x1       		height_flag = HEIGHT_FLAG_MANUAL;                                              C:\mort\Mort Code 08\code\teleop.c
000ec6   6beb     CLRF      0xeb,0x1       		button_released = 0;                                                           C:\mort\Mort Code 08\code\teleop.c
000ec8   0e01     MOVLW     0x1            		button_cancel = 1;                                                             C:\mort\Mort Code 08\code\teleop.c
000eca   6fea     MOVWF     0xea,0x1                                                                                        
                                           	}                                                                               C:\mort\Mort Code 08\code\teleop.c
000ecc   d005     BRA       0xed8          	else if (!button_pressed && !button_released)                                   C:\mort\Mort Code 08\code\teleop.c
000ece   50df     MOVF      0xdf,0x0,0x0                                                                                    
000ed0   e103     BNZ       0xed8                                                                                           
000ed2   51eb     MOVF      0xeb,0x0,0x1                                                                                    
000ed4   e101     BNZ       0xed8                                                                                           
                                           	{                                                                               C:\mort\Mort Code 08\code\teleop.c
000ed6   6bea     CLRF      0xea,0x1               button_cancel = 0;                                                       C:\mort\Mort Code 08\code\teleop.c
                                           	}                                                                               C:\mort\Mort Code 08\code\teleop.c
000ed8   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\mort\Mort Code 08\code\teleop.c
000eda   d3ef     BRA       0x16ba                                                                                          
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000edc   dbe9     RCALL     0x16b0         void Service_Tower(void)                                                         C:\mort\Mort Code 08\code\teleop.c
000ede   0e0a     MOVLW     0xa                                                                                             
000ee0   ec92     CALL      0x1724,0x0                                                                                      
                                           {                                                                                C:\mort\Mort Code 08\code\teleop.c
                                               static int set_height = 0;       // Desired height variable                  C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                               static int old_encoder_count = 0;                                            C:\mort\Mort Code 08\code\teleop.c
000ee2   f00b                                  int encoder_count = 0;                                                       C:\mort\Mort Code 08\code\teleop.c
                                           	int encoder_error = 0;                                                          C:\mort\Mort Code 08\code\teleop.c
                                           	static int tower_auto_speed = 0;                                                C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                               static unsigned char hold_position_flag = 1;                                 C:\mort\Mort Code 08\code\teleop.c
                                               static int hold_position_encoder_count = 0;                                  C:\mort\Mort Code 08\code\teleop.c
                                               int hold_position_encoder_error = 0;                                         C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                           	int temp_tower = 0;              // temp value for tower speed                  C:\mort\Mort Code 08\code\teleop.c
000ee4   ecef     CALL      0x17de,0x0     	int temp_rollers = 0;             // temp value for roller speed                C:\mort\Mort Code 08\code\teleop.c
000ee6   f00b                                                                                                               
                                           	static int tower_integral = 0;                                                  C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                           	static unsigned char tower_okay_to_run = 1; // make sure joystick is at zero before running tower after running rollers C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000ee8   ec8c     CALL      0x4518,0x0         encoder_count = Get_Encoder_1_Count();                                       C:\mort\Mort Code 08\code\teleop.c
000eea   f022                                                                                                               
000eec   c030     MOVFF     0x30,0xfde                                                                                      
000eee   ffde                                                                                                               
000ef0   c031     MOVFF     0x31,0xfdd                                                                                      
000ef2   ffdd                                                                                                               
000ef4   0102     MOVLB     0x2                tower_at_target = FALSE;                                                     C:\mort\Mort Code 08\code\teleop.c
000ef6   6be1     CLRF      0xe1,0x1                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000ef8   51e0     MOVF      0xe0,0x0,0x1       if (height_flag == HEIGHT_FLAG_MANUAL)        // If we are in manual mode    C:\mort\Mort Code 08\code\teleop.c
000efa   e15e     BNZ       0xfb8                                                                                           
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
000efc   6bf5     CLRF      0xf5,0x1               tower_integral = 0; //in manual mode we dont want an integral            C:\mort\Mort Code 08\code\teleop.c
000efe   6bf6     CLRF      0xf6,0x1                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                   /** Handle Rollers **/                                                   C:\mort\Mort Code 08\code\teleop.c
                                                   // If the rollers do random junk in autonomous, its electrical's fault   C:\mort\Mort Code 08\code\teleop.c
000f00   0101     MOVLB     0x1                    if (TOWER_BUTTON_ROLLERS)                                                C:\mort\Mort Code 08\code\teleop.c
000f02   bbae     BTFSC     0xae,0x5,0x1                                                                                    
000f04   d00b     BRA       0xf1c                                                                                           
                                                   {                                                                        C:\mort\Mort Code 08\code\teleop.c
000f06   0e08     MOVLW     0x8                        temp_rollers = tower_joystick;                                       C:\mort\Mort Code 08\code\teleop.c
000f08   c2e8     MOVFF     0x2e8,0xfdb                                                                                     
000f0a   ffdb                                                                                                               
000f0c   0e09     MOVLW     0x9                                                                                             
000f0e   c2e9     MOVFF     0x2e9,0xfdb                                                                                     
000f10   ffdb                                                                                                               
000f12   ec8a     CALL      0x1914,0x0                 temp_tower = 0;                                                      C:\mort\Mort Code 08\code\teleop.c
000f14   f00c                                                                                                               
000f16   0102     MOVLB     0x2                        tower_okay_to_run = 0;                                               C:\mort\Mort Code 08\code\teleop.c
000f18   6bf7     CLRF      0xf7,0x1                                                                                        
                                                       //printf("rollers running \r\n");                                    C:\mort\Mort Code 08\code\teleop.c
                                                   }                                                                        C:\mort\Mort Code 08\code\teleop.c
000f1a   d00b     BRA       0xf32                  else                                                                     C:\mort\Mort Code 08\code\teleop.c
                                                   {                                                                        C:\mort\Mort Code 08\code\teleop.c
000f1c   ecef     CALL      0x17de,0x0                 temp_rollers = 0;                                                    C:\mort\Mort Code 08\code\teleop.c
000f1e   f00b                                                                                                               
0017de   0e08     MOVLW     0x8                                                                                             
0017e0   6adb     CLRF      0xdb,0x0                                                                                        
0017e2   0e09     MOVLW     0x9                                                                                             
0017e4   6adb     CLRF      0xdb,0x0                                                                                        
0017e6   0012     RETURN    0x0                                                                                             
000f20   0102     MOVLB     0x2                        if (tower_okay_to_run)                                               C:\mort\Mort Code 08\code\teleop.c
000f22   51f7     MOVF      0xf7,0x0,0x1                                                                                    
000f24   e006     BZ        0xf32                                                                                           
                                                       {                                                                    C:\mort\Mort Code 08\code\teleop.c
000f26   0e06     MOVLW     0x6                            temp_tower = tower_joystick;                                     C:\mort\Mort Code 08\code\teleop.c
000f28   c2e8     MOVFF     0x2e8,0xfdb                                                                                     
000f2a   ffdb                                                                                                               
000f2c   0e07     MOVLW     0x7                                                                                             
000f2e   c2e9     MOVFF     0x2e9,0xfdb                                                                                     
000f30   ffdb                                                                                                               
                                                       }                                                                    C:\mort\Mort Code 08\code\teleop.c
                                                   }                                                                        C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                   /* Hacking the rollers to stay on when the tower is going up */          C:\mort\Mort Code 08\code\teleop.c
                                                   /** Changed the speed controler to brake, probably not necessary         C:\mort\Mort Code 08\code\teleop.c
                                                   if (!TOWER_BUTTON_ROLLERS && temp_tower < 0)                             C:\mort\Mort Code 08\code\teleop.c
                                                   {                                                                        C:\mort\Mort Code 08\code\teleop.c
                                                       temp_rollers = -20;                                                  C:\mort\Mort Code 08\code\teleop.c
                                                   }                                                                        C:\mort\Mort Code 08\code\teleop.c
                                                   */                                                                       C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000f32   51e8     MOVF      0xe8,0x0,0x1           if (tower_joystick == 0)                                                 C:\mort\Mort Code 08\code\teleop.c
000f34   11e9     IORWF     0xe9,0x0,0x1                                                                                    
000f36   e102     BNZ       0xf3c                                                                                           
                                                   {                                                                        C:\mort\Mort Code 08\code\teleop.c
000f38   0e01     MOVLW     0x1                        tower_okay_to_run = 1;                                               C:\mort\Mort Code 08\code\teleop.c
000f3a   6ff7     MOVWF     0xf7,0x1                                                                                        
                                                   }                                                                        C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000f3c   51e8     MOVF      0xe8,0x0,0x1           if (tower_joystick == 0 || TOWER_BUTTON_ROLLERS)                         C:\mort\Mort Code 08\code\teleop.c
000f3e   11e9     IORWF     0xe9,0x0,0x1                                                                                    
000f40   e004     BZ        0xf4a                                                                                           
000f42   0101     MOVLB     0x1                                                                                             
000f44   51ae     MOVF      0xae,0x0,0x1                                                                                    
000f46   0b20     ANDLW     0x20                                                                                            
000f48   e15d     BNZ       0x1004                                                                                          
                                                   {                                                                        C:\mort\Mort Code 08\code\teleop.c
000f4a   0102     MOVLB     0x2                        if (hold_position_flag)                                              C:\mort\Mort Code 08\code\teleop.c
000f4c   51f2     MOVF      0xf2,0x0,0x1                                                                                    
000f4e   e005     BZ        0xf5a                                                                                           
                                                       {                                                                    C:\mort\Mort Code 08\code\teleop.c
000f50   cfde     MOVFF     0xfde,0x2f3                    hold_position_encoder_count = encoder_count;                     C:\mort\Mort Code 08\code\teleop.c
000f52   f2f3                                                                                                               
000f54   cfdd     MOVFF     0xfdd,0x2f4                                                                                     
000f56   f2f4                                                                                                               
000f58   6bf2     CLRF      0xf2,0x1                       hold_position_flag = 0;                                          C:\mort\Mort Code 08\code\teleop.c
                                                       }                                                                    C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000f5a   51f3     MOVF      0xf3,0x0,0x1               hold_position_encoder_error = encoder_count - hold_position_encoder_count; C:\mort\Mort Code 08\code\teleop.c
000f5c   5cde     SUBWF     0xde,0x0,0x0                                                                                    
000f5e   6e00     MOVWF     0x0,0x0                                                                                         
000f60   51f4     MOVF      0xf4,0x0,0x1                                                                                    
000f62   58dd     SUBWFB    0xdd,0x0,0x0                                                                                    
000f64   ecc6     CALL      0x178c,0x0                                                                                      
000f66   f00b                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000f68   ecd5     CALL      0x17aa,0x0                 if ((hold_position_encoder_error >= TOWER_HOLD_POSITION_DEADZONE) || (hold_position_encoder_error <= (-1 * TOWER_HOLD_POSITION_DEADZONE))) C:\mort\Mort Code 08\code\teleop.c
000f6a   f00b                                                                                                               
000f6c   90d8     BCF       0xd8,0x0,0x0                                                                                    
000f6e   5001     MOVF      0x1,0x0,0x0                                                                                     
000f70   e604     BN        0xf7a                                                                                           
000f72   0e01     MOVLW     0x1                                                                                             
000f74   5c00     SUBWF     0x0,0x0,0x0                                                                                     
000f76   0e00     MOVLW     0x0                                                                                             
000f78   5801     SUBWFB    0x1,0x0,0x0                                                                                     
000f7a   e20f     BC        0xf9a                                                                                           
000f7c   0e04     MOVLW     0x4                                                                                             
000f7e   cfdb     MOVFF     0xfdb,0x2                                                                                       
000f80   f002                                                                                                               
000f82   0e05     MOVLW     0x5                                                                                             
000f84   cfdb     MOVFF     0xfdb,0x3                                                                                       
000f86   f003                                                                                                               
000f88   3403     RLCF      0x3,0x0,0x0                                                                                     
000f8a   e201     BC        0xf8e                                                                                           
000f8c   d0c3     BRA       0x1114                                                                                          
000f8e   5002     MOVF      0x2,0x0,0x0                                                                                     
000f90   08ff     SUBLW     0xff                                                                                            
000f92   0eff     MOVLW     0xff                                                                                            
000f94   5403     SUBFWB    0x3,0x0,0x0                                                                                     
000f96   e201     BC        0xf9a                                                                                           
000f98   d0bd     BRA       0x1114                                                                                          
                                                       {                                                                    C:\mort\Mort Code 08\code\teleop.c
000f9a   0e04     MOVLW     0x4                            temp_tower = hold_position_encoder_error * TOWER_HOLD_POSITION_GAIN; C:\mort\Mort Code 08\code\teleop.c
000f9c   6e32     MOVWF     0x32,0x0                                                                                        
000f9e   6a33     CLRF      0x33,0x0                                                                                        
000fa0   cfdb     MOVFF     0xfdb,0x37                                                                                      
000fa2   f037                                                                                                               
000fa4   0e05     MOVLW     0x5                                                                                             
000fa6   ecf4     CALL      0x17e8,0x0                                                                                      
000fa8   f00b                                                                                                               
000faa   0e06     MOVLW     0x6                                                                                             
000fac   c030     MOVFF     0x30,0xfdb                                                                                      
000fae   ffdb                                                                                                               
000fb0   0e07     MOVLW     0x7                                                                                             
000fb2   c031     MOVFF     0x31,0xfdb                                                                                      
000fb4   ffdb                                                                                                               
                                                       }                                                                    C:\mort\Mort Code 08\code\teleop.c
                                                   }                                                                        C:\mort\Mort Code 08\code\teleop.c
000fb6   d0ae     BRA       0x1114                 else                                                                     C:\mort\Mort Code 08\code\teleop.c
                                                   {                                                                        C:\mort\Mort Code 08\code\teleop.c
                                                       hold_position_flag = 1;                                              C:\mort\Mort Code 08\code\teleop.c
                                                   }                                                                        C:\mort\Mort Code 08\code\teleop.c
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
000fb8   05e0     DECF      0xe0,0x0,0x1       else if (height_flag == HEIGHT_FLAG_LOW) // If we are trying to go to a low value C:\mort\Mort Code 08\code\teleop.c
000fba   e128     BNZ       0x100c                                                                                          
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
                                               /** Deccelerates the speed when tower is coming down **/                     C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
000fbc   0e00     MOVLW     0x0                    temp_tower = encoder_count/2.0;   //TOWER_DOWN_SPEED;                    C:\mort\Mort Code 08\code\teleop.c
000fbe   cfdf     MOVFF     0xfdf,0x32                                                                                      
000fc0   f032                                                                                                               
000fc2   0e01     MOVLW     0x1                                                                                             
000fc4   dbc0     RCALL     0x1746                                                                                          
000fc6   ec0c     CALL      0x1818,0x0                                                                                      
000fc8   f00c                                                                                                               
000fca   ec1e     CALL      0x303c,0x0                                                                                      
000fcc   f018                                                                                                               
000fce   dbf4     RCALL     0x17b8                                                                                          
001746   d923     RCALL     0x198e                                                                                          
001748   ef7c     GOTO      0x18f8                                                                                          
00174a   f00c                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                               /** Prevents speed from being reduced exponentially after a low or a high value **/ C:\mort\Mort Code 08\code\teleop.c
000fd0   db68     RCALL     0x16a2                 if (temp_tower < 50)//23                                                 C:\mort\Mort Code 08\code\teleop.c
000fd2   90d8     BCF       0xd8,0x0,0x0                                                                                    
000fd4   5001     MOVF      0x1,0x0,0x0                                                                                     
000fd6   e604     BN        0xfe0                                                                                           
000fd8   0e32     MOVLW     0x32                                                                                            
000fda   5c00     SUBWF     0x0,0x0,0x0                                                                                     
000fdc   0e00     MOVLW     0x0                                                                                             
000fde   5801     SUBWFB    0x1,0x0,0x0                                                                                     
000fe0   e202     BC        0xfe6                                                                                           
                                                   {                                                                        C:\mort\Mort Code 08\code\teleop.c
000fe2   0e32     MOVLW     0x32                       temp_tower = 50;//23                                                 C:\mort\Mort Code 08\code\teleop.c
                                                   }                                                                        C:\mort\Mort Code 08\code\teleop.c
000fe4   d009     BRA       0xff8                  else if (temp_tower > 80)                                                C:\mort\Mort Code 08\code\teleop.c
000fe6   db5d     RCALL     0x16a2                                                                                          
000fe8   3401     RLCF      0x1,0x0,0x0                                                                                     
000fea   e20c     BC        0x1004                                                                                          
000fec   5000     MOVF      0x0,0x0,0x0                                                                                     
000fee   0850     SUBLW     0x50                                                                                            
000ff0   0e00     MOVLW     0x0                                                                                             
000ff2   5401     SUBFWB    0x1,0x0,0x0                                                                                     
000ff4   e207     BC        0x1004                                                                                          
                                                   {                                                                        C:\mort\Mort Code 08\code\teleop.c
000ff6   0e50     MOVLW     0x50                       temp_tower = 80;                                                     C:\mort\Mort Code 08\code\teleop.c
000ff8   6ef3     MOVWF     0xf3,0x0                                                                                        
000ffa   0e06     MOVLW     0x6                                                                                             
000ffc   cff3     MOVFF     0xff3,0xfdb                                                                                     
000ffe   ffdb                                                                                                               
001000   0e07     MOVLW     0x7                                                                                             
001002   6adb     CLRF      0xdb,0x0                                                                                        
                                                   }                                                                        C:\mort\Mort Code 08\code\teleop.c
                                               /** arm holds current position **/                                           C:\mort\Mort Code 08\code\teleop.c
001004   0102     MOVLB     0x2                    hold_position_flag = 1;                                                  C:\mort\Mort Code 08\code\teleop.c
001006   0e01     MOVLW     0x1                                                                                             
001008   6ff2     MOVWF     0xf2,0x1                                                                                        
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
00100a   d084     BRA       0x1114             else //Same logic for going to Middle or High height                         C:\mort\Mort Code 08\code\teleop.c
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
00100c   51e0     MOVF      0xe0,0x0,0x1           if (height_flag == HEIGHT_COUNT_HIGH)                                    C:\mort\Mort Code 08\code\teleop.c
00100e   6e00     MOVWF     0x0,0x0                                                                                         
001010   6a01     CLRF      0x1,0x0                                                                                         
001012   0e3a     MOVLW     0x3a                                                                                            
001014   1800     XORWF     0x0,0x0,0x0                                                                                     
001016   e107     BNZ       0x1026                                                                                          
001018   0e02     MOVLW     0x2                                                                                             
00101a   1801     XORWF     0x1,0x0,0x0                                                                                     
00101c   e104     BNZ       0x1026                                                                                          
                                                   {                                                                        C:\mort\Mort Code 08\code\teleop.c
00101e   0e3a     MOVLW     0x3a                       set_height = HEIGHT_COUNT_HIGH;                                      C:\mort\Mort Code 08\code\teleop.c
001020   6fec     MOVWF     0xec,0x1                                                                                        
001022   0e02     MOVLW     0x2                                                                                             
001024   6fed     MOVWF     0xed,0x1                                                                                        
                                                   }                                                                        C:\mort\Mort Code 08\code\teleop.c
001026   0e02     MOVLW     0x2                    if (height_flag == HEIGHT_FLAG_MIDDLE)                                   C:\mort\Mort Code 08\code\teleop.c
001028   5de0     SUBWF     0xe0,0x0,0x1                                                                                    
00102a   e103     BNZ       0x1032                                                                                          
                                                   {                                                                        C:\mort\Mort Code 08\code\teleop.c
00102c   0e7a     MOVLW     0x7a                       set_height = HEIGHT_COUNT_MIDDLE;                                    C:\mort\Mort Code 08\code\teleop.c
00102e   6fec     MOVWF     0xec,0x1                                                                                        
001030   6bed     CLRF      0xed,0x1                                                                                        
                                                   }                                                                        C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                   // check how far arm is at target position hold the position             C:\mort\Mort Code 08\code\teleop.c
001032   51ec     MOVF      0xec,0x0,0x1           encoder_error = encoder_count - set_height;                              C:\mort\Mort Code 08\code\teleop.c
001034   5cde     SUBWF     0xde,0x0,0x0                                                                                    
001036   6e00     MOVWF     0x0,0x0                                                                                         
001038   51ed     MOVF      0xed,0x0,0x1                                                                                    
00103a   58dd     SUBWFB    0xdd,0x0,0x0                                                                                    
00103c   6e01     MOVWF     0x1,0x0                                                                                         
00103e   db94     RCALL     0x1768                                                                                          
001768   0e02     MOVLW     0x2                                                                                             
00176a   c000     MOVFF     0x0,0xfdb                                                                                       
00176c   ffdb                                                                                                               
00176e   0e03     MOVLW     0x3                                                                                             
001770   c001     MOVFF     0x1,0xfdb                                                                                       
001772   ffdb                                                                                                               
001774   0012     RETURN    0x0                                                                                             
001040   0e01     MOVLW     0x1                    hold_position_flag = 1;                                                  C:\mort\Mort Code 08\code\teleop.c
001042   6ff2     MOVWF     0xf2,0x1                                                                                        
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                   /** Ramping Tower Speeds **/                                             C:\mort\Mort Code 08\code\teleop.c
001044   db27     RCALL     0x1694                 if (encoder_error <= (-1 * TOWER_ENCODER_DEADZONE))                      C:\mort\Mort Code 08\code\teleop.c
001046   3401     RLCF      0x1,0x0,0x0                                                                                     
001048   e30a     BNC       0x105e                                                                                          
00104a   5000     MOVF      0x0,0x0,0x0                                                                                     
00104c   08fd     SUBLW     0xfd                                                                                            
00104e   0eff     MOVLW     0xff                                                                                            
001050   5401     SUBFWB    0x1,0x0,0x0                                                                                     
001052   e305     BNC       0x105e                                                                                          
                                                   {                                                                        C:\mort\Mort Code 08\code\teleop.c
                                                       // Going up                                                          C:\mort\Mort Code 08\code\teleop.c
001054   0e0f     MOVLW     0xf                        tower_auto_speed -= 15;                                              C:\mort\Mort Code 08\code\teleop.c
001056   5ff0     SUBWF     0xf0,0x1,0x1                                                                                    
001058   0e00     MOVLW     0x0                                                                                             
00105a   5bf1     SUBWFB    0xf1,0x1,0x1                                                                                    
                                                   }                                                                        C:\mort\Mort Code 08\code\teleop.c
00105c   d00f     BRA       0x107c                 else if (encoder_error >= TOWER_ENCODER_DEADZONE)                        C:\mort\Mort Code 08\code\teleop.c
00105e   db1a     RCALL     0x1694                                                                                          
001060   90d8     BCF       0xd8,0x0,0x0                                                                                    
001062   5001     MOVF      0x1,0x0,0x0                                                                                     
001064   e604     BN        0x106e                                                                                          
001066   0e03     MOVLW     0x3                                                                                             
001068   5c00     SUBWF     0x0,0x0,0x0                                                                                     
00106a   0e00     MOVLW     0x0                                                                                             
00106c   5801     SUBWFB    0x1,0x0,0x0                                                                                     
00106e   e306     BNC       0x107c                                                                                          
001694   0e02     MOVLW     0x2                                                                                             
001696   cfdb     MOVFF     0xfdb,0x0                                                                                       
001698   f000                                                                                                               
00169a   0e03     MOVLW     0x3                                                                                             
00169c   cfdb     MOVFF     0xfdb,0x1                                                                                       
00169e   f001                                                                                                               
0016a0   0012     RETURN    0x0                                                                                             
                                                   {                                                                        C:\mort\Mort Code 08\code\teleop.c
                                                       // Going down                                                        C:\mort\Mort Code 08\code\teleop.c
001070   0e02     MOVLW     0x2                        tower_auto_speed = encoder_error;                                    C:\mort\Mort Code 08\code\teleop.c
001072   cfdb     MOVFF     0xfdb,0x2f0                                                                                     
001074   f2f0                                                                                                               
001076   0e03     MOVLW     0x3                                                                                             
001078   cfdb     MOVFF     0xfdb,0x2f1                                                                                     
00107a   f2f1                                                                                                               
                                                   }                                                                        C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
00107c   0e7f     MOVLW     0x7f                   tower_auto_speed = Limit(tower_auto_speed, encoder_error, 127);          C:\mort\Mort Code 08\code\teleop.c
00107e   6ee6     MOVWF     0xe6,0x0                                                                                        
001080   6ae6     CLRF      0xe6,0x0                                                                                        
001082   ec3f     CALL      0x187e,0x0                                                                                      
001084   f00c                                                                                                               
001086   c2f0     MOVFF     0x2f0,0xfe6                                                                                     
001088   ffe6                                                                                                               
00108a   c2f1     MOVFF     0x2f1,0xfe6                                                                                     
00108c   ffe6                                                                                                               
00108e   dbb5     RCALL     0x17fa                                                                                          
001090   cff3     MOVFF     0xff3,0x2f0                                                                                     
001092   f2f0                                                                                                               
001094   cff4     MOVFF     0xff4,0x2f1                                                                                     
001096   f2f1                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                   /** If tower is at target set in manual mode **/                         C:\mort\Mort Code 08\code\teleop.c
001098   dbf2     RCALL     0x187e                 if (abs(encoder_error) <= TOWER_ENCODER_DEADZONE)                        C:\mort\Mort Code 08\code\teleop.c
00109a   da5d     RCALL     0x1556                                                                                          
00109c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00109e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0010a0   cff3     MOVFF     0xff3,0x0                                                                                       
0010a2   f000                                                                                                               
0010a4   cff4     MOVFF     0xff4,0x1                                                                                       
0010a6   f001                                                                                                               
0010a8   34f4     RLCF      0xf4,0x0,0x0                                                                                    
0010aa   e204     BC        0x10b4                                                                                          
0010ac   5000     MOVF      0x0,0x0,0x0                                                                                     
0010ae   0803     SUBLW     0x3                                                                                             
0010b0   0e00     MOVLW     0x0                                                                                             
0010b2   5401     SUBFWB    0x1,0x0,0x0                                                                                     
0010b4   e309     BNC       0x10c8                                                                                          
                                                   {                                                                        C:\mort\Mort Code 08\code\teleop.c
0010b6   0102     MOVLB     0x2                        tower_at_target = TRUE;                                              C:\mort\Mort Code 08\code\teleop.c
0010b8   0e01     MOVLW     0x1                                                                                             
0010ba   6fe1     MOVWF     0xe1,0x1                                                                                        
0010bc   6be0     CLRF      0xe0,0x1                   height_flag = HEIGHT_FLAG_MANUAL;                                    C:\mort\Mort Code 08\code\teleop.c
0010be   6bf0     CLRF      0xf0,0x1                   tower_auto_speed = 0;                                                C:\mort\Mort Code 08\code\teleop.c
0010c0   6bf1     CLRF      0xf1,0x1                                                                                        
0010c2   6bf5     CLRF      0xf5,0x1                   tower_integral = 0;                                                  C:\mort\Mort Code 08\code\teleop.c
0010c4   6bf6     CLRF      0xf6,0x1                                                                                        
                                                   }                                                                        C:\mort\Mort Code 08\code\teleop.c
                                                   /** Otherwise add to the integral and increase value**/                  C:\mort\Mort Code 08\code\teleop.c
0010c6   d00c     BRA       0x10e0                 else if (encoder_count == old_encoder_count)                             C:\mort\Mort Code 08\code\teleop.c
0010c8   db56     RCALL     0x1776                                                                                          
0010ca   0102     MOVLB     0x2                                                                                             
0010cc   51ee     MOVF      0xee,0x0,0x1                                                                                    
0010ce   1800     XORWF     0x0,0x0,0x0                                                                                     
0010d0   e107     BNZ       0x10e0                                                                                          
0010d2   51ef     MOVF      0xef,0x0,0x1                                                                                    
0010d4   1801     XORWF     0x1,0x0,0x0                                                                                     
0010d6   e104     BNZ       0x10e0                                                                                          
                                                   {                                                                        C:\mort\Mort Code 08\code\teleop.c
0010d8   0e0f     MOVLW     0xf                        tower_integral+=15;                                                  C:\mort\Mort Code 08\code\teleop.c
0010da   27f5     ADDWF     0xf5,0x1,0x1                                                                                    
0010dc   0e00     MOVLW     0x0                                                                                             
0010de   23f6     ADDWFC    0xf6,0x1,0x1                                                                                    
                                                   }                                                                        C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
0010e0   0e32     MOVLW     0x32                   tower_integral = Limit(tower_integral, -50, 50);                         C:\mort\Mort Code 08\code\teleop.c
0010e2   6ee6     MOVWF     0xe6,0x0                                                                                        
0010e4   6ae6     CLRF      0xe6,0x0                                                                                        
0010e6   0ece     MOVLW     0xce                                                                                            
0010e8   6ee6     MOVWF     0xe6,0x0                                                                                        
0010ea   68e6     SETF      0xe6,0x0                                                                                        
0010ec   c2f5     MOVFF     0x2f5,0xfe6                                                                                     
0010ee   ffe6                                                                                                               
0010f0   c2f6     MOVFF     0x2f6,0xfe6                                                                                     
0010f2   ffe6                                                                                                               
0010f4   db82     RCALL     0x17fa                                                                                          
0010f6   cff3     MOVFF     0xff3,0x2f5                                                                                     
0010f8   f2f5                                                                                                               
0010fa   cff4     MOVFF     0xff4,0x2f6                                                                                     
0010fc   f2f6                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
0010fe   0102     MOVLB     0x2                    tower_auto_speed -= tower_integral;                                      C:\mort\Mort Code 08\code\teleop.c
001100   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001102   5ff0     SUBWF     0xf0,0x1,0x1                                                                                    
001104   50f4     MOVF      0xf4,0x0,0x0                                                                                    
001106   5bf1     SUBWFB    0xf1,0x1,0x1                                                                                    
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
001108   0e06     MOVLW     0x6                    temp_tower = tower_auto_speed;                                           C:\mort\Mort Code 08\code\teleop.c
00110a   c2f0     MOVFF     0x2f0,0xfdb                                                                                     
00110c   ffdb                                                                                                               
00110e   0e07     MOVLW     0x7                                                                                             
001110   c2f1     MOVFF     0x2f1,0xfdb                                                                                     
001112   ffdb                                                                                                               
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                               /** Checks if Limit at Top has been reached and stops arm if true**/         C:\mort\Mort Code 08\code\teleop.c
                                               if (TOWER_LIMIT_ENABLED)                                                     C:\mort\Mort Code 08\code\teleop.c
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
001114   db30     RCALL     0x1776                 if ((encoder_count >= TOWER_ENCODER_LIMIT) && (temp_tower < 0)) // Less then zero means were going up C:\mort\Mort Code 08\code\teleop.c
001116   90d8     BCF       0xd8,0x0,0x0                                                                                    
001118   5001     MOVF      0x1,0x0,0x0                                                                                     
00111a   e604     BN        0x1124                                                                                          
00111c   0e3f     MOVLW     0x3f                                                                                            
00111e   5c00     SUBWF     0x0,0x0,0x0                                                                                     
001120   0e02     MOVLW     0x2                                                                                             
001122   5801     SUBWFB    0x1,0x0,0x0                                                                                     
001124   e30b     BNC       0x113c                                                                                          
001126   0e06     MOVLW     0x6                                                                                             
001128   cfdb     MOVFF     0xfdb,0x2                                                                                       
00112a   f002                                                                                                               
00112c   0e07     MOVLW     0x7                                                                                             
00112e   cfdb     MOVFF     0xfdb,0x3                                                                                       
001130   f003                                                                                                               
001132   0100     MOVLB     0x0                                                                                             
001134   0e80     MOVLW     0x80                                                                                            
001136   1403     ANDWF     0x3,0x0,0x0                                                                                     
001138   e001     BZ        0x113c                                                                                          
                                                   {                                                                        C:\mort\Mort Code 08\code\teleop.c
00113a   dbec     RCALL     0x1914                     temp_tower = 0;                                                      C:\mort\Mort Code 08\code\teleop.c
                                                   }                                                                        C:\mort\Mort Code 08\code\teleop.c
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                               /** Handle Bottom Limit Switch **/                                           C:\mort\Mort Code 08\code\teleop.c
00113c   b681     BTFSC     0x81,0x3,0x0       if (TOWER_LIMIT_DOWN)                                                        C:\mort\Mort Code 08\code\teleop.c
00113e   d00a     BRA       0x1154                                                                                          
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
                                           //        printf("Tower Down\r\n");                                              C:\mort\Mort Code 08\code\teleop.c
001140   ecb3     CALL      0x4566,0x0             Reset_Encoder_1_Count();                                                 C:\mort\Mort Code 08\code\teleop.c
001142   f022                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
001144   daae     RCALL     0x16a2                 if (temp_tower > 0)                                                      C:\mort\Mort Code 08\code\teleop.c
001146   3401     RLCF      0x1,0x0,0x0                                                                                     
001148   e205     BC        0x1154                                                                                          
00114a   db44     RCALL     0x17d4                                                                                          
00114c   e203     BC        0x1154                                                                                          
0016a2   0e06     MOVLW     0x6                                                                                             
0016a4   cfdb     MOVFF     0xfdb,0x0                                                                                       
0016a6   f000                                                                                                               
0016a8   0e07     MOVLW     0x7                                                                                             
0016aa   cfdb     MOVFF     0xfdb,0x1                                                                                       
0016ac   f001                                                                                                               
0016ae   0012     RETURN    0x0                                                                                             
                                                   {                                                                        C:\mort\Mort Code 08\code\teleop.c
00114e   dbe2     RCALL     0x1914                     temp_tower = 0;                                                      C:\mort\Mort Code 08\code\teleop.c
001150   0102     MOVLB     0x2                        height_flag = HEIGHT_FLAG_MANUAL;                                    C:\mort\Mort Code 08\code\teleop.c
001152   6be0     CLRF      0xe0,0x1                                                                                        
                                                   }                                                                        C:\mort\Mort Code 08\code\teleop.c
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                           /** Final Assignments to motors**/                                               C:\mort\Mort Code 08\code\teleop.c
001154   cfde     MOVFF     0xfde,0x2ee        old_encoder_count = encoder_count;                                           C:\mort\Mort Code 08\code\teleop.c
001156   f2ee                                                                                                               
001158   cfdd     MOVFF     0xfdd,0x2ef                                                                                     
00115a   f2ef                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
00115c   da8b     RCALL     0x1674         	temp_tower = Limit(temp_tower, -127, 127);                                      C:\mort\Mort Code 08\code\teleop.c
00115e   eccb     CALL      0x1996,0x0                                                                                      
001160   f00c                                                                                                               
00193c   0e06     MOVLW     0x6                                                                                             
00193e   cff3     MOVFF     0xff3,0xfdb                                                                                     
001940   ffdb                                                                                                               
001942   0e07     MOVLW     0x7                                                                                             
001944   cff4     MOVFF     0xff4,0xfdb                                                                                     
001946   ffdb                                                                                                               
001948   0012     RETURN    0x0                                                                                             
001996   df7f     RCALL     0x1896                                                                                          
001998   df30     RCALL     0x17fa                                                                                          
00199a   ef9e     GOTO      0x193c                                                                                          
00199c   f00c                                                                                                               
001162   da88     RCALL     0x1674         	temp_rollers = Limit(temp_rollers, -127, 127);                                  C:\mort\Mort Code 08\code\teleop.c
001164   0e08     MOVLW     0x8                                                                                             
001166   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001168   ffe6                                                                                                               
00116a   0e09     MOVLW     0x9                                                                                             
00116c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00116e   ffe6                                                                                                               
001170   db44     RCALL     0x17fa                                                                                          
001172   0e08     MOVLW     0x8                                                                                             
001174   cff3     MOVFF     0xff3,0xfdb                                                                                     
001176   ffdb                                                                                                               
001178   0e09     MOVLW     0x9                                                                                             
00117a   cff4     MOVFF     0xff4,0xfdb                                                                                     
00117c   ffdb                                                                                                               
001674   0e7f     MOVLW     0x7f                                                                                            
001676   6ee6     MOVWF     0xe6,0x0                                                                                        
001678   6ae6     CLRF      0xe6,0x0                                                                                        
00167a   0e81     MOVLW     0x81                                                                                            
00167c   6ee6     MOVWF     0xe6,0x0                                                                                        
00167e   68e6     SETF      0xe6,0x0                                                                                        
001680   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
00117e   da91     RCALL     0x16a2         	TOWER_MOTOR_1 = temp_tower + 127;                                               C:\mort\Mort Code 08\code\teleop.c
001180   0e7f     MOVLW     0x7f                                                                                            
001182   2400     ADDWF     0x0,0x0,0x0                                                                                     
001184   0101     MOVLB     0x1                                                                                             
001186   6f96     MOVWF     0x96,0x1                                                                                        
001188   6f94     MOVWF     0x94,0x1       	TOWER_MOTOR_2 = TOWER_MOTOR_1;                                                  C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
00118a   dbdf     RCALL     0x194a         	ROLLER_MOTOR = temp_rollers + 127;                                              C:\mort\Mort Code 08\code\teleop.c
00118c   0e7f     MOVLW     0x7f                                                                                            
00118e   2400     ADDWF     0x0,0x0,0x0                                                                                     
001190   6f95     MOVWF     0x95,0x1                                                                                        
00194a   0e08     MOVLW     0x8                                                                                             
00194c   cfdb     MOVFF     0xfdb,0x0                                                                                       
00194e   f000                                                                                                               
001950   0e09     MOVLW     0x9                                                                                             
001952   cfdb     MOVFF     0xfdb,0x1                                                                                       
001954   f001                                                                                                               
001956   0012     RETURN    0x0                                                                                             
                                           /***                           ***/                                              C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                           	//printf("integral: %d auto speed: %d\r\n", tower_integral, tower_auto_speed);  C:\mort\Mort Code 08\code\teleop.c
                                           	//printf("roller speed: %d tower_joystick: %d roller_motor: %d\r\n", temp_rollers, tower_joystick, ROLLER_MOTOR); C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                           //	printf("tower joystick: %d encoder: encoder_count: %d\r\n", tower_joystick, encoder_count); C:\mort\Mort Code 08\code\teleop.c
001192   0e0a     MOVLW     0xa            }                                                                                C:\mort\Mort Code 08\code\teleop.c
001194   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001196   e202     BC        0x119c                                                                                          
001198   6ae1     CLRF      0xe1,0x0                                                                                        
00119a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00119c   6ee1     MOVWF     0xe1,0x0                                                                                        
00119e   d28d     BRA       0x16ba                                                                                          
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
0011a0   da87     RCALL     0x16b0         void Service_Brakes(unsigned char onoff)                                         C:\mort\Mort Code 08\code\teleop.c
                                           {                                                                                C:\mort\Mort Code 08\code\teleop.c
0011a2   0efe     MOVLW     0xfe               BRAKE_1 = !onoff;                                                            C:\mort\Mort Code 08\code\teleop.c
0011a4   50db     MOVF      0xdb,0x0,0x0                                                                                    
0011a6   e002     BZ        0x11ac                                                                                          
0011a8   0e00     MOVLW     0x0                                                                                             
0011aa   d001     BRA       0x11ae                                                                                          
0011ac   0e01     MOVLW     0x1                                                                                             
0011ae   b0e8     BTFSC     0xe8,0x0,0x0                                                                                    
0011b0   808b     BSF       0x8b,0x0,0x0                                                                                    
0011b2   a0e8     BTFSS     0xe8,0x0,0x0                                                                                    
0011b4   908b     BCF       0x8b,0x0,0x0                                                                                    
0011b6   0efe     MOVLW     0xfe               BRAKE_2 = !onoff;                                                            C:\mort\Mort Code 08\code\teleop.c
0011b8   50db     MOVF      0xdb,0x0,0x0                                                                                    
0011ba   e002     BZ        0x11c0                                                                                          
0011bc   0e00     MOVLW     0x0                                                                                             
0011be   d001     BRA       0x11c2                                                                                          
0011c0   0e01     MOVLW     0x1                                                                                             
0011c2   b0e8     BTFSC     0xe8,0x0,0x0                                                                                    
0011c4   8891     BSF       0x91,0x4,0x0                                                                                    
0011c6   a0e8     BTFSS     0xe8,0x0,0x0                                                                                    
0011c8   9891     BCF       0x91,0x4,0x0                                                                                    
0011ca   0efe     MOVLW     0xfe               BRAKE_3 = !onoff;                                                            C:\mort\Mort Code 08\code\teleop.c
0011cc   50db     MOVF      0xdb,0x0,0x0                                                                                    
0011ce   e002     BZ        0x11d4                                                                                          
0011d0   0e00     MOVLW     0x0                                                                                             
0011d2   d001     BRA       0x11d6                                                                                          
0011d4   0e01     MOVLW     0x1                                                                                             
0011d6   b0e8     BTFSC     0xe8,0x0,0x0                                                                                    
0011d8   8a91     BSF       0x91,0x5,0x0                                                                                    
0011da   a0e8     BTFSS     0xe8,0x0,0x0                                                                                    
0011dc   9a91     BCF       0x91,0x5,0x0                                                                                    
0011de   0efe     MOVLW     0xfe               BRAKE_4 = !onoff;                                                            C:\mort\Mort Code 08\code\teleop.c
0011e0   50db     MOVF      0xdb,0x0,0x0                                                                                    
0011e2   e002     BZ        0x11e8                                                                                          
0011e4   0e00     MOVLW     0x0                                                                                             
0011e6   d001     BRA       0x11ea                                                                                          
0011e8   0e01     MOVLW     0x1                                                                                             
0011ea   b0e8     BTFSC     0xe8,0x0,0x0                                                                                    
0011ec   8c91     BSF       0x91,0x6,0x0                                                                                    
0011ee   a0e8     BTFSS     0xe8,0x0,0x0                                                                                    
0011f0   9c91     BCF       0x91,0x6,0x0                                                                                    
0011f2   d263     BRA       0x16ba         }                                                                                C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                           void Service_Leds(void)                                                          C:\mort\Mort Code 08\code\teleop.c
                                           {                                                                                C:\mort\Mort Code 08\code\teleop.c
0011f4   0102     MOVLB     0x2                switch (height_flag)                                                         C:\mort\Mort Code 08\code\teleop.c
0011f6   51e0     MOVF      0xe0,0x0,0x1                                                                                    
0011f8   e012     BZ        0x121e                                                                                          
0011fa   0a03     XORLW     0x3                                                                                             
0011fc   e00d     BZ        0x1218                                                                                          
0011fe   0a01     XORLW     0x1                                                                                             
001200   e007     BZ        0x1210                                                                                          
001202   0a03     XORLW     0x3                                                                                             
001204   e10c     BNZ       0x121e                                                                                          
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                   case HEIGHT_FLAG_LOW:                                                    C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
001206   0101     MOVLB     0x1                        HEIGHT_LED_HIGH = 0;                                                 C:\mort\Mort Code 08\code\teleop.c
001208   9f8c     BCF       0x8c,0x7,0x1                                                                                    
00120a   9b8c     BCF       0x8c,0x5,0x1               HEIGHT_LED_MIDDLE = 0;                                               C:\mort\Mort Code 08\code\teleop.c
00120c   898c     BSF       0x8c,0x4,0x1               HEIGHT_LED_LOW = 1;                                                  C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
00120e   0012     RETURN    0x0                        break;                                                               C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                   case HEIGHT_FLAG_MIDDLE:                                                 C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
001210   0101     MOVLB     0x1                        HEIGHT_LED_HIGH = 0;                                                 C:\mort\Mort Code 08\code\teleop.c
001212   9f8c     BCF       0x8c,0x7,0x1                                                                                    
001214   8b8c     BSF       0x8c,0x5,0x1               HEIGHT_LED_MIDDLE = 1;                                               C:\mort\Mort Code 08\code\teleop.c
                                                       HEIGHT_LED_LOW = 0;                                                  C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
001216   d006     BRA       0x1224                     break;                                                               C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                   case HEIGHT_FLAG_HIGH:                                                   C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
001218   0101     MOVLB     0x1                        HEIGHT_LED_HIGH = 1;                                                 C:\mort\Mort Code 08\code\teleop.c
00121a   8f8c     BSF       0x8c,0x7,0x1                                                                                    
                                                       HEIGHT_LED_MIDDLE = 0;                                               C:\mort\Mort Code 08\code\teleop.c
                                                       HEIGHT_LED_LOW = 0;                                                  C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
00121c   d002     BRA       0x1222                     break;                                                               C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                   case HEIGHT_FLAG_MANUAL:                                                 C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                       HEIGHT_LED_HIGH = 0;                                                 C:\mort\Mort Code 08\code\teleop.c
                                                       HEIGHT_LED_MIDDLE = 0;                                               C:\mort\Mort Code 08\code\teleop.c
                                                       HEIGHT_LED_LOW = 0;                                                  C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                       break;                                                               C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                   default:                                                                 C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
00121e   0101     MOVLB     0x1                        HEIGHT_LED_HIGH = 0;                                                 C:\mort\Mort Code 08\code\teleop.c
001220   9f8c     BCF       0x8c,0x7,0x1                                                                                    
001222   9b8c     BCF       0x8c,0x5,0x1               HEIGHT_LED_MIDDLE = 0;                                               C:\mort\Mort Code 08\code\teleop.c
001224   998c     BCF       0x8c,0x4,0x1               HEIGHT_LED_LOW = 0;                                                  C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                       break;                                                               C:\mort\Mort Code 08\code\teleop.c
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
001226   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
                                           /**                                                                              C:\mort\Mort Code 08\code\teleop.c
                                           Outputs :                                                                        C:\mort\Mort Code 08\code\teleop.c
                                               User_Byte{1-6}                                                               C:\mort\Mort Code 08\code\teleop.c
                                           **/                                                                              C:\mort\Mort Code 08\code\teleop.c
                                           void Service_Dashboard_Data( void )                                              C:\mort\Mort Code 08\code\teleop.c
                                           {                                                                                C:\mort\Mort Code 08\code\teleop.c
                                               static unsigned char p_num = 0;                                              C:\mort\Mort Code 08\code\teleop.c
001228   c2f8     MOVFF     0x2f8,0x18f        User_Byte2 = p_num;                                                          C:\mort\Mort Code 08\code\teleop.c
00122a   f18f                                                                                                               
00122c   0102     MOVLB     0x2                if (p_num == 0)                                                              C:\mort\Mort Code 08\code\teleop.c
00122e   51f8     MOVF      0xf8,0x0,0x1                                                                                    
001230   e125     BNZ       0x127c                                                                                          
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
001232   da47     RCALL     0x16c2                 User_Byte1 = Limit(drive_x+127, 0, 255);      // Joystick X              C:\mort\Mort Code 08\code\teleop.c
001234   6a01     CLRF      0x1,0x0                                                                                         
001236   25e2     ADDWF     0xe2,0x0,0x1                                                                                    
001238   6e00     MOVWF     0x0,0x0                                                                                         
00123a   51e3     MOVF      0xe3,0x0,0x1                                                                                    
00123c   da0c     RCALL     0x1656                                                                                          
00123e   cff3     MOVFF     0xff3,0x18e                                                                                     
001240   f18e                                                                                                               
001242   da3f     RCALL     0x16c2                 User_Byte3 = Limit(drive_y+127, 0, 255);      // Joystick Y              C:\mort\Mort Code 08\code\teleop.c
001244   0102     MOVLB     0x2                                                                                             
001246   6a01     CLRF      0x1,0x0                                                                                         
001248   25e4     ADDWF     0xe4,0x0,0x1                                                                                    
00124a   6e00     MOVWF     0x0,0x0                                                                                         
00124c   51e5     MOVF      0xe5,0x0,0x1                                                                                    
00124e   da03     RCALL     0x1656                                                                                          
001250   cff3     MOVFF     0xff3,0x1a4                                                                                     
001252   f1a4                                                                                                               
001254   da36     RCALL     0x16c2                 User_Byte4 = Limit(drive_z+127, 0, 255);   // Joystick Z                 C:\mort\Mort Code 08\code\teleop.c
001256   0102     MOVLB     0x2                                                                                             
001258   6a01     CLRF      0x1,0x0                                                                                         
00125a   25e6     ADDWF     0xe6,0x0,0x1                                                                                    
00125c   6e00     MOVWF     0x0,0x0                                                                                         
00125e   51e7     MOVF      0xe7,0x0,0x1                                                                                    
001260   d9fa     RCALL     0x1656                                                                                          
001262   cff3     MOVFF     0xff3,0x1a5                                                                                     
001264   f1a5                                                                                                               
001266   da2d     RCALL     0x16c2                 User_Byte5 = Limit(tower_joystick+127, 0, 255);      // Throttle         C:\mort\Mort Code 08\code\teleop.c
001268   0102     MOVLB     0x2                                                                                             
00126a   6a01     CLRF      0x1,0x0                                                                                         
00126c   25e8     ADDWF     0xe8,0x0,0x1                                                                                    
00126e   6e00     MOVWF     0x0,0x0                                                                                         
001270   51e9     MOVF      0xe9,0x0,0x1                                                                                    
001272   d9f1     RCALL     0x1656                                                                                          
001274   cff3     MOVFF     0xff3,0x1a6                                                                                     
001276   f1a6                                                                                                               
001656   2201     ADDWFC    0x1,0x1,0x0                                                                                     
001658   c000     MOVFF     0x0,0xfe6                                                                                       
00165a   ffe6                                                                                                               
00165c   c001     MOVFF     0x1,0xfe6                                                                                       
00165e   ffe6                                                                                                               
001660   df15     RCALL     0x148c                                                                                          
001662   6e02     MOVWF     0x2,0x0                                                                                         
001664   0e06     MOVLW     0x6                                                                                             
001666   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001668   5002     MOVF      0x2,0x0,0x0                                                                                     
00166a   0012     RETURN    0x0                                                                                             
0016c2   d8bf     RCALL     0x1842                                                                                          
0016c4   0e7f     MOVLW     0x7f                                                                                            
0016c6   0012     RETURN    0x0                                                                                             
001842   0eff     MOVLW     0xff                                                                                            
001844   6ee6     MOVWF     0xe6,0x0                                                                                        
001846   6ae6     CLRF      0xe6,0x0                                                                                        
001848   0e00     MOVLW     0x0                                                                                             
00184a   6ee6     MOVWF     0xe6,0x0                                                                                        
00184c   6ae6     CLRF      0xe6,0x0                                                                                        
00184e   0012     RETURN    0x0                                                                                             
001278   0101     MOVLB     0x1                    User_Byte6 = 0;//Get_Encoder_1_Count(); // Encoder 1                     C:\mort\Mort Code 08\code\teleop.c
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
00127a   d05b     BRA       0x1332             else if (p_num == 1)                                                         C:\mort\Mort Code 08\code\teleop.c
00127c   05f8     DECF      0xf8,0x0,0x1                                                                                    
00127e   e14d     BNZ       0x131a                                                                                          
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                   extern unsigned int range_left_front;                                    C:\mort\Mort Code 08\code\teleop.c
0012cc   51af     MOVF      0xaf,0x0,0x1           User_Byte1 = TOWER_BUTTON_HIGH<<8 | TOWER_BUTTON_MIDDLE<<7 | TOWER_BUTTON_LOW<<6 C:\mort\Mort Code 08\code\teleop.c
0012ce   0b40     ANDLW     0x40                                                                                            
0012d0   e001     BZ        0x12d4                                                                                          
0012d2   0e01     MOVLW     0x1                                                                                             
0012da   51af     MOVF      0xaf,0x0,0x1                                                                                    
0012dc   0b20     ANDLW     0x20                                                                                            
0012de   e001     BZ        0x12e2                                                                                          
0012e0   0e01     MOVLW     0x1                                                                                             
0012e2   0d80     MULLW     0x80                                                                                            
0012e4   cff3     MOVFF     0xff3,0x0                                                                                       
0012e6   f000                                                                                                               
0012e8   51af     MOVF      0xaf,0x0,0x1                                                                                    
0012ea   0b10     ANDLW     0x10                                                                                            
0012ec   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0012ee   10f3     IORWF     0xf3,0x0,0x0                                                                                    
00129e   518c     MOVF      0x8c,0x0,0x1                      | TOWER_BUTTON_ROLLERS<<5 | HEIGHT_LED_HIGH<<4 | HEIGHT_LED_MIDDLE<<3 C:\mort\Mort Code 08\code\teleop.c
0012a0   0b20     ANDLW     0x20                                                                                            
0012a2   e001     BZ        0x12a6                                                                                          
0012a4   0e01     MOVLW     0x1                                                                                             
0012ac   518c     MOVF      0x8c,0x0,0x1                                                                                    
0012ae   0b80     ANDLW     0x80                                                                                            
0012b0   e001     BZ        0x12b4                                                                                          
0012b2   0e01     MOVLW     0x1                                                                                             
0012b4   0d10     MULLW     0x10                                                                                            
0012b6   cff3     MOVFF     0xff3,0x3                                                                                       
0012b8   f003                                                                                                               
0012ba   0101     MOVLB     0x1                                                                                             
0012bc   51ae     MOVF      0xae,0x0,0x1                                                                                    
0012be   0b20     ANDLW     0x20                                                                                            
0012c0   0a20     XORLW     0x20                                                                                            
0012c2   e001     BZ        0x12c6                                                                                          
0012c4   0e01     MOVLW     0x1                                                                                             
0012c6   0d20     MULLW     0x20                                                                                            
0012c8   cff3     MOVFF     0xff3,0x2                                                                                       
0012ca   f002                                                                                                               
0012d4   0d40     MULLW     0x40                                                                                            
0012d6   cff3     MOVFF     0xff3,0x1                                                                                       
0012d8   f001                                                                                                               
0012f0   1001     IORWF     0x1,0x0,0x0                                                                                     
0012f2   1002     IORWF     0x2,0x0,0x0                                                                                     
0012f4   1003     IORWF     0x3,0x0,0x0                                                                                     
001280   5081     MOVF      0x81,0x0,0x0                      | HEIGHT_LED_LOW<<2 | TOWER_BALL_SWITCH<<1 | 0;               C:\mort\Mort Code 08\code\teleop.c
001282   0b10     ANDLW     0x10                                                                                            
001284   0a10     XORLW     0x10                                                                                            
001286   e001     BZ        0x128a                                                                                          
001288   0e01     MOVLW     0x1                                                                                             
00128a   24e8     ADDWF     0xe8,0x0,0x0                                                                                    
00128c   6e06     MOVWF     0x6,0x0                                                                                         
00128e   0101     MOVLB     0x1                                                                                             
001290   518c     MOVF      0x8c,0x0,0x1                                                                                    
001292   0b10     ANDLW     0x10                                                                                            
001294   e001     BZ        0x1298                                                                                          
001296   0e01     MOVLW     0x1                                                                                             
001298   0d04     MULLW     0x4                                                                                             
00129a   cff3     MOVFF     0xff3,0x5                                                                                       
00129c   f005                                                                                                               
0012a6   0d08     MULLW     0x8                                                                                             
0012a8   cff3     MOVFF     0xff3,0x4                                                                                       
0012aa   f004                                                                                                               
0012f6   1004     IORWF     0x4,0x0,0x0                                                                                     
0012f8   1005     IORWF     0x5,0x0,0x0                                                                                     
0012fa   1006     IORWF     0x6,0x0,0x0                                                                                     
0012fc   0101     MOVLB     0x1                                                                                             
0012fe   6f8e     MOVWF     0x8e,0x1                                                                                        
                                                 /*  User_Byte3 = HIBYTE(range_left_front);                                 C:\mort\Mort Code 08\code\teleop.c
                                                   User_Byte4 = LOBYTE(range_left_front);*/                                 C:\mort\Mort Code 08\code\teleop.c
001300   ec8c     CALL      0x4518,0x0             User_Byte5 = HIBYTE(Get_Encoder_1_Count());                              C:\mort\Mort Code 08\code\teleop.c
001302   f022                                                                                                               
001304   c031     MOVFF     0x31,0x0                                                                                        
001306   f000                                                                                                               
001308   6a01     CLRF      0x1,0x0                                                                                         
00130a   5031     MOVF      0x31,0x0,0x0                                                                                    
00130c   0101     MOVLB     0x1                                                                                             
00130e   6fa6     MOVWF     0xa6,0x1                                                                                        
001310   ec8c     CALL      0x4518,0x0             User_Byte6 = LOBYTE(Get_Encoder_1_Count());                              C:\mort\Mort Code 08\code\teleop.c
001312   f022                                                                                                               
001314   c030     MOVFF     0x30,0x1a7                                                                                      
001316   f1a7                                                                                                               
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
001318   d00d     BRA       0x1334             else if (p_num == 2)                                                         C:\mort\Mort Code 08\code\teleop.c
00131a   0e02     MOVLW     0x2                                                                                             
00131c   5df8     SUBWF     0xf8,0x0,0x1                                                                                    
00131e   e10a     BNZ       0x1334                                                                                          
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
001320   ece4     CALL      0x3bc8,0x0             User_Byte1 = Get_Auto_Mode();                                            C:\mort\Mort Code 08\code\teleop.c
001322   f01d                                                                                                               
001324   cff3     MOVFF     0xff3,0x18e                                                                                     
001326   f18e                                                                                                               
001328   c329     MOVFF     0x329,0x1a4            User_Byte3 = auto_state; // auto_state                                   C:\mort\Mort Code 08\code\teleop.c
00132a   f1a4                                                                                                               
00132c   0101     MOVLB     0x1                    User_Byte4 = 0;                                                          C:\mort\Mort Code 08\code\teleop.c
00132e   6ba5     CLRF      0xa5,0x1                                                                                        
001330   6ba6     CLRF      0xa6,0x1               User_Byte5 = 0;                                                          C:\mort\Mort Code 08\code\teleop.c
001332   6ba7     CLRF      0xa7,0x1               User_Byte6 = 0;                                                          C:\mort\Mort Code 08\code\teleop.c
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
001334   0e02     MOVLW     0x2                if(p_num < NUM_PACKETS - 1)                                                  C:\mort\Mort Code 08\code\teleop.c
001336   0102     MOVLB     0x2                                                                                             
001338   5df8     SUBWF     0xf8,0x0,0x1                                                                                    
00133a   e202     BC        0x1340                                                                                          
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
00133c   2bf8     INCF      0xf8,0x1,0x1           p_num ++;                                                                C:\mort\Mort Code 08\code\teleop.c
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
00133e   0012     RETURN    0x0                else                                                                         C:\mort\Mort Code 08\code\teleop.c
                                               {                                                                            C:\mort\Mort Code 08\code\teleop.c
001340   6bf8     CLRF      0xf8,0x1               p_num = 0;                                                               C:\mort\Mort Code 08\code\teleop.c
                                               }                                                                            C:\mort\Mort Code 08\code\teleop.c
001342   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
001344   d9b5     RCALL     0x16b0         int Deadband(int value, int band)                                                C:\mort\Mort Code 08\code\teleop.c
                                           {                                                                                C:\mort\Mort Code 08\code\teleop.c
001346   0efd     MOVLW     0xfd           	if (value <= (band/2.0) && value >= (-band/2.0))                                C:\mort\Mort Code 08\code\teleop.c
001348   cfdb     MOVFF     0xfdb,0x32                                                                                      
00134a   f032                                                                                                               
00134c   0efe     MOVLW     0xfe                                                                                            
00134e   d9fb     RCALL     0x1746                                                                                          
001350   da90     RCALL     0x1872                                                                                          
001352   c031     MOVFF     0x31,0x8                                                                                        
001354   f008                                                                                                               
001356   c032     MOVFF     0x32,0x9                                                                                        
001358   f009                                                                                                               
00135a   c033     MOVFF     0x33,0xa                                                                                        
00135c   f00a                                                                                                               
00135e   c034     MOVFF     0x34,0xb                                                                                        
001360   f00b                                                                                                               
001362   da5a     RCALL     0x1818                                                                                          
001364   d946     RCALL     0x15f2                                                                                          
001366   ec4d     CALL      0x309a,0x0                                                                                      
001368   f018                                                                                                               
00136a   0a01     XORLW     0x1                                                                                             
00136c   e02c     BZ        0x13c6                                                                                          
00136e   dab5     RCALL     0x18da                                                                                          
001370   daa2     RCALL     0x18b6                                                                                          
001372   0efb     MOVLW     0xfb                                                                                            
001374   cfdb     MOVFF     0xfdb,0x18                                                                                      
001376   f018                                                                                                               
001378   0efc     MOVLW     0xfc                                                                                            
00137a   cfdb     MOVFF     0xfdb,0x19                                                                                      
00137c   f019                                                                                                               
00137e   6c18     NEGF      0x18,0x0                                                                                        
001380   1e19     COMF      0x19,0x1,0x0                                                                                    
001382   0e00     MOVLW     0x0                                                                                             
001384   2219     ADDWFC    0x19,0x1,0x0                                                                                    
001386   c018     MOVFF     0x18,0x32                                                                                       
001388   f032                                                                                                               
00138a   c019     MOVFF     0x19,0x33                                                                                       
00138c   f033                                                                                                               
00138e   ec53     CALL      0x2ca6,0x0                                                                                      
001390   f016                                                                                                               
001392   c031     MOVFF     0x31,0x14                                                                                       
001394   f014                                                                                                               
001396   c032     MOVFF     0x32,0x15                                                                                       
001398   f015                                                                                                               
00139a   c033     MOVFF     0x33,0x16                                                                                       
00139c   f016                                                                                                               
00139e   c034     MOVFF     0x34,0x17                                                                                       
0013a0   f017                                                                                                               
0013a2   da3a     RCALL     0x1818                                                                                          
0013a4   da91     RCALL     0x18c8                                                                                          
0013a6   da2f     RCALL     0x1806                                                                                          
0013a8   c00c     MOVFF     0xc,0x31                                                                                        
0013aa   f031                                                                                                               
0013ac   c00d     MOVFF     0xd,0x32                                                                                        
0013ae   f032                                                                                                               
0013b0   c00e     MOVFF     0xe,0x33                                                                                        
0013b2   f033                                                                                                               
0013b4   c00f     MOVFF     0xf,0x34                                                                                        
0013b6   f034                                                                                                               
0013b8   ec56     CALL      0x30ac,0x0                                                                                      
0013ba   f018                                                                                                               
0013bc   0a01     XORLW     0x1                                                                                             
0013be   e003     BZ        0x13c6                                                                                          
0018b6   c031     MOVFF     0x31,0xc                                                                                        
0018b8   f00c                                                                                                               
0018ba   c032     MOVFF     0x32,0xd                                                                                        
0018bc   f00d                                                                                                               
0018be   c033     MOVFF     0x33,0xe                                                                                        
0018c0   f00e                                                                                                               
0018c2   c034     MOVFF     0x34,0xf                                                                                        
0018c4   f00f                                                                                                               
0018c6   0012     RETURN    0x0                                                                                             
0018c8   c031     MOVFF     0x31,0x10                                                                                       
0018ca   f010                                                                                                               
0018cc   c032     MOVFF     0x32,0x11                                                                                       
0018ce   f011                                                                                                               
0018d0   c033     MOVFF     0x33,0x12                                                                                       
0018d2   f012                                                                                                               
0018d4   c034     MOVFF     0x34,0x13                                                                                       
0018d6   f013                                                                                                               
0018d8   0012     RETURN    0x0                                                                                             
0018da   0efd     MOVLW     0xfd                                                                                            
0018dc   cfdb     MOVFF     0xfdb,0x32                                                                                      
0018de   f032                                                                                                               
0018e0   0efe     MOVLW     0xfe                                                                                            
0018e2   efc7     GOTO      0x198e                                                                                          
0018e4   f00c                                                                                                               
00198e   cfdb     MOVFF     0xfdb,0x33                                                                                      
001990   f033                                                                                                               
001992   ef53     GOTO      0x2ca6                                                                                          
001994   f016                                                                                                               
                                           	{                                                                               C:\mort\Mort Code 08\code\teleop.c
0013c0   6af3     CLRF      0xf3,0x0       		return 0;                                                                      C:\mort\Mort Code 08\code\teleop.c
0013c2   6af4     CLRF      0xf4,0x0                                                                                        
0013c4   d062     BRA       0x148a                                                                                          
                                           	}                                                                               C:\mort\Mort Code 08\code\teleop.c
0013c6   d952     RCALL     0x166c         	else if (value > 0)                                                             C:\mort\Mort Code 08\code\teleop.c
0013c8   3401     RLCF      0x1,0x0,0x0                                                                                     
0013ca   e206     BC        0x13d8                                                                                          
0013cc   da03     RCALL     0x17d4                                                                                          
0013ce   e204     BC        0x13d8                                                                                          
0017d4   5000     MOVF      0x0,0x0,0x0                                                                                     
0017d6   0800     SUBLW     0x0                                                                                             
0017d8   0e00     MOVLW     0x0                                                                                             
0017da   5401     SUBFWB    0x1,0x0,0x0                                                                                     
0017dc   0012     RETURN    0x0                                                                                             
                                           	{                                                                               C:\mort\Mort Code 08\code\teleop.c
0013d0   d913     RCALL     0x15f8         		return (127* (value - band/2.0) /(127 - band/2.0));                            C:\mort\Mort Code 08\code\teleop.c
0013d2   ec66     CALL      0x2ccc,0x0                                                                                      
0013d4   f016                                                                                                               
0013d6   d003     BRA       0x13de                                                                                          
0015f8   6a06     CLRF      0x6,0x0                                                                                         
0015fa   6a07     CLRF      0x7,0x0                                                                                         
0015fc   0efe     MOVLW     0xfe                                                                                            
0015fe   6e08     MOVWF     0x8,0x0                                                                                         
001600   0e42     MOVLW     0x42                                                                                            
001602   6e09     MOVWF     0x9,0x0                                                                                         
001604   d96a     RCALL     0x18da                                                                                          
001606   c031     MOVFF     0x31,0xe                                                                                        
001608   f00e                                                                                                               
00160a   c032     MOVFF     0x32,0xf                                                                                        
00160c   f00f                                                                                                               
00160e   c033     MOVFF     0x33,0x10                                                                                       
001610   f010                                                                                                               
001612   c034     MOVFF     0x34,0x11                                                                                       
001614   f011                                                                                                               
001616   d92d     RCALL     0x1872                                                                                          
001618   c031     MOVFF     0x31,0x16                                                                                       
00161a   f016                                                                                                               
00161c   c032     MOVFF     0x32,0x17                                                                                       
00161e   f017                                                                                                               
001620   c033     MOVFF     0x33,0x18                                                                                       
001622   f018                                                                                                               
001624   c034     MOVFF     0x34,0x19                                                                                       
001626   f019                                                                                                               
001628   d8f7     RCALL     0x1818                                                                                          
00162a   c031     MOVFF     0x31,0x12                                                                                       
00162c   f012                                                                                                               
00162e   c032     MOVFF     0x32,0x13                                                                                       
001630   f013                                                                                                               
001632   c033     MOVFF     0x33,0x14                                                                                       
001634   f014                                                                                                               
001636   c034     MOVFF     0x34,0x15                                                                                       
001638   f015                                                                                                               
00163a   d8e5     RCALL     0x1806                                                                                          
00163c   c00e     MOVFF     0xe,0x31                                                                                        
00163e   f031                                                                                                               
001640   c00f     MOVFF     0xf,0x32                                                                                        
001642   f032                                                                                                               
001644   c010     MOVFF     0x10,0x33                                                                                       
001646   f033                                                                                                               
001648   c011     MOVFF     0x11,0x34                                                                                       
00164a   f034                                                                                                               
00164c   0012     RETURN    0x0                                                                                             
001806   c031     MOVFF     0x31,0x36                                                                                       
001808   f036                                                                                                               
00180a   c032     MOVFF     0x32,0x37                                                                                       
00180c   f037                                                                                                               
00180e   c033     MOVFF     0x33,0x38                                                                                       
001810   f038                                                                                                               
001812   c034     MOVFF     0x34,0x39                                                                                       
001814   f039                                                                                                               
001816   0012     RETURN    0x0                                                                                             
001818   6a36     CLRF      0x36,0x0                                                                                        
00181a   6a37     CLRF      0x37,0x0                                                                                        
00181c   6a38     CLRF      0x38,0x0                                                                                        
00181e   0e40     MOVLW     0x40                                                                                            
001820   6e39     MOVWF     0x39,0x0                                                                                        
001822   effd     GOTO      0x2dfa                                                                                          
001824   f016                                                                                                               
001872   0efb     MOVLW     0xfb                                                                                            
001874   cfdb     MOVFF     0xfdb,0x32                                                                                      
001876   f032                                                                                                               
001878   0efc     MOVLW     0xfc                                                                                            
00187a   efc7     GOTO      0x198e                                                                                          
00187c   f00c                                                                                                               
                                           	}                                                                               C:\mort\Mort Code 08\code\teleop.c
                                           	else                                                                            C:\mort\Mort Code 08\code\teleop.c
                                           	{                                                                               C:\mort\Mort Code 08\code\teleop.c
0013d8   d90f     RCALL     0x15f8         		return (127* (value + band/2.0) /(127 - band/2.0));                            C:\mort\Mort Code 08\code\teleop.c
0013da   ec67     CALL      0x2cce,0x0                                                                                      
0013dc   f016                                                                                                               
0013de   c031     MOVFF     0x31,0xa                                                                                        
0013e0   f00a                                                                                                               
0013e2   c032     MOVFF     0x32,0xb                                                                                        
0013e4   f00b                                                                                                               
0013e6   c033     MOVFF     0x33,0xc                                                                                        
0013e8   f00c                                                                                                               
0013ea   c034     MOVFF     0x34,0xd                                                                                        
0013ec   f00d                                                                                                               
0013ee   da0b     RCALL     0x1806                                                                                          
0013f0   c006     MOVFF     0x6,0x31                                                                                        
0013f2   f031                                                                                                               
0013f4   c007     MOVFF     0x7,0x32                                                                                        
0013f6   f032                                                                                                               
0013f8   c008     MOVFF     0x8,0x33                                                                                        
0013fa   f033                                                                                                               
0013fc   c009     MOVFF     0x9,0x34                                                                                        
0013fe   f034                                                                                                               
001400   ec50     CALL      0x2ea0,0x0                                                                                      
001402   f017                                                                                                               
001404   c031     MOVFF     0x31,0x2                                                                                        
001406   f002                                                                                                               
001408   c032     MOVFF     0x32,0x3                                                                                        
00140a   f003                                                                                                               
00140c   c033     MOVFF     0x33,0x4                                                                                        
00140e   f004                                                                                                               
001410   c034     MOVFF     0x34,0x5                                                                                        
001412   f005                                                                                                               
001414   6a1e     CLRF      0x1e,0x0                                                                                        
001416   6a1f     CLRF      0x1f,0x0                                                                                        
001418   0efe     MOVLW     0xfe                                                                                            
00141a   6e20     MOVWF     0x20,0x0                                                                                        
00141c   0e42     MOVLW     0x42                                                                                            
00141e   6e21     MOVWF     0x21,0x0                                                                                        
001420   da28     RCALL     0x1872                                                                                          
001422   c031     MOVFF     0x31,0x26                                                                                       
001424   f026                                                                                                               
001426   c032     MOVFF     0x32,0x27                                                                                       
001428   f027                                                                                                               
00142a   c033     MOVFF     0x33,0x28                                                                                       
00142c   f028                                                                                                               
00142e   c034     MOVFF     0x34,0x29                                                                                       
001430   f029                                                                                                               
001432   d9f2     RCALL     0x1818                                                                                          
001434   c031     MOVFF     0x31,0x22                                                                                       
001436   f022                                                                                                               
001438   c032     MOVFF     0x32,0x23                                                                                       
00143a   f023                                                                                                               
00143c   c033     MOVFF     0x33,0x24                                                                                       
00143e   f024                                                                                                               
001440   c034     MOVFF     0x34,0x25                                                                                       
001442   f025                                                                                                               
001444   d9e0     RCALL     0x1806                                                                                          
001446   c01e     MOVFF     0x1e,0x31                                                                                       
001448   f031                                                                                                               
00144a   c01f     MOVFF     0x1f,0x32                                                                                       
00144c   f032                                                                                                               
00144e   c020     MOVFF     0x20,0x33                                                                                       
001450   f033                                                                                                               
001452   c021     MOVFF     0x21,0x34                                                                                       
001454   f034                                                                                                               
001456   ec66     CALL      0x2ccc,0x0                                                                                      
001458   f016                                                                                                               
00145a   c031     MOVFF     0x31,0x1a                                                                                       
00145c   f01a                                                                                                               
00145e   c032     MOVFF     0x32,0x1b                                                                                       
001460   f01b                                                                                                               
001462   c033     MOVFF     0x33,0x1c                                                                                       
001464   f01c                                                                                                               
001466   c034     MOVFF     0x34,0x1d                                                                                       
001468   f01d                                                                                                               
00146a   d9cd     RCALL     0x1806                                                                                          
00146c   c002     MOVFF     0x2,0x31                                                                                        
00146e   f031                                                                                                               
001470   c003     MOVFF     0x3,0x32                                                                                        
001472   f032                                                                                                               
001474   c004     MOVFF     0x4,0x33                                                                                        
001476   f033                                                                                                               
001478   c005     MOVFF     0x5,0x34                                                                                        
00147a   f034                                                                                                               
00147c   ecfd     CALL      0x2dfa,0x0                                                                                      
00147e   f016                                                                                                               
001480   da8e     RCALL     0x199e                                                                                          
001482   c032     MOVFF     0x32,0xff3                                                                                      
001484   fff3                                                                                                               
001486   c033     MOVFF     0x33,0xff4                                                                                      
001488   fff4                                                                                                               
00199e   ec1e     CALL      0x303c,0x0                                                                                      
0019a0   f018                                                                                                               
0019a2   c032     MOVFF     0x32,0x0                                                                                        
0019a4   f000                                                                                                               
0019a6   c033     MOVFF     0x33,0x1                                                                                        
0019a8   f001                                                                                                               
0019aa   0012     RETURN    0x0                                                                                             
                                           	}                                                                               C:\mort\Mort Code 08\code\teleop.c
00148a   d117     BRA       0x16ba         }                                                                                C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
00148c   d911     RCALL     0x16b0         int Limit (int num, int low, int high)                                           C:\mort\Mort Code 08\code\teleop.c
                                           {                                                                                C:\mort\Mort Code 08\code\teleop.c
00148e   d8ee     RCALL     0x166c         	if (num > high)                                                                 C:\mort\Mort Code 08\code\teleop.c
001490   0ef9     MOVLW     0xf9                                                                                            
001492   cfdb     MOVFF     0xfdb,0x2                                                                                       
001494   f002                                                                                                               
001496   0efa     MOVLW     0xfa                                                                                            
001498   cfdb     MOVFF     0xfdb,0x3                                                                                       
00149a   f003                                                                                                               
00149c   5003     MOVF      0x3,0x0,0x0                                                                                     
00149e   1801     XORWF     0x1,0x0,0x0                                                                                     
0014a0   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
0014a2   d002     BRA       0x14a8                                                                                          
0014a4   3401     RLCF      0x1,0x0,0x0                                                                                     
0014a6   d004     BRA       0x14b0                                                                                          
0014a8   5000     MOVF      0x0,0x0,0x0                                                                                     
0014aa   5c02     SUBWF     0x2,0x0,0x0                                                                                     
0014ac   5001     MOVF      0x1,0x0,0x0                                                                                     
0014ae   5803     SUBWFB    0x3,0x0,0x0                                                                                     
0014b0   e205     BC        0x14bc                                                                                          
0014b2   0ef9     MOVLW     0xf9           		return high;                                                                   C:\mort\Mort Code 08\code\teleop.c
0014b4   cfdb     MOVFF     0xfdb,0x0                                                                                       
0014b6   f000                                                                                                               
0014b8   0efa     MOVLW     0xfa                                                                                            
0014ba   d010     BRA       0x14dc                                                                                          
0014bc   d8d7     RCALL     0x166c         	else if (num < low)                                                             C:\mort\Mort Code 08\code\teleop.c
0014be   d983     RCALL     0x17c6                                                                                          
0014c0   5001     MOVF      0x1,0x0,0x0                                                                                     
0014c2   1803     XORWF     0x3,0x0,0x0                                                                                     
0014c4   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
0014c6   d002     BRA       0x14cc                                                                                          
0014c8   3403     RLCF      0x3,0x0,0x0                                                                                     
0014ca   d004     BRA       0x14d4                                                                                          
0014cc   5002     MOVF      0x2,0x0,0x0                                                                                     
0014ce   5c00     SUBWF     0x0,0x0,0x0                                                                                     
0014d0   5003     MOVF      0x3,0x0,0x0                                                                                     
0014d2   5801     SUBWFB    0x1,0x0,0x0                                                                                     
0014d4   e202     BC        0x14da                                                                                          
0017c6   0efb     MOVLW     0xfb                                                                                            
0017c8   cfdb     MOVFF     0xfdb,0x2                                                                                       
0017ca   f002                                                                                                               
0017cc   0efc     MOVLW     0xfc                                                                                            
0017ce   cfdb     MOVFF     0xfdb,0x3                                                                                       
0017d0   f003                                                                                                               
0017d2   0012     RETURN    0x0                                                                                             
0014d6   d98c     RCALL     0x17f0         		return low;                                                                    C:\mort\Mort Code 08\code\teleop.c
0014d8   d001     BRA       0x14dc                                                                                          
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
0014da   da54     RCALL     0x1984         	return num;                                                                     C:\mort\Mort Code 08\code\teleop.c
0014dc   cfdb     MOVFF     0xfdb,0x1                                                                                       
0014de   f001                                                                                                               
0014e0   d214     BRA       0x190a                                                                                          
                                           }                                                                                C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
0014e2   d8e6     RCALL     0x16b0         int absmax(int n1,int n2)                                                        C:\mort\Mort Code 08\code\teleop.c
                                           {                                                                                C:\mort\Mort Code 08\code\teleop.c
0014e4   d8c3     RCALL     0x166c             if (n1 < 0)                                                                  C:\mort\Mort Code 08\code\teleop.c
0014e6   0100     MOVLB     0x0                                                                                             
0014e8   0e80     MOVLW     0x80                                                                                            
0014ea   1401     ANDWF     0x1,0x0,0x0                                                                                     
0014ec   e00d     BZ        0x1508                                                                                          
0014ee   6832     SETF      0x32,0x0               n1 = -1 * n1;                                                            C:\mort\Mort Code 08\code\teleop.c
0014f0   6833     SETF      0x33,0x0                                                                                        
0014f2   0efd     MOVLW     0xfd                                                                                            
0014f4   cfdb     MOVFF     0xfdb,0x37                                                                                      
0014f6   f037                                                                                                               
0014f8   0efe     MOVLW     0xfe                                                                                            
0014fa   d976     RCALL     0x17e8                                                                                          
0014fc   0efd     MOVLW     0xfd                                                                                            
0014fe   c030     MOVFF     0x30,0xfdb                                                                                      
001500   ffdb                                                                                                               
001502   0efe     MOVLW     0xfe                                                                                            
001504   c031     MOVFF     0x31,0xfdb                                                                                      
001506   ffdb                                                                                                               
001508   d973     RCALL     0x17f0             if( n2 < 0)                                                                  C:\mort\Mort Code 08\code\teleop.c
00150a   cfdb     MOVFF     0xfdb,0x1                                                                                       
00150c   f001                                                                                                               
00150e   0100     MOVLB     0x0                                                                                             
001510   0e80     MOVLW     0x80                                                                                            
001512   1401     ANDWF     0x1,0x0,0x0                                                                                     
001514   e00d     BZ        0x1530                                                                                          
001516   6832     SETF      0x32,0x0               n2 = -1 * n2;                                                            C:\mort\Mort Code 08\code\teleop.c
001518   6833     SETF      0x33,0x0                                                                                        
00151a   0efb     MOVLW     0xfb                                                                                            
00151c   cfdb     MOVFF     0xfdb,0x37                                                                                      
00151e   f037                                                                                                               
001520   0efc     MOVLW     0xfc                                                                                            
001522   d962     RCALL     0x17e8                                                                                          
001524   0efb     MOVLW     0xfb                                                                                            
001526   c030     MOVFF     0x30,0xfdb                                                                                      
001528   ffdb                                                                                                               
00152a   0efc     MOVLW     0xfc                                                                                            
00152c   c031     MOVFF     0x31,0xfdb                                                                                      
00152e   ffdb                                                                                                               
0017e8   cfdb     MOVFF     0xfdb,0x38                                                                                      
0017ea   f038                                                                                                               
0017ec   eff1     GOTO      0x2fe2                                                                                          
0017ee   f017                                                                                                               
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
001530   d89d     RCALL     0x166c         	if(n1 > n2)                                                                     C:\mort\Mort Code 08\code\teleop.c
001532   d949     RCALL     0x17c6                                                                                          
001534   5003     MOVF      0x3,0x0,0x0                                                                                     
001536   1801     XORWF     0x1,0x0,0x0                                                                                     
001538   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
00153a   d002     BRA       0x1540                                                                                          
00153c   3401     RLCF      0x1,0x0,0x0                                                                                     
00153e   d004     BRA       0x1548                                                                                          
001540   5000     MOVF      0x0,0x0,0x0                                                                                     
001542   5c02     SUBWF     0x2,0x0,0x0                                                                                     
001544   5001     MOVF      0x1,0x0,0x0                                                                                     
001546   5803     SUBWFB    0x3,0x0,0x0                                                                                     
001548   e202     BC        0x154e                                                                                          
00154a   da1c     RCALL     0x1984         		return n1;                                                                     C:\mort\Mort Code 08\code\teleop.c
00154c   d001     BRA       0x1550                                                                                          
                                           	else                                                                            C:\mort\Mort Code 08\code\teleop.c
00154e   d950     RCALL     0x17f0         		return n2;                                                                     C:\mort\Mort Code 08\code\teleop.c
001550   cfdb     MOVFF     0xfdb,0x1                                                                                       
001552   f001                                                                                                               
001554   d1da     BRA       0x190a                                                                                          
0017f0   0efb     MOVLW     0xfb                                                                                            
0017f2   cfdb     MOVFF     0xfdb,0x0                                                                                       
0017f4   f000                                                                                                               
0017f6   0efc     MOVLW     0xfc                                                                                            
0017f8   0012     RETURN    0x0                                                                                             
                                           }                                                                                C:\mort\Mort Code 08\code\teleop.c
                                                                                                                            C:\mort\Mort Code 08\code\teleop.c
001556   d8ac     RCALL     0x16b0         int abs(int n)                                                                   C:\mort\Mort Code 08\code\teleop.c
0016b0   cfd9     MOVFF     0xfd9,0xfe6                                                                                     
0016b2   ffe6                                                                                                               
0016b4   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0016b6   ffd9                                                                                                               
0016b8   0012     RETURN    0x0                                                                                             
                                           {                                                                                C:\mort\Mort Code 08\code\teleop.c
001558   0efe     MOVLW     0xfe               if (n < 0)                                                                   C:\mort\Mort Code 08\code\teleop.c
00155a   cfdb     MOVFF     0xfdb,0x1                                                                                       
00155c   f001                                                                                                               
00155e   0e80     MOVLW     0x80                                                                                            
001560   1401     ANDWF     0x1,0x0,0x0                                                                                     
001562   e006     BZ        0x1570                                                                                          
001564   d883     RCALL     0x166c                 return -n;                                                               C:\mort\Mort Code 08\code\teleop.c
001566   6c00     NEGF      0x0,0x0                                                                                         
001568   1e01     COMF      0x1,0x1,0x0                                                                                     
00156a   0e00     MOVLW     0x0                                                                                             
00156c   2201     ADDWFC    0x1,0x1,0x0                                                                                     
00156e   d001     BRA       0x1572                                                                                          
001570   d87d     RCALL     0x166c             return n;                                                                    C:\mort\Mort Code 08\code\teleop.c
001572   d1cb     BRA       0x190a                                                                                          
00166c   d98b     RCALL     0x1984                                                                                          
00166e   cfdb     MOVFF     0xfdb,0x1                                                                                       
001670   f001                                                                                                               
001672   0012     RETURN    0x0                                                                                             
00190a   c000     MOVFF     0x0,0xff3                                                                                       
00190c   fff3                                                                                                               
00190e   c001     MOVFF     0x1,0xff4                                                                                       
001910   fff4                                                                                                               
001984   0efd     MOVLW     0xfd                                                                                            
001986   cfdb     MOVFF     0xfdb,0x0                                                                                       
001988   f000                                                                                                               
00198a   0efe     MOVLW     0xfe                                                                                            
00198c   0012     RETURN    0x0                                                                                             
0016ba   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\mort\Mort Code 08\code\teleop.c
0016bc   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0016be   ffd9                                                                                                               
0016c0   0012     RETURN    0x0                                                                                             
001912   d6d3     BRA       0x16ba                                                                                          
                                           /******************************************************************************* C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	TITLE:		timers.c                                                               C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	VERSION:	0.2 (Beta)                                                            C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	DATE:		03-Jan-2008                                                             C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	AUTHOR:		R. Kevin Watson                                                       C:\mort\Mort Code 08\code\timers.c
                                           *				kevinw@jpl.nasa.gov                                                         C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	COMMENTS:	This file contains template timer initialization & interrupt         C:\mort\Mort Code 08\code\timers.c
                                           *				handling code for the IFI FRC robot controller.                             C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *				This version is compatible with Microchip C18 3.0+ only.                    C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *               This file best viewed with tabs set to four.                     C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *				You are free to use this source code for any non-commercial                 C:\mort\Mort Code 08\code\timers.c
                                           *				use. Please do not make copies of this source code, modified                C:\mort\Mort Code 08\code\timers.c
                                           *				or un-modified, publicly available on the internet or elsewhere             C:\mort\Mort Code 08\code\timers.c
                                           *				without permission. Thanks.                                                 C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *				Copyright ©2007-2008 R. Kevin Watson. All rights are reserved.              C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           ******************************************************************************** C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	Change log:                                                                    C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	DATE         REV  DESCRIPTION                                                  C:\mort\Mort Code 08\code\timers.c
                                           *	-----------  ---  ----------------------------------------------------------   C:\mort\Mort Code 08\code\timers.c
                                           *	24-Dec-2007  0.1  RKW Original                                                 C:\mort\Mort Code 08\code\timers.c
                                           *	03-Jan-2008  0.2  RKW - Renamed all ISRs for consistancy across all            C:\mort\Mort Code 08\code\timers.c
                                           *	                  modules of the new robot controller code.                    C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\timers.c
                                                                                                                            C:\mort\Mort Code 08\code\timers.c
                                           #include "ifi_frc.h"                                                             C:\mort\Mort Code 08\code\timers.c
                                           #include "timers.h"                                                              C:\mort\Mort Code 08\code\timers.c
                                                                                                                            C:\mort\Mort Code 08\code\timers.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	FUNCTION:		Initialize_Timer_0()                                                C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	PURPOSE:		Initializes the timer 0 hardware.                                    C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	CALLED FROM:	main.c/Initialization()                                           C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\timers.c
                                           #ifdef ENABLE_TIMER_0_ISR                                                        C:\mort\Mort Code 08\code\timers.c
                                           void Initialize_Timer_0(void)                                                    C:\mort\Mort Code 08\code\timers.c
                                           {                                                                                C:\mort\Mort Code 08\code\timers.c
                                           	TMR0L = 0x00;			// least significant 8-bits of the timer 0 register (this is readable and writable) C:\mort\Mort Code 08\code\timers.c
                                           	TMR0H = 0x00;			// most significant 8-bits of the timer 0 register (this is readable and writable) C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	T0CONbits.T0PS0 = 0;	// T0PS2 TOPS1 T0PS0                                       C:\mort\Mort Code 08\code\timers.c
                                           	T0CONbits.T0PS1 = 0;	//   0     0     0		1:2 prescaler (clock=5MHz/each tick=200ns) C:\mort\Mort Code 08\code\timers.c
                                           	T0CONbits.T0PS2 = 0;	//   0     0     1		1:4 prescaler (clock=2.5MHz/each tick=400ns) C:\mort\Mort Code 08\code\timers.c
                                           							//   0     1     0		1:8 prescaler (clock=1.25MHz/each tick=800ns)         C:\mort\Mort Code 08\code\timers.c
                                           							//   0     1     1		1:16 prescaler (clock=625KHz/each tick=1.6us)         C:\mort\Mort Code 08\code\timers.c
                                           							//   1     0     0		1:32 prescaler (clock=312.5KHz/each tick=3.2us)       C:\mort\Mort Code 08\code\timers.c
                                           							//   1     0     1		1:64 prescaler (clock=156.25KHz/each tick=6.4us)      C:\mort\Mort Code 08\code\timers.c
                                           							//   1     1     0		1:128 prescaler (clock=78.125KHz/each tick=12.8us)    C:\mort\Mort Code 08\code\timers.c
                                           							//   1     1     1		1:256 prescaler (clock=39.0625 KHz/each tick=25.6us)  C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	T0CONbits.PSA = 1;		// 0: use the prescaler to derive the timer clock           C:\mort\Mort Code 08\code\timers.c
                                           							// 1: don't use the prescaler (clock=10MHz/each tick=100ns)               C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	T0CONbits.T0SE = 0;		// 0: when using an external clock, timer increments on the rising-edge C:\mort\Mort Code 08\code\timers.c
                                           							// 1: when using an external clock, timer increments on the falling-edge  C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	T0CONbits.T0CS = 0;		// 0: use the internal clock (leave at 0)                  C:\mort\Mort Code 08\code\timers.c
                                           							// 1: use an external clock on RA4/T0CKI (don't use - not available on IFI controllers) C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	T0CONbits.T08BIT = 0;	// 0: timer 0 is configured as a 16-bit timer/counter     C:\mort\Mort Code 08\code\timers.c
                                           							// 1: timer 0 is configured as an 8-bit timer/counter                     C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	INTCON2bits.TMR0IP = 0;	// 0: timer 0 overflow interrupt is low priority (leave at 0 for IFI controllers) C:\mort\Mort Code 08\code\timers.c
                                           							// 1: timer 0 overflow interrupt is high priority                         C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	INTCONbits.TMR0IF = 0;	// 0: timer 0 overflow hasn't happened (set to 0 before enabling the interrupt) C:\mort\Mort Code 08\code\timers.c
                                           							// 1: timer 0 overflow has happened                                       C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	INTCONbits.TMR0IE = 0;	// 0: disable timer 0 interrupt on overflow (i.e., a transition from FFFF->0 or FF->0) C:\mort\Mort Code 08\code\timers.c
                                           							// 1: enable timer 0 interrupt on overflow (i.e., a transition from FFFF->0 or FF->0) C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	T0CONbits.TMR0ON = 0;	// 0: timer 0 is disabled                                 C:\mort\Mort Code 08\code\timers.c
                                           							// 1: timer 0 is enabled (running)                                        C:\mort\Mort Code 08\code\timers.c
                                           }                                                                                C:\mort\Mort Code 08\code\timers.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\timers.c
                                                                                                                            C:\mort\Mort Code 08\code\timers.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	FUNCTION:		Timer_0_ISR()                                                       C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	PURPOSE:		If enabled, the timer 0 interrupt handler is called when             C:\mort\Mort Code 08\code\timers.c
                                           *					the TMR0 register overflows	and rolls over to zero.                        C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	CALLED FROM:	ifi_frc.c/Interrupt_Handler_Low()                                 C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\timers.c
                                           #ifdef ENABLE_TIMER_0_ISR                                                        C:\mort\Mort Code 08\code\timers.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\timers.c
                                           void Timer_0_ISR(void)                                                           C:\mort\Mort Code 08\code\timers.c
                                           {                                                                                C:\mort\Mort Code 08\code\timers.c
                                           	// this function will be called when a timer 0 interrupt occurs                 C:\mort\Mort Code 08\code\timers.c
                                           }                                                                                C:\mort\Mort Code 08\code\timers.c
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\timers.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\timers.c
                                                                                                                            C:\mort\Mort Code 08\code\timers.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	FUNCTION:		Initialize_Timer_1()                                                C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	PURPOSE:		Initializes the timer 1 hardware.                                    C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	CALLED FROM:	main.c/Initialization()                                           C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\timers.c
                                           #ifdef ENABLE_TIMER_1_ISR                                                        C:\mort\Mort Code 08\code\timers.c
                                           void Initialize_Timer_1(void)                                                    C:\mort\Mort Code 08\code\timers.c
                                           {                                                                                C:\mort\Mort Code 08\code\timers.c
                                           	TMR1L = 0x00;			// least significant 8-bits of the timer 1 register (this is readable and writable) C:\mort\Mort Code 08\code\timers.c
                                           	TMR1H = 0x00;			// most significant 8-bits of the timer 1 register (this is readable and writable) C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	T1CONbits.T1CKPS0 = 0;	// T1CSP1 T1CSP0                                         C:\mort\Mort Code 08\code\timers.c
                                           	T1CONbits.T1CKPS1 = 0;	//   0      0		1:1 prescaler (clock=10MHz/each tick=100ns) C:\mort\Mort Code 08\code\timers.c
                                           							//   0      1		1:2 prescaler (clock=5MHz/each tick=200ns)                 C:\mort\Mort Code 08\code\timers.c
                                           							//   1      0		1:4 prescaler (clock=2.5MHz/each tick=400ns)               C:\mort\Mort Code 08\code\timers.c
                                           							//   1      1		1:8 prescaler (clock=1.25MHz/each tick=800ns)              C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	T1CONbits.T1OSCEN = 0;	// 0: timer 1 oscillator disabled (leave at 0 to allow the use of an external clock) C:\mort\Mort Code 08\code\timers.c
                                           							// 1: timer 1 oscillator enabled (can't be used because of hardware constraints) C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	T1CONbits.TMR1CS = 0;	// 0: use the internal clock                              C:\mort\Mort Code 08\code\timers.c
                                           							// 1: use an external clock on RC0/T1OSO/T13CLK (rc_dig_in14 on robot controller) C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	T1CONbits.RD16 = 1;		// 0: timer 1 register operations are done in two 8-bit accesses C:\mort\Mort Code 08\code\timers.c
                                           							// 1: timer 1 register operations are done in one 16-bit access           C:\mort\Mort Code 08\code\timers.c
                                           							//    In this mode, reading TMR1L will latch a copy of TMR1H into a buffer C:\mort\Mort Code 08\code\timers.c
                                           							//    mapped to the TMR1H memory address. Conversely, a write to the buffer C:\mort\Mort Code 08\code\timers.c
                                           							//    followed by a write to the TMR1L register will update the entire 16-bit C:\mort\Mort Code 08\code\timers.c
                                           							//    timer at once. This solves the problem where the timer may overflow C:\mort\Mort Code 08\code\timers.c
                                           							//    between two 8-bit accesses. Here's an example of how to do a 16-bit read: C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           							//    unsigned char Temp_Buf; // 8-bit temporary buffer                   C:\mort\Mort Code 08\code\timers.c
                                           							//    unsigned int Timer_Snapshot; // 16-bit variable                     C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           							//    Temp_Buf = TMR1L; // TMR1L must be read before TMR1H                C:\mort\Mort Code 08\code\timers.c
                                           							//    Timer_Snapshot = TMR1H;                                             C:\mort\Mort Code 08\code\timers.c
                                           		 					//    Timer_Snapshot <<= 8; // move TMR1H data to the upper half of the variable C:\mort\Mort Code 08\code\timers.c
                                           							//    Timer_Snapshot += Temp_Buf; // we now have all sixteen bits         C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	IPR1bits.TMR1IP = 0;	// 0: timer 1 overflow interrupt is low priority (leave at 0 on IFI controllers) C:\mort\Mort Code 08\code\timers.c
                                           							// 1: timer 1 overflow interrupt is high priority                         C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	PIR1bits.TMR1IF = 0;	// 0: timer 1 overflow hasn't happened (set to 0 before enabling the interrupt) C:\mort\Mort Code 08\code\timers.c
                                           							// 1: timer 1 overflow has happened                                       C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	PIE1bits.TMR1IE = 0;	// 0: disable timer 1 interrupt on overflow (i.e., a transition from FFFF->0) C:\mort\Mort Code 08\code\timers.c
                                           							// 1: enable timer 1 interrupt on overflow (i.e., a transition from FFFF->0) C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	T1CONbits.TMR1ON = 0;	// 0: timer 1 is disabled                                 C:\mort\Mort Code 08\code\timers.c
                                           							// 1: timer 1 is enabled (running)                                        C:\mort\Mort Code 08\code\timers.c
                                           }                                                                                C:\mort\Mort Code 08\code\timers.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\timers.c
                                                                                                                            C:\mort\Mort Code 08\code\timers.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	FUNCTION:		Timer_1_ISR()                                                       C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	PURPOSE:		If enabled, the timer 1 interrupt handler is called when             C:\mort\Mort Code 08\code\timers.c
                                           *					the TMR1 register overflows	and rolls over to zero.                        C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	CALLED FROM:	ifi_frc.c/Interrupt_Handler_Low()                                 C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\timers.c
                                           #ifdef ENABLE_TIMER_1_ISR                                                        C:\mort\Mort Code 08\code\timers.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\timers.c
                                           void Timer_1_ISR(void)                                                           C:\mort\Mort Code 08\code\timers.c
                                           {                                                                                C:\mort\Mort Code 08\code\timers.c
                                           	// this function will be called when a timer 1 interrupt occurs                 C:\mort\Mort Code 08\code\timers.c
                                           }                                                                                C:\mort\Mort Code 08\code\timers.c
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\timers.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\timers.c
                                                                                                                            C:\mort\Mort Code 08\code\timers.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	FUNCTION:		Initialize_Timer_2()                                                C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	PURPOSE:		Initializes the timer 2 hardware.                                    C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	CALLED FROM:	main.c/Initialization()                                           C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\timers.c
                                           #ifdef ENABLE_TIMER_2_ISR                                                        C:\mort\Mort Code 08\code\timers.c
                                           void Initialize_Timer_2(void)                                                    C:\mort\Mort Code 08\code\timers.c
                                           {                                                                                C:\mort\Mort Code 08\code\timers.c
00461a   6acc     CLRF      0xcc,0x0       	TMR2 = 0x00;			// 8-bit timer 2 register (this is readable and writable)        C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
00461c   0ef9     MOVLW     0xf9           	PR2	= 249;				// timer 2 period register - timer 2 increments to this           C:\mort\Mort Code 08\code\timers.c
00461e   6ecb     MOVWF     0xcb,0x0                                                                                        
                                           							// value then resets to zero on the next clock and starts                 C:\mort\Mort Code 08\code\timers.c
                                           							// all over again                                                         C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
004620   86ca     BSF       0xca,0x3,0x0   	T2CONbits.T2OUTPS0 = 1;	// T2OUTPS3 T2OUTPS2 T2OUTPS1 T2OUTPS0                  C:\mort\Mort Code 08\code\timers.c
004622   98ca     BCF       0xca,0x4,0x0   	T2CONbits.T2OUTPS1 = 0;	//    0        0        0        0		1:1 postscaler      C:\mort\Mort Code 08\code\timers.c
004624   9aca     BCF       0xca,0x5,0x0   	T2CONbits.T2OUTPS2 = 0;	//    0        0        0        1		1:2 postscaler      C:\mort\Mort Code 08\code\timers.c
004626   8cca     BSF       0xca,0x6,0x0   	T2CONbits.T2OUTPS3 = 1;	//    0        0        1        0		1:3 postscaler      C:\mort\Mort Code 08\code\timers.c
                                           							//    0        0        1        1		1:4 postscaler                        C:\mort\Mort Code 08\code\timers.c
                                           							//    0        1        0        0		1:5 postscaler                        C:\mort\Mort Code 08\code\timers.c
                                           							//    0        1        0        1		1:6 postscaler                        C:\mort\Mort Code 08\code\timers.c
                                           							//    0        1        1        0		1:7 postscaler                        C:\mort\Mort Code 08\code\timers.c
                                           							//    0        1        1        1		1:8 postscaler                        C:\mort\Mort Code 08\code\timers.c
                                           							//    1        0        0        0		1:9 postscaler                        C:\mort\Mort Code 08\code\timers.c
                                           							//    1        0        0        1		1:10 postscaler                       C:\mort\Mort Code 08\code\timers.c
                                           							//    1        0        1        0		1:11 postscaler                       C:\mort\Mort Code 08\code\timers.c
                                           							//    1        0        1        1		1:12 postscaler                       C:\mort\Mort Code 08\code\timers.c
                                           							//    1        1        0        0		1:13 postscaler                       C:\mort\Mort Code 08\code\timers.c
                                           							//    1        1        0        1		1:14 postscaler                       C:\mort\Mort Code 08\code\timers.c
                                           							//    1        1        1        0		1:15 postscaler                       C:\mort\Mort Code 08\code\timers.c
                                           							//    1        1        1        1		1:16 postscaler                       C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
004628   80ca     BSF       0xca,0x0,0x0   	T2CONbits.T2CKPS0 = 1;	// T2CKPS1  T2CKPS0                                      C:\mort\Mort Code 08\code\timers.c
00462a   92ca     BCF       0xca,0x1,0x0   	T2CONbits.T2CKPS1 = 0;	//    0        0	1:1 prescaler (clock = 10MHz/each tick=100ns) C:\mort\Mort Code 08\code\timers.c
                                           							//    0        1	1:4 prescaler (clock = 2.5MHz/each tick=400ns)           C:\mort\Mort Code 08\code\timers.c
                                           							//    1        x	1:16 prescaler (clock = 625KHz/each tick=1.6us) (T2CKPS0 doesn't matter) C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
00462c   929f     BCF       0x9f,0x1,0x0   	IPR1bits.TMR2IP = 0;	// 0: timer 2 interrupt is low priority (leave at 0 for IFI controllers) C:\mort\Mort Code 08\code\timers.c
                                           							// 1: timer 2 interrupt is high priority                                  C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
00462e   929e     BCF       0x9e,0x1,0x0   	PIR1bits.TMR2IF = 0;	// 0: TMR2 to PR2 match hasn't happened (set to 0 before enabling the interrupt) C:\mort\Mort Code 08\code\timers.c
                                           							// 1: TMR2 to PR2 match has happened                                      C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
004630   829d     BSF       0x9d,0x1,0x0   	PIE1bits.TMR2IE = 1;	// 0: disable timer 2 interrupt on PR2 match               C:\mort\Mort Code 08\code\timers.c
                                           							// 1: enable timer 2 interrupt on PR2 match                               C:\mort\Mort Code 08\code\timers.c
                                           							//    if the prescaler is enabled (i.e., greater than 1:1), this          C:\mort\Mort Code 08\code\timers.c
                                           							//    match will occur n times (where n is the postscaler value)          C:\mort\Mort Code 08\code\timers.c
                                           							//    before an interrupt will be generated                               C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
004632   94ca     BCF       0xca,0x2,0x0   	T2CONbits.TMR2ON = 0;	// 0: timer 2 is disabled                                 C:\mort\Mort Code 08\code\timers.c
                                           							// 1: timer 2 is enabled (running)                                        C:\mort\Mort Code 08\code\timers.c
004634   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\timers.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\timers.c
                                                                                                                            C:\mort\Mort Code 08\code\timers.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	FUNCTION:		Timer_2_ISR()                                                       C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	PURPOSE:		If enabled, the timer 2 interrupt handler is called when the         C:\mort\Mort Code 08\code\timers.c
                                           *					TMR2 register matches the value stored in the PR2 register.                C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	CALLED FROM:	ifi_frc.c/Interrupt_Handler_Low()                                 C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\timers.c
                                           #ifdef ENABLE_TIMER_2_ISR                                                        C:\mort\Mort Code 08\code\timers.c
                                           volatile unsigned int msClock = 0;                                               C:\mort\Mort Code 08\code\timers.c
                                                                                                                            C:\mort\Mort Code 08\code\timers.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\timers.c
                                           void Timer_2_ISR(void)                                                           C:\mort\Mort Code 08\code\timers.c
                                           {                                                                                C:\mort\Mort Code 08\code\timers.c
004636   0100     MOVLB     0x0            	msClock++;                                                                      C:\mort\Mort Code 08\code\timers.c
004638   2bfd     INCF      0xfd,0x1,0x1                                                                                    
00463a   0e00     MOVLW     0x0                                                                                             
00463c   23fe     ADDWFC    0xfe,0x1,0x1                                                                                    
00463e   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\timers.c
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\timers.c
                                                                                                                            C:\mort\Mort Code 08\code\timers.c
                                           void Timer_2_Reset(void)                                                         C:\mort\Mort Code 08\code\timers.c
                                           {                                                                                C:\mort\Mort Code 08\code\timers.c
004640   d807     RCALL     0x4650             Timer_2_Stop();                                                              C:\mort\Mort Code 08\code\timers.c
004642   0100     MOVLB     0x0                msClock = 0;                                                                 C:\mort\Mort Code 08\code\timers.c
004644   6bfd     CLRF      0xfd,0x1                                                                                        
004646   6bfe     CLRF      0xfe,0x1                                                                                        
004648   ef26     GOTO      0x464c             Timer_2_Start();                                                             C:\mort\Mort Code 08\code\timers.c
00464a   f023                                                                                                               
                                           }                                                                                C:\mort\Mort Code 08\code\timers.c
                                                                                                                            C:\mort\Mort Code 08\code\timers.c
                                           void Timer_2_Start(void)                                                         C:\mort\Mort Code 08\code\timers.c
                                           {                                                                                C:\mort\Mort Code 08\code\timers.c
00464c   84ca     BSF       0xca,0x2,0x0       T2CONbits.TMR2ON = 1;                                                        C:\mort\Mort Code 08\code\timers.c
00464e   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\timers.c
                                                                                                                            C:\mort\Mort Code 08\code\timers.c
                                           void Timer_2_Stop(void)                                                          C:\mort\Mort Code 08\code\timers.c
                                           {                                                                                C:\mort\Mort Code 08\code\timers.c
004650   94ca     BCF       0xca,0x2,0x0       T2CONbits.TMR2ON = 0;                                                        C:\mort\Mort Code 08\code\timers.c
004652   0012     RETURN    0x0            }                                                                                C:\mort\Mort Code 08\code\timers.c
                                                                                                                            C:\mort\Mort Code 08\code\timers.c
004654   cfd9     MOVFF     0xfd9,0xfe6    unsigned int Timer_2_Get_Time(void)                                              C:\mort\Mort Code 08\code\timers.c
004656   ffe6                                                                                                               
004658   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00465a   ffd9                                                                                                               
00465c   0e02     MOVLW     0x2                                                                                             
00465e   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                C:\mort\Mort Code 08\code\timers.c
                                               unsigned int tempTime;                                                       C:\mort\Mort Code 08\code\timers.c
004660   dff7     RCALL     0x4650             Timer_2_Stop();                                                              C:\mort\Mort Code 08\code\timers.c
004662   c0fd     MOVFF     0xfd,0xfde         tempTime = msClock;                                                          C:\mort\Mort Code 08\code\timers.c
004664   ffde                                                                                                               
004666   c0fe     MOVFF     0xfe,0xfdd                                                                                      
004668   ffdd                                                                                                               
00466a   dff0     RCALL     0x464c             Timer_2_Start();                                                             C:\mort\Mort Code 08\code\timers.c
00466c   cfde     MOVFF     0xfde,0x0          return tempTime;                                                             C:\mort\Mort Code 08\code\timers.c
00466e   f000                                                                                                               
004670   cfdd     MOVFF     0xfdd,0x1                                                                                       
004672   f001                                                                                                               
004674   c000     MOVFF     0x0,0xff3                                                                                       
004676   fff3                                                                                                               
004678   c001     MOVFF     0x1,0xff4                                                                                       
00467a   fff4                                                                                                               
00467c   0e02     MOVLW     0x2            }                                                                                C:\mort\Mort Code 08\code\timers.c
00467e   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
004680   e202     BC        0x4686                                                                                          
004682   6ae1     CLRF      0xe1,0x0                                                                                        
004684   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004686   6ee1     MOVWF     0xe1,0x0                                                                                        
004688   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00468a   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00468c   ffd9                                                                                                               
00468e   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\mort\Mort Code 08\code\timers.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\timers.c
                                                                                                                            C:\mort\Mort Code 08\code\timers.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	FUNCTION:		Initialize_Timer_3()                                                C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	PURPOSE:		Initializes the timer 3 hardware.                                    C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	CALLED FROM:	main.c/Initialization()                                           C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	COMMENTS:		Timer 3 is used by the precision PWM software                       C:\mort\Mort Code 08\code\timers.c
                                           *					(pwm.c/.h). If you use timer 3 in your application,                        C:\mort\Mort Code 08\code\timers.c
                                           *					you'll need	to remove pwm.c/.h from your project or                        C:\mort\Mort Code 08\code\timers.c
                                           *					modify it to use timer 1.                                                  C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\timers.c
                                           #ifdef ENABLE_TIMER_3_ISR                                                        C:\mort\Mort Code 08\code\timers.c
                                           void Initialize_Timer_3(void)                                                    C:\mort\Mort Code 08\code\timers.c
                                           {                                                                                C:\mort\Mort Code 08\code\timers.c
                                           	TMR3L = 0x00;			// least significant 8-bits of the timer 3 register (this is readable and writable) C:\mort\Mort Code 08\code\timers.c
                                           	TMR3H = 0x00;			// most significant 8-bits of the timer 3 register (this is readable and writable) C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	T3CONbits.T3CKPS0 = 0;	// T3CKPS1 T3CKPS0                                       C:\mort\Mort Code 08\code\timers.c
                                           	T3CONbits.T3CKPS1 = 0;	//    0       0		1:1 prescaler (clock=10MHz/each tick=100ns) C:\mort\Mort Code 08\code\timers.c
                                           							//    0       1		1:2 prescaler (clock=5MHz/each tick=200ns)               C:\mort\Mort Code 08\code\timers.c
                                           							//    1       0		1:4 prescaler (clock=2.5MHz/each tick=400ns)             C:\mort\Mort Code 08\code\timers.c
                                           							//    1       1		1:8 prescaler (clock=1.25MHz/each tick=800ns)            C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	T3CONbits.TMR3CS = 0;	// 0: use the internal clock                              C:\mort\Mort Code 08\code\timers.c
                                           							// 1: use an external clock on RC0/T1OSO/T13CLK (rc_dig_in14 on robot controller) C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	T3CONbits.T3SYNC = 1;	// 0: do not synchronize the external clock (this can cause timing problems) C:\mort\Mort Code 08\code\timers.c
                                           							// 1: synchronize the external clock to the 18F8520/18F8722 internal clock, which is desirable C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	T3CONbits.RD16 = 1;		// 0: timer 3 register operations are done in two 8-bit accesses C:\mort\Mort Code 08\code\timers.c
                                           							// 1: timer 3 register operations are done in one 16-bit access           C:\mort\Mort Code 08\code\timers.c
                                           							//    In this mode, reading TMR3L will latch a copy of TMR3H into a buffer C:\mort\Mort Code 08\code\timers.c
                                           							//    mapped to the TMR3H memory address. Conversely, a write to the buffer C:\mort\Mort Code 08\code\timers.c
                                           							//    followed by a write to the TMR3L register will update the entire 16-bit C:\mort\Mort Code 08\code\timers.c
                                           							//    timer at once. This solves the problem where the timer may overflow C:\mort\Mort Code 08\code\timers.c
                                           							//    between two 8-bit accesses. Here's an example of how to do a 16-bit read: C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           							//    unsigned char Temp_Buf; // 8-bit temporary buffer                   C:\mort\Mort Code 08\code\timers.c
                                           							//    unsigned int Timer_Snapshot; // 16-bit variable                     C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           							//    Temp_Buf = TMR3L; // TMR3L must be read before TMR3H                C:\mort\Mort Code 08\code\timers.c
                                           							//    Timer_Snapshot = TMR3H;                                             C:\mort\Mort Code 08\code\timers.c
                                           		 					//    Timer_Snapshot <<= 8; // move TMR3H data to the upper half of the variable C:\mort\Mort Code 08\code\timers.c
                                           							//    Timer_Snapshot += Temp_Buf; // we now have all sixteen bits         C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	IPR2bits.TMR3IP = 0;	// 0: timer 3 overflow interrupt is low priority (leave at 0 on IFI controllers) C:\mort\Mort Code 08\code\timers.c
                                           							// 1: timer 3 overflow interrupt is high priority                         C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	PIR2bits.TMR3IF = 0;	// 0: timer 3 overflow hasn't happened (set to 0 before enabling the interrupt) C:\mort\Mort Code 08\code\timers.c
                                           							// 1: timer 3 overflow has happened                                       C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	PIE2bits.TMR3IE = 0;	// 0: disable timer 3 interrupt on overflow (i.e., a transition from FFFF->0) C:\mort\Mort Code 08\code\timers.c
                                           							// 1: enable timer 3 interrupt on overflow (i.e., a transition from FFFF->0) C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	T3CONbits.TMR3ON = 0;	// 0: timer 3 is disabled                                 C:\mort\Mort Code 08\code\timers.c
                                           							// 1: timer 3 is enabled (running)                                        C:\mort\Mort Code 08\code\timers.c
                                           }                                                                                C:\mort\Mort Code 08\code\timers.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\timers.c
                                                                                                                            C:\mort\Mort Code 08\code\timers.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	FUNCTION:		Timer_3_ISR()                                                       C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	PURPOSE:		If enabled, the timer 3 interrupt handler is called when             C:\mort\Mort Code 08\code\timers.c
                                           *					the TMR3 register overflows	and rolls over to zero.                        C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	CALLED FROM:	ifi_frc.c/Interrupt_Handler_Low()                                 C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\timers.c
                                           #ifdef ENABLE_TIMER_3_ISR                                                        C:\mort\Mort Code 08\code\timers.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\timers.c
                                           void Timer_3_ISR(void)                                                           C:\mort\Mort Code 08\code\timers.c
                                           {                                                                                C:\mort\Mort Code 08\code\timers.c
                                           	// this function will be called when a timer 3 interrupt occurs                 C:\mort\Mort Code 08\code\timers.c
                                           }                                                                                C:\mort\Mort Code 08\code\timers.c
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\timers.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\timers.c
                                                                                                                            C:\mort\Mort Code 08\code\timers.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	FUNCTION:		Initialize_Timer_4()                                                C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	PURPOSE:		Initializes the timer 4 hardware.                                    C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	CALLED FROM:	main.c/Initialization()                                           C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	COMMENTS:		Timer 4 is used by the ADC software (adc.c/.h). If you're           C:\mort\Mort Code 08\code\timers.c
                                           *					using the ADC software, try using timer 2 instead.                         C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *******************************************************************************/ C:\mort\Mort Code 08\code\timers.c
                                           #ifdef ENABLE_TIMER_4_ISR                                                        C:\mort\Mort Code 08\code\timers.c
                                           void Initialize_Timer_4(void)                                                    C:\mort\Mort Code 08\code\timers.c
                                           {                                                                                C:\mort\Mort Code 08\code\timers.c
                                           	TMR4 = 0x00;			// 8-bit timer 4 register (this is readable and writable)        C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	PR4	= 0xFF;				// timer 4 period register - timer 4 increments to this          C:\mort\Mort Code 08\code\timers.c
                                           							// value then resets to zero on the next clock and starts                 C:\mort\Mort Code 08\code\timers.c
                                           							// all over again                                                         C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	T4CONbits.T4OUTPS0 = 0;	// T4OUTPS3 T4OUTPS2 T4OUTPS1 T4OUTPS0                  C:\mort\Mort Code 08\code\timers.c
                                           	T4CONbits.T4OUTPS1 = 0;	//    0        0        0        0		1:1 postscaler      C:\mort\Mort Code 08\code\timers.c
                                           	T4CONbits.T4OUTPS2 = 0;	//    0        0        0        1		1:2 postscaler      C:\mort\Mort Code 08\code\timers.c
                                           	T4CONbits.T4OUTPS3 = 0;	//    0        0        1        0		1:3 postscaler      C:\mort\Mort Code 08\code\timers.c
                                           							//    0        0        1        1		1:4 postscaler                        C:\mort\Mort Code 08\code\timers.c
                                           							//    0        1        0        0		1:5 postscaler                        C:\mort\Mort Code 08\code\timers.c
                                           							//    0        1        0        1		1:6 postscaler                        C:\mort\Mort Code 08\code\timers.c
                                           							//    0        1        1        0		1:7 postscaler                        C:\mort\Mort Code 08\code\timers.c
                                           							//    0        1        1        1		1:8 postscaler                        C:\mort\Mort Code 08\code\timers.c
                                           							//    1        0        0        0		1:9 postscaler                        C:\mort\Mort Code 08\code\timers.c
                                           							//    1        0        0        1		1:10 postscaler                       C:\mort\Mort Code 08\code\timers.c
                                           							//    1        0        1        0		1:11 postscaler                       C:\mort\Mort Code 08\code\timers.c
                                           							//    1        0        1        1		1:12 postscaler                       C:\mort\Mort Code 08\code\timers.c
                                           							//    1        1        0        0		1:13 postscaler                       C:\mort\Mort Code 08\code\timers.c
                                           							//    1        1        0        1		1:14 postscaler                       C:\mort\Mort Code 08\code\timers.c
                                           							//    1        1        1        0		1:15 postscaler                       C:\mort\Mort Code 08\code\timers.c
                                           							//    1        1        1        1		1:16 postscaler                       C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	T4CONbits.T4CKPS0 = 0;	// T4CKPS1  T4CKPS0                                      C:\mort\Mort Code 08\code\timers.c
                                           	T4CONbits.T4CKPS1 = 0;	//    0        0	1:1 prescaler (clock = 10MHz/each tick=100ns) C:\mort\Mort Code 08\code\timers.c
                                           							//    0        1	1:4 prescaler (clock = 2.5MHz/each tick=400ns)           C:\mort\Mort Code 08\code\timers.c
                                           							//    1        x	1:16 prescaler (clock = 625KHz/each tick=1.6us) (T2CKPS0 doesn't matter) C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	IPR3bits.TMR4IP = 0;	// 0: timer 4 interrupt is low priority (leave at 0 for IFI controllers) C:\mort\Mort Code 08\code\timers.c
                                           							// 1: timer 4 interrupt is high priority                                  C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	PIR3bits.TMR4IF = 0;	// 0: TMR4 to PR4 match hasn't happened (set to 0 before enabling the interrupt) C:\mort\Mort Code 08\code\timers.c
                                           							// 1: TMR4 to PR4 match has happened                                      C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	PIE3bits.TMR4IE = 0;	// 0: disable timer 4 interrupt on PR4 match               C:\mort\Mort Code 08\code\timers.c
                                           							// 1: enable timer 4 interrupt on PR4 match                               C:\mort\Mort Code 08\code\timers.c
                                           							//    if the prescaler is enabled (i.e., greater than 1:1), this          C:\mort\Mort Code 08\code\timers.c
                                           							//    match will occur n times (where n is the postscaler value)          C:\mort\Mort Code 08\code\timers.c
                                           							//    before an interrupt will be generated                               C:\mort\Mort Code 08\code\timers.c
                                           							//                                                                        C:\mort\Mort Code 08\code\timers.c
                                           	T4CONbits.TMR4ON = 0;	// 0: timer 4 is disabled                                 C:\mort\Mort Code 08\code\timers.c
                                           							// 1: timer 4 is enabled (running)                                        C:\mort\Mort Code 08\code\timers.c
                                           }                                                                                C:\mort\Mort Code 08\code\timers.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\timers.c
                                           // COMMENTED OUT BECAUSE IT IS USED IN ADC AND IT HAS MULTIPLE DEFINITIONS       C:\mort\Mort Code 08\code\timers.c
                                           /******************************************************************************* C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	FUNCTION:		Timer_4_ISR()                                                       C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	PURPOSE:		If enabled, the timer 4 interrupt handler is called when the         C:\mort\Mort Code 08\code\timers.c
                                           *					TMR4 register matches the value stored in the PR4 register.                C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	CALLED FROM:	ifi_frc.c/Interrupt_Handler_Low()                                 C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	PARAMETERS:		None                                                              C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	RETURNS:		Nothing                                                              C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *	COMMENTS:                                                                      C:\mort\Mort Code 08\code\timers.c
                                           *                                                                                C:\mort\Mort Code 08\code\timers.c
                                           *******************************************************************************  C:\mort\Mort Code 08\code\timers.c
                                           #ifdef ENABLE_TIMER_4_ISR                                                        C:\mort\Mort Code 08\code\timers.c
                                           #pragma tmpdata low_isr_tmpdata                                                  C:\mort\Mort Code 08\code\timers.c
                                           void Timer_4_ISR(void)                                                           C:\mort\Mort Code 08\code\timers.c
                                           {                                                                                C:\mort\Mort Code 08\code\timers.c
                                           	// this function will be called when a timer 4 interrupt occurs                 C:\mort\Mort Code 08\code\timers.c
                                           }                                                                                C:\mort\Mort Code 08\code\timers.c
                                           #pragma tmpdata                                                                  C:\mort\Mort Code 08\code\timers.c
                                           #endif                                                                           C:\mort\Mort Code 08\code\timers.c
                                           */                                                                               C:\mort\Mort Code 08\code\timers.c
